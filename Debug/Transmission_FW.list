
Transmission_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000476c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004864  08004864  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08004864  08004864  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004864  08004864  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800486c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000064  080048d0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080048d0  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d3e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e2  00000000  00000000  00030e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  000330f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c00  00000000  00000000  00034028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013178  00000000  00000000  00034c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012618  00000000  00000000  00047da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000736c4  00000000  00000000  0005a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000376c  00000000  00000000  000cda7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d11e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004814 	.word	0x08004814

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08004814 	.word	0x08004814

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <tmp_tx>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmp_tx(radio *r, SPI_HandleTypeDef *hspi, uint8_t *data, uint8_t data_size)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	001a      	movs	r2, r3
 800022e:	1cfb      	adds	r3, r7, #3
 8000230:	701a      	strb	r2, [r3, #0]
	r->sx_state = TRANSMITTER;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2270      	movs	r2, #112	; 0x70
 8000236:	2103      	movs	r1, #3
 8000238:	5499      	strb	r1, [r3, r2]
	memcpy(r->tx_buffer, data, data_size);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	3374      	adds	r3, #116	; 0x74
 800023e:	0018      	movs	r0, r3
 8000240:	1cfb      	adds	r3, r7, #3
 8000242:	781a      	ldrb	r2, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	0019      	movs	r1, r3
 8000248:	f004 fada 	bl	8004800 <memcpy>
	HAL_UART_Transmit_IT(&huart1, tx_mesg, sizeof(tx_mesg));
 800024c:	4904      	ldr	r1, [pc, #16]	; (8000260 <tmp_tx+0x40>)
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <tmp_tx+0x44>)
 8000250:	2210      	movs	r2, #16
 8000252:	0018      	movs	r0, r3
 8000254:	f003 fe2e 	bl	8003eb4 <HAL_UART_Transmit_IT>
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b004      	add	sp, #16
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000048 	.word	0x20000048
 8000264:	2000014c 	.word	0x2000014c

08000268 <tmp_rx>:

void tmp_rx(radio *r, SPI_HandleTypeDef *hspi)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]
	r->sx_state = RECEIVER;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2270      	movs	r2, #112	; 0x70
 8000276:	2105      	movs	r1, #5
 8000278:	5499      	strb	r1, [r3, r2]
}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	tmp_tx(&r, &hspi1, data, sizeof(data));
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800028e:	4905      	ldr	r1, [pc, #20]	; (80002a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000292:	2346      	movs	r3, #70	; 0x46
 8000294:	f7ff ffc4 	bl	8000220 <tmp_tx>
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000000 	.word	0x20000000
 80002a4:	200000a0 	.word	0x200000a0
 80002a8:	200001d4 	.word	0x200001d4

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fef4 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f828 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f9ae 	bl	8000618 <MX_GPIO_Init>
  MX_RTC_Init();
 80002bc:	f000 f884 	bl	80003c8 <MX_RTC_Init>
  MX_SPI1_Init();
 80002c0:	f000 f8e4 	bl	800048c <MX_SPI1_Init>
  MX_TIM1_Init();
 80002c4:	f000 f920 	bl	8000508 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80002c8:	f000 f976 	bl	80005b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim1);
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <main+0x50>)
 80002ce:	0018      	movs	r0, r3
 80002d0:	f003 f9ca 	bl	8003668 <HAL_TIM_Base_Init>
//  HAL_TIM_Base_Start_IT(&htim1);
  sx1278_init(&r, &hspi1);
 80002d4:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <main+0x54>)
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <main+0x58>)
 80002d8:	0011      	movs	r1, r2
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 fcbf 	bl	8000c5e <sx1278_init>
  tmp_rx(&r, &hspi1);
 80002e0:	4a07      	ldr	r2, [pc, #28]	; (8000300 <main+0x54>)
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <main+0x58>)
 80002e4:	0011      	movs	r1, r2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f7ff ffbe 	bl	8000268 <tmp_rx>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SX1278_APP(&r, &hspi1);
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <main+0x54>)
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <main+0x58>)
 80002f0:	0011      	movs	r1, r2
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fdce 	bl	8000e94 <SX1278_APP>
 80002f8:	e7f8      	b.n	80002ec <main+0x40>
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	20000104 	.word	0x20000104
 8000300:	200000a0 	.word	0x200000a0
 8000304:	200001d4 	.word	0x200001d4

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b095      	sub	sp, #84	; 0x54
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	2420      	movs	r4, #32
 8000310:	193b      	adds	r3, r7, r4
 8000312:	0018      	movs	r0, r3
 8000314:	2330      	movs	r3, #48	; 0x30
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f004 fa45 	bl	80047a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031e:	2310      	movs	r3, #16
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	0018      	movs	r0, r3
 8000324:	2310      	movs	r3, #16
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f004 fa3d 	bl	80047a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032e:	003b      	movs	r3, r7
 8000330:	0018      	movs	r0, r3
 8000332:	2310      	movs	r3, #16
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f004 fa36 	bl	80047a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800033c:	0021      	movs	r1, r4
 800033e:	187b      	adds	r3, r7, r1
 8000340:	220a      	movs	r2, #10
 8000342:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2201      	movs	r2, #1
 8000348:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2210      	movs	r2, #16
 800034e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2201      	movs	r2, #1
 8000354:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035c:	187b      	adds	r3, r7, r1
 800035e:	0018      	movs	r0, r3
 8000360:	f001 f9aa 	bl	80016b8 <HAL_RCC_OscConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000368:	f000 f9b8 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	2110      	movs	r1, #16
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2207      	movs	r2, #7
 8000372:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2100      	movs	r1, #0
 800038a:	0018      	movs	r0, r3
 800038c:	f001 fcae 	bl	8001cec <HAL_RCC_ClockConfig>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000394:	f000 f9a2 	bl	80006dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000398:	003b      	movs	r3, r7
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <SystemClock_Config+0xbc>)
 800039c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800039e:	003b      	movs	r3, r7
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003a4:	003b      	movs	r3, r7
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ac:	003b      	movs	r3, r7
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 fde0 	bl	8001f74 <HAL_RCCEx_PeriphCLKConfig>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003b8:	f000 f990 	bl	80006dc <Error_Handler>
  }
}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b015      	add	sp, #84	; 0x54
 80003c2:	bd90      	pop	{r4, r7, pc}
 80003c4:	00010001 	.word	0x00010001

080003c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	0018      	movs	r0, r3
 80003d2:	2314      	movs	r3, #20
 80003d4:	001a      	movs	r2, r3
 80003d6:	2100      	movs	r1, #0
 80003d8:	f004 f9e6 	bl	80047a8 <memset>
  RTC_DateTypeDef sDate = {0};
 80003dc:	003b      	movs	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003e2:	4b28      	ldr	r3, [pc, #160]	; (8000484 <MX_RTC_Init+0xbc>)
 80003e4:	4a28      	ldr	r2, [pc, #160]	; (8000488 <MX_RTC_Init+0xc0>)
 80003e6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003e8:	4b26      	ldr	r3, [pc, #152]	; (8000484 <MX_RTC_Init+0xbc>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003ee:	4b25      	ldr	r3, [pc, #148]	; (8000484 <MX_RTC_Init+0xbc>)
 80003f0:	227f      	movs	r2, #127	; 0x7f
 80003f2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <MX_RTC_Init+0xbc>)
 80003f6:	22ff      	movs	r2, #255	; 0xff
 80003f8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003fa:	4b22      	ldr	r3, [pc, #136]	; (8000484 <MX_RTC_Init+0xbc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000400:	4b20      	ldr	r3, [pc, #128]	; (8000484 <MX_RTC_Init+0xbc>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <MX_RTC_Init+0xbc>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800040c:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <MX_RTC_Init+0xbc>)
 800040e:	0018      	movs	r0, r3
 8000410:	f001 fe7e 	bl	8002110 <HAL_RTC_Init>
 8000414:	1e03      	subs	r3, r0, #0
 8000416:	d001      	beq.n	800041c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000418:	f000 f960 	bl	80006dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800043a:	1d39      	adds	r1, r7, #4
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_RTC_Init+0xbc>)
 800043e:	2201      	movs	r2, #1
 8000440:	0018      	movs	r0, r3
 8000442:	f001 fefd 	bl	8002240 <HAL_RTC_SetTime>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_RTC_Init+0x86>
  {
    Error_Handler();
 800044a:	f000 f947 	bl	80006dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800044e:	003b      	movs	r3, r7
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000454:	003b      	movs	r3, r7
 8000456:	2201      	movs	r2, #1
 8000458:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800045a:	003b      	movs	r3, r7
 800045c:	2201      	movs	r2, #1
 800045e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000460:	003b      	movs	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000466:	0039      	movs	r1, r7
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_RTC_Init+0xbc>)
 800046a:	2201      	movs	r2, #1
 800046c:	0018      	movs	r0, r3
 800046e:	f001 ff8d 	bl	800238c <HAL_RTC_SetDate>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8000476:	f000 f931 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b006      	add	sp, #24
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	20000080 	.word	0x20000080
 8000488:	40002800 	.word	0x40002800

0800048c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <MX_SPI1_Init+0x74>)
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <MX_SPI1_Init+0x78>)
 8000494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <MX_SPI1_Init+0x74>)
 8000498:	2282      	movs	r2, #130	; 0x82
 800049a:	0052      	lsls	r2, r2, #1
 800049c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004a4:	4b16      	ldr	r3, [pc, #88]	; (8000500 <MX_SPI1_Init+0x74>)
 80004a6:	22e0      	movs	r2, #224	; 0xe0
 80004a8:	00d2      	lsls	r2, r2, #3
 80004aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_SPI1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_SPI1_Init+0x74>)
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	0092      	lsls	r2, r2, #2
 80004be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_SPI1_Init+0x74>)
 80004c2:	2208      	movs	r2, #8
 80004c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_SPI1_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_SPI1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_SPI1_Init+0x74>)
 80004da:	2207      	movs	r2, #7
 80004dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_SPI1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_SPI1_Init+0x74>)
 80004e6:	2208      	movs	r2, #8
 80004e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <MX_SPI1_Init+0x74>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 f893 	bl	8002618 <HAL_SPI_Init>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d001      	beq.n	80004fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004f6:	f000 f8f1 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200000a0 	.word	0x200000a0
 8000504:	40013000 	.word	0x40013000

08000508 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050e:	2308      	movs	r3, #8
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2310      	movs	r3, #16
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f004 f945 	bl	80047a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051e:	003b      	movs	r3, r7
 8000520:	0018      	movs	r0, r3
 8000522:	2308      	movs	r3, #8
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f004 f93e 	bl	80047a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <MX_TIM1_Init+0xa4>)
 800052e:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <MX_TIM1_Init+0xa8>)
 8000530:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_TIM1_Init+0xa4>)
 8000534:	2264      	movs	r2, #100	; 0x64
 8000536:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_TIM1_Init+0xa4>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_TIM1_Init+0xa4>)
 8000540:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_TIM1_Init+0xac>)
 8000542:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_TIM1_Init+0xa4>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_TIM1_Init+0xa4>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_TIM1_Init+0xa4>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_TIM1_Init+0xa4>)
 8000558:	0018      	movs	r0, r3
 800055a:	f003 f885 	bl	8003668 <HAL_TIM_Base_Init>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000562:	f000 f8bb 	bl	80006dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000566:	2108      	movs	r1, #8
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2280      	movs	r2, #128	; 0x80
 800056c:	0152      	lsls	r2, r2, #5
 800056e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000570:	187a      	adds	r2, r7, r1
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_TIM1_Init+0xa4>)
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f003 f9dc 	bl	8003934 <HAL_TIM_ConfigClockSource>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000580:	f000 f8ac 	bl	80006dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000584:	003b      	movs	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800058a:	003b      	movs	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000590:	003a      	movs	r2, r7
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_TIM1_Init+0xa4>)
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f003 fbd0 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005a0:	f000 f89c 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b006      	add	sp, #24
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000104 	.word	0x20000104
 80005b0:	40012c00 	.word	0x40012c00
 80005b4:	0000ffff 	.word	0x0000ffff

080005b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <MX_USART1_UART_Init+0x5c>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005c2:	4b13      	ldr	r3, [pc, #76]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005c4:	2296      	movs	r2, #150	; 0x96
 80005c6:	0192      	lsls	r2, r2, #6
 80005c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005de:	220c      	movs	r2, #12
 80005e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <MX_USART1_UART_Init+0x58>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f003 fc05 	bl	8003e0c <HAL_UART_Init>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000606:	f000 f869 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000014c 	.word	0x2000014c
 8000614:	40013800 	.word	0x40013800

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b089      	sub	sp, #36	; 0x24
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	240c      	movs	r4, #12
 8000620:	193b      	adds	r3, r7, r4
 8000622:	0018      	movs	r0, r3
 8000624:	2314      	movs	r3, #20
 8000626:	001a      	movs	r2, r3
 8000628:	2100      	movs	r1, #0
 800062a:	f004 f8bd 	bl	80047a8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_GPIO_Init+0xbc>)
 8000630:	695a      	ldr	r2, [r3, #20]
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_GPIO_Init+0xbc>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0289      	lsls	r1, r1, #10
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_GPIO_Init+0xbc>)
 800063e:	695a      	ldr	r2, [r3, #20]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	029b      	lsls	r3, r3, #10
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_GPIO_Init+0xbc>)
 800064c:	695a      	ldr	r2, [r3, #20]
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_GPIO_Init+0xbc>)
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	02c9      	lsls	r1, r1, #11
 8000654:	430a      	orrs	r2, r1
 8000656:	615a      	str	r2, [r3, #20]
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_GPIO_Init+0xbc>)
 800065a:	695a      	ldr	r2, [r3, #20]
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	02db      	lsls	r3, r3, #11
 8000660:	4013      	ands	r3, r2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000666:	2390      	movs	r3, #144	; 0x90
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	2200      	movs	r2, #0
 800066c:	2110      	movs	r1, #16
 800066e:	0018      	movs	r0, r3
 8000670:	f001 f804 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_GPIO_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fffe 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2210      	movs	r2, #16
 8000684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2201      	movs	r2, #1
 800068a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	193a      	adds	r2, r7, r4
 800069a:	2390      	movs	r3, #144	; 0x90
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fe83 	bl	80013ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a6:	0021      	movs	r1, r4
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2208      	movs	r2, #8
 80006ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2201      	movs	r2, #1
 80006b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <MX_GPIO_Init+0xc0>)
 80006c4:	0019      	movs	r1, r3
 80006c6:	0010      	movs	r0, r2
 80006c8:	f000 fe70 	bl	80013ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b009      	add	sp, #36	; 0x24
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	48000400 	.word	0x48000400

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_MspInit+0x44>)
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_MspInit+0x44>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	619a      	str	r2, [r3, #24]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_MspInit+0x44>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_MspInit+0x44>)
 8000708:	69da      	ldr	r2, [r3, #28]
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <HAL_MspInit+0x44>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0549      	lsls	r1, r1, #21
 8000710:	430a      	orrs	r2, r1
 8000712:	61da      	str	r2, [r3, #28]
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_MspInit+0x44>)
 8000716:	69da      	ldr	r2, [r3, #28]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	055b      	lsls	r3, r3, #21
 800071c:	4013      	ands	r3, r2
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_RTC_MspInit+0x28>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_RTC_MspInit+0x2c>)
 8000744:	6a1a      	ldr	r2, [r3, #32]
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_RTC_MspInit+0x2c>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0209      	lsls	r1, r1, #8
 800074c:	430a      	orrs	r2, r1
 800074e:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40002800 	.word	0x40002800
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b08b      	sub	sp, #44	; 0x2c
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	2414      	movs	r4, #20
 800076a:	193b      	adds	r3, r7, r4
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f004 f818 	bl	80047a8 <memset>
  if(hspi->Instance==SPI1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a20      	ldr	r2, [pc, #128]	; (8000800 <HAL_SPI_MspInit+0xa0>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d13a      	bne.n	80007f8 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <HAL_SPI_MspInit+0xa4>)
 8000784:	699a      	ldr	r2, [r3, #24]
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <HAL_SPI_MspInit+0xa4>)
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	0149      	lsls	r1, r1, #5
 800078c:	430a      	orrs	r2, r1
 800078e:	619a      	str	r2, [r3, #24]
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_SPI_MspInit+0xa4>)
 8000792:	699a      	ldr	r2, [r3, #24]
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	015b      	lsls	r3, r3, #5
 8000798:	4013      	ands	r3, r2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_SPI_MspInit+0xa4>)
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_SPI_MspInit+0xa4>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	0289      	lsls	r1, r1, #10
 80007a8:	430a      	orrs	r2, r1
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_SPI_MspInit+0xa4>)
 80007ae:	695a      	ldr	r2, [r3, #20]
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	029b      	lsls	r3, r3, #10
 80007b4:	4013      	ands	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	22e0      	movs	r2, #224	; 0xe0
 80007c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2202      	movs	r2, #2
 80007c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2203      	movs	r2, #3
 80007d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	187a      	adds	r2, r7, r1
 80007dc:	2390      	movs	r3, #144	; 0x90
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 fde2 	bl	80013ac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2019      	movs	r0, #25
 80007ee:	f000 fd65 	bl	80012bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007f2:	2019      	movs	r0, #25
 80007f4:	f000 fd77 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b00b      	add	sp, #44	; 0x2c
 80007fe:	bd90      	pop	{r4, r7, pc}
 8000800:	40013000 	.word	0x40013000
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <HAL_TIM_Base_MspInit+0x58>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d11d      	bne.n	8000856 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_TIM_Base_MspInit+0x5c>)
 800081c:	699a      	ldr	r2, [r3, #24]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_TIM_Base_MspInit+0x5c>)
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	0109      	lsls	r1, r1, #4
 8000824:	430a      	orrs	r2, r1
 8000826:	619a      	str	r2, [r3, #24]
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_TIM_Base_MspInit+0x5c>)
 800082a:	699a      	ldr	r2, [r3, #24]
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	200d      	movs	r0, #13
 800083c:	f000 fd3e 	bl	80012bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000840:	200d      	movs	r0, #13
 8000842:	f000 fd50 	bl	80012e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	200e      	movs	r0, #14
 800084c:	f000 fd36 	bl	80012bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000850:	200e      	movs	r0, #14
 8000852:	f000 fd48 	bl	80012e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40012c00 	.word	0x40012c00
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	; 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f003 ff94 	bl	80047a8 <memset>
  if(huart->Instance==USART1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <HAL_UART_MspInit+0x94>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d133      	bne.n	80008f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <HAL_UART_MspInit+0x98>)
 800088c:	699a      	ldr	r2, [r3, #24]
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_UART_MspInit+0x98>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	01c9      	lsls	r1, r1, #7
 8000894:	430a      	orrs	r2, r1
 8000896:	619a      	str	r2, [r3, #24]
 8000898:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_UART_MspInit+0x98>)
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	01db      	lsls	r3, r3, #7
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <HAL_UART_MspInit+0x98>)
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x98>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0289      	lsls	r1, r1, #10
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_UART_MspInit+0x98>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	22c0      	movs	r2, #192	; 0xc0
 80008c6:	00d2      	lsls	r2, r2, #3
 80008c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	0021      	movs	r1, r4
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2202      	movs	r2, #2
 80008d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2203      	movs	r2, #3
 80008dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2201      	movs	r2, #1
 80008e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	187a      	adds	r2, r7, r1
 80008e6:	2390      	movs	r3, #144	; 0x90
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fd5d 	bl	80013ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b00b      	add	sp, #44	; 0x2c
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40013800 	.word	0x40013800
 8000900:	40021000 	.word	0x40021000

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 fc00 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800093a:	0018      	movs	r0, r3
 800093c:	f002 fee4 	bl	8003708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000104 	.word	0x20000104

0800094c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <TIM1_CC_IRQHandler+0x14>)
 8000952:	0018      	movs	r0, r3
 8000954:	f002 fed8 	bl	8003708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000104 	.word	0x20000104

08000964 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <SPI1_IRQHandler+0x14>)
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fba0 	bl	80030b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	200000a0 	.word	0x200000a0

0800097c <get_irq1_register>:
#define PREAMBLE_SIZE_MSB 	0x00
#define PREAMBLE_SIZE_LSB	0x02

//Gets the IRQ1 Register Status
uint8_t get_irq1_register(SPI_HandleTypeDef *hspi)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	return spi_single_read(hspi, REG_IRQFLAGS1);;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	213e      	movs	r1, #62	; 0x3e
 8000988:	0018      	movs	r0, r3
 800098a:	f000 f845 	bl	8000a18 <spi_single_read>
 800098e:	0003      	movs	r3, r0
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bd80      	pop	{r7, pc}

08000998 <get_irq2_register>:
//Gets the IRQ2 Register Status
uint8_t get_irq2_register(SPI_HandleTypeDef *hspi)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	return spi_single_read(hspi, REG_IRQFLAGS2);;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	213f      	movs	r1, #63	; 0x3f
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 f837 	bl	8000a18 <spi_single_read>
 80009aa:	0003      	movs	r3, r0
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <spi_single_write>:
//This Writes to a single register
void spi_single_write(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t data)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	0008      	movs	r0, r1
 80009be:	0011      	movs	r1, r2
 80009c0:	1cfb      	adds	r3, r7, #3
 80009c2:	1c02      	adds	r2, r0, #0
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	1cbb      	adds	r3, r7, #2
 80009c8:	1c0a      	adds	r2, r1, #0
 80009ca:	701a      	strb	r2, [r3, #0]
	address |= WRITE_MASK;
 80009cc:	1cfb      	adds	r3, r7, #3
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	4252      	negs	r2, r2
 80009d4:	4313      	orrs	r3, r2
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	1cfb      	adds	r3, r7, #3
 80009da:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 80009dc:	2390      	movs	r3, #144	; 0x90
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	2200      	movs	r2, #0
 80009e2:	2110      	movs	r1, #16
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fe49 	bl	800167c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 80009ea:	1cf9      	adds	r1, r7, #3
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	2364      	movs	r3, #100	; 0x64
 80009f0:	2201      	movs	r2, #1
 80009f2:	f001 fec9 	bl	8002788 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &data, sizeof(data), 100);
 80009f6:	1cb9      	adds	r1, r7, #2
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	2201      	movs	r2, #1
 80009fe:	f001 fec3 	bl	8002788 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 8000a02:	2390      	movs	r3, #144	; 0x90
 8000a04:	05db      	lsls	r3, r3, #23
 8000a06:	2201      	movs	r2, #1
 8000a08:	2110      	movs	r1, #16
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fe36 	bl	800167c <HAL_GPIO_WritePin>
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b002      	add	sp, #8
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <spi_single_read>:
//This reads a single register
uint8_t spi_single_read(SPI_HandleTypeDef *hspi, uint8_t address)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	000a      	movs	r2, r1
 8000a22:	1cfb      	adds	r3, r7, #3
 8000a24:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;
	address &= READ_MASK;
 8000a26:	1cfb      	adds	r3, r7, #3
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	227f      	movs	r2, #127	; 0x7f
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	1cfb      	adds	r3, r7, #3
 8000a32:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 8000a34:	2390      	movs	r3, #144	; 0x90
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 fe1d 	bl	800167c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 8000a42:	1cf9      	adds	r1, r7, #3
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	2364      	movs	r3, #100	; 0x64
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f001 fe9d 	bl	8002788 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, sizeof(rx_data), 100);
 8000a4e:	240f      	movs	r4, #15
 8000a50:	1939      	adds	r1, r7, r4
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	2364      	movs	r3, #100	; 0x64
 8000a56:	2201      	movs	r2, #1
 8000a58:	f001 fff6 	bl	8002a48 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 8000a5c:	2390      	movs	r3, #144	; 0x90
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	2201      	movs	r2, #1
 8000a62:	2110      	movs	r1, #16
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 fe09 	bl	800167c <HAL_GPIO_WritePin>
	return rx_data;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	781b      	ldrb	r3, [r3, #0]
}
 8000a6e:	0018      	movs	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b005      	add	sp, #20
 8000a74:	bd90      	pop	{r4, r7, pc}

08000a76 <sx1278_struct_init>:
//Only Change Below if the Value is different
//From the default setting in Datasheet
void sx1278_struct_init(SX1278 *radio)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	//Common Settings
	radio->RegOpMode |= RF_OPMODE_STANDBY | RF_OPMODE_FREQMODE_ACCESS_LF;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	2209      	movs	r2, #9
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	705a      	strb	r2, [r3, #1]
	radio->RegBitrateMsb |= RF_BITRATEMSB_250000_BPS;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	789a      	ldrb	r2, [r3, #2]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	709a      	strb	r2, [r3, #2]
	radio->RegBitrateLsb |= RF_BITRATELSB_250000_BPS;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	78db      	ldrb	r3, [r3, #3]
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	4252      	negs	r2, r2
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	70da      	strb	r2, [r3, #3]

	//You Have to Calculate with Eqs on Datasheet
	radio->RegFrfMsb = 0x6c;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	226c      	movs	r2, #108	; 0x6c
 8000aa8:	719a      	strb	r2, [r3, #6]
	radio->RegFrfMid = 0x80;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	71da      	strb	r2, [r3, #7]
	radio->RegFrfLsb = 0x00;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	721a      	strb	r2, [r3, #8]

	//TX Settings:
	radio->RegPaConfig = 0b01110011;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2273      	movs	r2, #115	; 0x73
 8000aba:	725a      	strb	r2, [r3, #9]
	radio->RegPaRamp = 0b00000101;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2205      	movs	r2, #5
 8000ac0:	729a      	strb	r2, [r3, #10]
	radio->RegOcp = 0b0001011;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	220b      	movs	r2, #11
 8000ac6:	72da      	strb	r2, [r3, #11]

	//RX Settings:
	radio->RegLna = 0b11100000;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	22e0      	movs	r2, #224	; 0xe0
 8000acc:	731a      	strb	r2, [r3, #12]
	radio->RegRxConfig = 0b10000100;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2284      	movs	r2, #132	; 0x84
 8000ad2:	735a      	strb	r2, [r3, #13]
	radio->RegRssiConfig = 0b00000000;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	739a      	strb	r2, [r3, #14]

	//There is an Rssi Threshold Reg
	//Have to change pre-amble detect when changing preamble
	radio->RegPreambleDetect = 0b10101010;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	22aa      	movs	r2, #170	; 0xaa
 8000ade:	77da      	strb	r2, [r3, #31]
	radio->RegPreambleMsb = PREAMBLE_SIZE_MSB;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2225      	movs	r2, #37	; 0x25
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	5499      	strb	r1, [r3, r2]
	radio->RegPreambleLsb = PREAMBLE_SIZE_LSB;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2226      	movs	r2, #38	; 0x26
 8000aec:	2102      	movs	r1, #2
 8000aee:	5499      	strb	r1, [r3, r2]
	//Turning Sync Word Off //PREAMBLE POLARITY
	radio->RegSyncConfig = 0b01010001;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2227      	movs	r2, #39	; 0x27
 8000af4:	2151      	movs	r1, #81	; 0x51
 8000af6:	5499      	strb	r1, [r3, r2]
	radio->RegSyncValue1 = 0xAF;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2228      	movs	r2, #40	; 0x28
 8000afc:	21af      	movs	r1, #175	; 0xaf
 8000afe:	5499      	strb	r1, [r3, r2]
	radio->RegSyncValue2 = 0xFA;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2229      	movs	r2, #41	; 0x29
 8000b04:	21fa      	movs	r1, #250	; 0xfa
 8000b06:	5499      	strb	r1, [r3, r2]

	//TCXO Settings:
	radio->RegTcxo = RF_TCXO_TCXOINPUT_ON;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2258      	movs	r2, #88	; 0x58
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	5499      	strb	r1, [r3, r2]

	//Packet Settings
	//Fixed Packet Length of 32 Bytes.
	//CRC ON
	radio->RegPacketConfig1 = 0b00011000;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2230      	movs	r2, #48	; 0x30
 8000b14:	2118      	movs	r1, #24
 8000b16:	5499      	strb	r1, [r3, r2]
	radio->RegPacketConfig2 = 0b01000000;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2231      	movs	r2, #49	; 0x31
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	5499      	strb	r1, [r3, r2]
	radio->RegPayloadLength = 0b01000000;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2232      	movs	r2, #50	; 0x32
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	5499      	strb	r1, [r3, r2]
	radio->RegFifoThresh = RF_FIFOTHRESH_TXSTARTCONDITION_FIFOTHRESH | (DATA_SIZE-1);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2235      	movs	r2, #53	; 0x35
 8000b2c:	213f      	movs	r1, #63	; 0x3f
 8000b2e:	5499      	strb	r1, [r3, r2]
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <sx1278_read_all_registers>:
//This gets the status of all registers.
//Mainly for init purposes
uint8_t sx1278_read_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3301      	adds	r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000b48:	2317      	movs	r3, #23
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e013      	b.n	8000b7a <sx1278_read_all_registers+0x42>
	{
		*(struct_ptr + ((reg-1))) = spi_single_read(hspi, reg);
 8000b52:	2517      	movs	r5, #23
 8000b54:	197b      	adds	r3, r7, r5
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	18d4      	adds	r4, r2, r3
 8000b5e:	197b      	adds	r3, r7, r5
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	0011      	movs	r1, r2
 8000b66:	0018      	movs	r0, r3
 8000b68:	f7ff ff56 	bl	8000a18 <spi_single_read>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	7023      	strb	r3, [r4, #0]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	197b      	adds	r3, r7, r5
 8000b76:	3201      	adds	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	2317      	movs	r3, #23
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b70      	cmp	r3, #112	; 0x70
 8000b82:	d9e6      	bls.n	8000b52 <sx1278_read_all_registers+0x1a>
	}
	uint8_t temp = spi_single_read(hspi, REG_VERSION);
 8000b84:	250f      	movs	r5, #15
 8000b86:	197c      	adds	r4, r7, r5
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	2142      	movs	r1, #66	; 0x42
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff ff43 	bl	8000a18 <spi_single_read>
 8000b92:	0003      	movs	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
	if(temp == CHIP_VERSION)
 8000b96:	197b      	adds	r3, r7, r5
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d101      	bne.n	8000ba2 <sx1278_read_all_registers+0x6a>
	{
		return 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e000      	b.n	8000ba4 <sx1278_read_all_registers+0x6c>
	}
	return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b006      	add	sp, #24
 8000baa:	bdb0      	pop	{r4, r5, r7, pc}

08000bac <sx1278_write_all_registers>:
//This function takes the input sx1278 struct and programs the chip with the configurations
//Used for initialization purposes.
uint8_t sx1278_write_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 8000bac:	b5b0      	push	{r4, r5, r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000bbc:	2317      	movs	r3, #23
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e013      	b.n	8000bee <sx1278_write_all_registers+0x42>
		{
			spi_single_write(hspi, reg, *(struct_ptr + ((reg-1))));
 8000bc6:	2117      	movs	r1, #23
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	18d3      	adds	r3, r2, r3
 8000bd2:	781a      	ldrb	r2, [r3, #0]
 8000bd4:	000c      	movs	r4, r1
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	7819      	ldrb	r1, [r3, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fee9 	bl	80009b4 <spi_single_write>
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000be2:	0021      	movs	r1, r4
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	3201      	adds	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	2317      	movs	r3, #23
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b70      	cmp	r3, #112	; 0x70
 8000bf6:	d9e6      	bls.n	8000bc6 <sx1278_write_all_registers+0x1a>
		}
	uint8_t temp = spi_single_read(hspi, REG_OPMODE);
 8000bf8:	250f      	movs	r5, #15
 8000bfa:	197c      	adds	r4, r7, r5
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2101      	movs	r1, #1
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff ff09 	bl	8000a18 <spi_single_read>
 8000c06:	0003      	movs	r3, r0
 8000c08:	7023      	strb	r3, [r4, #0]
	if(radio->RegOpMode == temp)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	785b      	ldrb	r3, [r3, #1]
 8000c0e:	197a      	adds	r2, r7, r5
 8000c10:	7812      	ldrb	r2, [r2, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d101      	bne.n	8000c1a <sx1278_write_all_registers+0x6e>
	{
		return 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <sx1278_write_all_registers+0x70>
	}
	return 0;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b006      	add	sp, #24
 8000c22:	bdb0      	pop	{r4, r5, r7, pc}

08000c24 <sx1278_mem_init>:
//Initialize the Radio Object
void sx1278_mem_init(SPI_HandleTypeDef *hspi, radio *radio)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
	// Set for the SX App
	radio->tx_state_flags.tx_init = 0;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2271      	movs	r2, #113	; 0x71
 8000c32:	2100      	movs	r1, #0
 8000c34:	5499      	strb	r1, [r3, r2]
	radio->tx_state_flags.tx_inp= 0;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2272      	movs	r2, #114	; 0x72
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	5499      	strb	r1, [r3, r2]
	radio->rx_flags.rx_init = 0;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	22b4      	movs	r2, #180	; 0xb4
 8000c42:	2100      	movs	r1, #0
 8000c44:	5499      	strb	r1, [r3, r2]
	radio->rx_flags.rx_running = 0;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	22b5      	movs	r2, #181	; 0xb5
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	5499      	strb	r1, [r3, r2]
	radio->rx_flags.rx_stay = 1;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	22b6      	movs	r2, #182	; 0xb6
 8000c52:	2101      	movs	r1, #1
 8000c54:	5499      	strb	r1, [r3, r2]
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <sx1278_init>:
//General Init Function for the Module.
uint8_t sx1278_init(radio *radio, SPI_HandleTypeDef *hspi)
{
 8000c5e:	b5b0      	push	{r4, r5, r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
	uint8_t timeout_counter = 0;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000c70:	230e      	movs	r3, #14
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000c78:	e015      	b.n	8000ca6 <sx1278_init+0x48>
	{
		stat = sx1278_read_all_registers(&(radio->radio), hspi);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	220e      	movs	r2, #14
 8000c7e:	18bc      	adds	r4, r7, r2
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ff57 	bl	8000b38 <sx1278_read_all_registers>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000c8e:	210f      	movs	r1, #15
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	3201      	adds	r2, #1
 8000c98:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b64      	cmp	r3, #100	; 0x64
 8000ca0:	d101      	bne.n	8000ca6 <sx1278_init+0x48>
		{
			return 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e041      	b.n	8000d2a <sx1278_init+0xcc>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000ca6:	230e      	movs	r3, #14
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d104      	bne.n	8000cba <sx1278_init+0x5c>
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b64      	cmp	r3, #100	; 0x64
 8000cb8:	d9df      	bls.n	8000c7a <sx1278_init+0x1c>
		}
	}
	timeout_counter = 0;
 8000cba:	230f      	movs	r3, #15
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
	stat = 0;
 8000cc2:	230e      	movs	r3, #14
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
	sx1278_struct_init(&(radio->radio));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fed2 	bl	8000a76 <sx1278_struct_init>
	radio->sx_state = STANDBY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2270      	movs	r2, #112	; 0x70
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	5499      	strb	r1, [r3, r2]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000cda:	e015      	b.n	8000d08 <sx1278_init+0xaa>
	{
		timeout_counter++;
 8000cdc:	250f      	movs	r5, #15
 8000cde:	197b      	adds	r3, r7, r5
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	197b      	adds	r3, r7, r5
 8000ce4:	3201      	adds	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
		stat = sx1278_write_all_registers(&(radio->radio), hspi);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	220e      	movs	r2, #14
 8000cec:	18bc      	adds	r4, r7, r2
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff ff5a 	bl	8000bac <sx1278_write_all_registers>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	7023      	strb	r3, [r4, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000cfc:	197b      	adds	r3, r7, r5
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b64      	cmp	r3, #100	; 0x64
 8000d02:	d101      	bne.n	8000d08 <sx1278_init+0xaa>
		{
			return 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	e010      	b.n	8000d2a <sx1278_init+0xcc>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000d08:	230e      	movs	r3, #14
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <sx1278_init+0xbe>
 8000d12:	230f      	movs	r3, #15
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b64      	cmp	r3, #100	; 0x64
 8000d1a:	d9df      	bls.n	8000cdc <sx1278_init+0x7e>
		}
	}
	sx1278_mem_init(hspi, radio);
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff ff7e 	bl	8000c24 <sx1278_mem_init>
	return 1;
 8000d28:	2301      	movs	r3, #1
}
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b004      	add	sp, #16
 8000d30:	bdb0      	pop	{r4, r5, r7, pc}

08000d32 <sx1278_fifo_fill>:
//Usually used to fill the fifo for tx
void sx1278_fifo_fill(SPI_HandleTypeDef *hspi, uint8_t* data)
{
 8000d32:	b590      	push	{r4, r7, lr}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
	uint8_t address_packet = WRITE_MASK | REG_FIFO;
 8000d3c:	230e      	movs	r3, #14
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	701a      	strb	r2, [r3, #0]
	uint8_t temporary;
 	for(uint8_t i = 0; i < DATA_SIZE; i++)
 8000d44:	230f      	movs	r3, #15
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e016      	b.n	8000d7c <sx1278_fifo_fill+0x4a>
	{
 		temporary = data[i];
 8000d4e:	240f      	movs	r4, #15
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	18d2      	adds	r2, r2, r3
 8000d58:	210d      	movs	r1, #13
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	701a      	strb	r2, [r3, #0]
 		spi_single_write(hspi, address_packet, temporary);
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	230e      	movs	r3, #14
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	7819      	ldrb	r1, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fe21 	bl	80009b4 <spi_single_write>
 	for(uint8_t i = 0; i < DATA_SIZE; i++)
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	3201      	adds	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b3f      	cmp	r3, #63	; 0x3f
 8000d84:	d9e3      	bls.n	8000d4e <sx1278_fifo_fill+0x1c>
	}
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b005      	add	sp, #20
 8000d8e:	bd90      	pop	{r4, r7, pc}

08000d90 <sx1278_fifo_dump>:
//Used to dump the contents of the FiFo into the RX_BUFFER
void sx1278_fifo_dump(SPI_HandleTypeDef *hspi, radio *radio)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	if(get_irq2_register(hspi) & FIFO_EMPTY)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff fdfb 	bl	8000998 <get_irq2_register>
 8000da2:	0003      	movs	r3, r0
 8000da4:	001a      	movs	r2, r3
 8000da6:	2340      	movs	r3, #64	; 0x40
 8000da8:	4013      	ands	r3, r2
 8000daa:	d123      	bne.n	8000df4 <sx1278_fifo_dump+0x64>
	{
		//if fifo is empty return from function
		return;
	}
	while(!(get_irq2_register(hspi) & FIFO_EMPTY))
 8000dac:	e018      	b.n	8000de0 <sx1278_fifo_dump+0x50>
	{
		radio->rx_buffer[radio->rx_buffer_size] = spi_single_read(hspi, REG_FIFO);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	22f7      	movs	r2, #247	; 0xf7
 8000db2:	5c9b      	ldrb	r3, [r3, r2]
 8000db4:	001c      	movs	r4, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2100      	movs	r1, #0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff fe2c 	bl	8000a18 <spi_single_read>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	22b7      	movs	r2, #183	; 0xb7
 8000dc8:	191b      	adds	r3, r3, r4
 8000dca:	189b      	adds	r3, r3, r2
 8000dcc:	1c0a      	adds	r2, r1, #0
 8000dce:	701a      	strb	r2, [r3, #0]
		radio->rx_buffer_size ++;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	22f7      	movs	r2, #247	; 0xf7
 8000dd4:	5c9b      	ldrb	r3, [r3, r2]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b2d9      	uxtb	r1, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	22f7      	movs	r2, #247	; 0xf7
 8000dde:	5499      	strb	r1, [r3, r2]
	while(!(get_irq2_register(hspi) & FIFO_EMPTY))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	0018      	movs	r0, r3
 8000de4:	f7ff fdd8 	bl	8000998 <get_irq2_register>
 8000de8:	0003      	movs	r3, r0
 8000dea:	001a      	movs	r2, r3
 8000dec:	2340      	movs	r3, #64	; 0x40
 8000dee:	4013      	ands	r3, r2
 8000df0:	d0dd      	beq.n	8000dae <sx1278_fifo_dump+0x1e>
 8000df2:	e000      	b.n	8000df6 <sx1278_fifo_dump+0x66>
		return;
 8000df4:	46c0      	nop			; (mov r8, r8)
	}

}
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b003      	add	sp, #12
 8000dfa:	bd90      	pop	{r4, r7, pc}

08000dfc <change_opmode>:
//Change the Opmode of the device
uint8_t change_opmode(radio *radio, SPI_HandleTypeDef *hspi, radio_state new_mode)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	701a      	strb	r2, [r3, #0]
	uint8_t timeout_counter = 0;
 8000e0a:	2317      	movs	r3, #23
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000e12:	2316      	movs	r3, #22
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000e1a:	e015      	b.n	8000e48 <change_opmode+0x4c>
	{
		stat = sx1278_read_all_registers(&(radio->radio), hspi);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2216      	movs	r2, #22
 8000e20:	18bc      	adds	r4, r7, r2
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff fe86 	bl	8000b38 <sx1278_read_all_registers>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000e30:	2117      	movs	r1, #23
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	3201      	adds	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b64      	cmp	r3, #100	; 0x64
 8000e42:	d101      	bne.n	8000e48 <change_opmode+0x4c>
		{
			return 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e021      	b.n	8000e8c <change_opmode+0x90>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000e48:	2316      	movs	r3, #22
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d104      	bne.n	8000e5c <change_opmode+0x60>
 8000e52:	2317      	movs	r3, #23
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b64      	cmp	r3, #100	; 0x64
 8000e5a:	d9df      	bls.n	8000e1c <change_opmode+0x20>
		}
	}
	uint8_t temp_mode = RF_OPMODE_MODULATIONTYPE_FSK |
 8000e5c:	2015      	movs	r0, #21
 8000e5e:	183b      	adds	r3, r7, r0
 8000e60:	1dfa      	adds	r2, r7, #7
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	2108      	movs	r1, #8
 8000e66:	430a      	orrs	r2, r1
 8000e68:	701a      	strb	r2, [r3, #0]
			RF_OPMODE_FREQMODE_ACCESS_LF |new_mode;
	radio->radio.RegOpMode = temp_mode;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	183a      	adds	r2, r7, r0
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	705a      	strb	r2, [r3, #1]
	radio->sx_state = new_mode;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	1dfa      	adds	r2, r7, #7
 8000e76:	2170      	movs	r1, #112	; 0x70
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	545a      	strb	r2, [r3, r1]
	spi_single_write(hspi, REG_OPMODE, (radio->radio.RegOpMode));
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	785a      	ldrb	r2, [r3, #1]
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2101      	movs	r1, #1
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff fd95 	bl	80009b4 <spi_single_write>
	return 1;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b007      	add	sp, #28
 8000e92:	bd90      	pop	{r4, r7, pc}

08000e94 <SX1278_APP>:
//This Function fills the FIFO with the input data and sets the opmode to transmit.
//It will be up to the app to check when the tx is done.
void SX1278_APP(radio *radio, SPI_HandleTypeDef *hspi)
{
 8000e94:	b5b0      	push	{r4, r5, r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	switch(radio->sx_state)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2270      	movs	r2, #112	; 0x70
 8000ea2:	5c9b      	ldrb	r3, [r3, r2]
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d100      	bne.n	8000eaa <SX1278_APP+0x16>
 8000ea8:	e077      	b.n	8000f9a <SX1278_APP+0x106>
 8000eaa:	dd00      	ble.n	8000eae <SX1278_APP+0x1a>
 8000eac:	e0c3      	b.n	8001036 <SX1278_APP+0x1a2>
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d002      	beq.n	8000eb8 <SX1278_APP+0x24>
 8000eb2:	dd00      	ble.n	8000eb6 <SX1278_APP+0x22>
 8000eb4:	e0bf      	b.n	8001036 <SX1278_APP+0x1a2>
	{
	case SLEEP:
		break;
 8000eb6:	e0be      	b.n	8001036 <SX1278_APP+0x1a2>
	case STANDBY:
		break;
	case TRANSMITTER:
		if(!radio->tx_state_flags.tx_init)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2271      	movs	r2, #113	; 0x71
 8000ebc:	5c9b      	ldrb	r3, [r3, r2]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d11e      	bne.n	8000f00 <SX1278_APP+0x6c>
		{
			//Initialize Tx Here. Prefill FiFo.
			uint8_t temp;
			sx1278_fifo_fill(hspi, radio->tx_buffer);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3374      	adds	r3, #116	; 0x74
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	0011      	movs	r1, r2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff ff30 	bl	8000d32 <sx1278_fifo_fill>
			radio->tx_state_flags.tx_packet_sent = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2273      	movs	r2, #115	; 0x73
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	5499      	strb	r1, [r3, r2]
			temp = get_irq2_register(hspi);
 8000eda:	250f      	movs	r5, #15
 8000edc:	197c      	adds	r4, r7, r5
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fd59 	bl	8000998 <get_irq2_register>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	7023      	strb	r3, [r4, #0]
			if((temp & FIFO_LEVEL) == FIFO_LEVEL)
 8000eea:	197b      	adds	r3, r7, r5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2220      	movs	r2, #32
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <SX1278_APP+0x62>
 8000ef4:	e09c      	b.n	8001030 <SX1278_APP+0x19c>
			{
				//Fifo is Prefilled ready to transmit package.
				radio->tx_state_flags.tx_init = 1;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2271      	movs	r2, #113	; 0x71
 8000efa:	2101      	movs	r1, #1
 8000efc:	5499      	strb	r1, [r3, r2]
			//Successfully sent from transmitter. Take out of transmit mode.
			change_opmode(radio, hspi, STANDBY);
			radio->tx_state_flags.tx_init = 0;
			radio->tx_state_flags.tx_inp = 0;
		}
		break;
 8000efe:	e097      	b.n	8001030 <SX1278_APP+0x19c>
		else if(radio->tx_state_flags.tx_init && !radio->tx_state_flags.tx_inp && !radio->tx_state_flags.tx_packet_sent)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2271      	movs	r2, #113	; 0x71
 8000f04:	5c9b      	ldrb	r3, [r3, r2]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d014      	beq.n	8000f34 <SX1278_APP+0xa0>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2272      	movs	r2, #114	; 0x72
 8000f0e:	5c9b      	ldrb	r3, [r3, r2]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <SX1278_APP+0xa0>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2273      	movs	r2, #115	; 0x73
 8000f18:	5c9b      	ldrb	r3, [r3, r2]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10a      	bne.n	8000f34 <SX1278_APP+0xa0>
			change_opmode(radio, hspi, TRANSMITTER);
 8000f1e:	6839      	ldr	r1, [r7, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2203      	movs	r2, #3
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff ff69 	bl	8000dfc <change_opmode>
			radio->tx_state_flags.tx_inp = 1;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2272      	movs	r2, #114	; 0x72
 8000f2e:	2101      	movs	r1, #1
 8000f30:	5499      	strb	r1, [r3, r2]
 8000f32:	e031      	b.n	8000f98 <SX1278_APP+0x104>
		else if(radio->tx_state_flags.tx_init && radio->tx_state_flags.tx_inp && !radio->tx_state_flags.tx_packet_sent)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2271      	movs	r2, #113	; 0x71
 8000f38:	5c9b      	ldrb	r3, [r3, r2]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d018      	beq.n	8000f70 <SX1278_APP+0xdc>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2272      	movs	r2, #114	; 0x72
 8000f42:	5c9b      	ldrb	r3, [r3, r2]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d013      	beq.n	8000f70 <SX1278_APP+0xdc>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2273      	movs	r2, #115	; 0x73
 8000f4c:	5c9b      	ldrb	r3, [r3, r2]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10e      	bne.n	8000f70 <SX1278_APP+0xdc>
			if((get_irq2_register(hspi) & PACKET_SENT) == PACKET_SENT)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fd1f 	bl	8000998 <get_irq2_register>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2308      	movs	r3, #8
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d118      	bne.n	8000f98 <SX1278_APP+0x104>
				radio->tx_state_flags.tx_packet_sent = 1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2273      	movs	r2, #115	; 0x73
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	5499      	strb	r1, [r3, r2]
			if((get_irq2_register(hspi) & PACKET_SENT) == PACKET_SENT)
 8000f6e:	e013      	b.n	8000f98 <SX1278_APP+0x104>
		else if(radio->tx_state_flags.tx_packet_sent)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2273      	movs	r2, #115	; 0x73
 8000f74:	5c9b      	ldrb	r3, [r3, r2]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d05a      	beq.n	8001030 <SX1278_APP+0x19c>
			change_opmode(radio, hspi, STANDBY);
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff3b 	bl	8000dfc <change_opmode>
			radio->tx_state_flags.tx_init = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2271      	movs	r2, #113	; 0x71
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	5499      	strb	r1, [r3, r2]
			radio->tx_state_flags.tx_inp = 0;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2272      	movs	r2, #114	; 0x72
 8000f92:	2100      	movs	r1, #0
 8000f94:	5499      	strb	r1, [r3, r2]
		break;
 8000f96:	e04b      	b.n	8001030 <SX1278_APP+0x19c>
 8000f98:	e04a      	b.n	8001030 <SX1278_APP+0x19c>
	case RECEIVER:
		if(radio->rx_flags.rx_init == 0)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	22b4      	movs	r2, #180	; 0xb4
 8000f9e:	5c9b      	ldrb	r3, [r3, r2]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d10a      	bne.n	8000fba <SX1278_APP+0x126>
		{
			//Get Radio Ready for Rx
			//FIFO must be clear here. Put logic in later.
			//When reading from fifo make sure it is not empty each time.
			radio->rx_flags.rx_init = 1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	22b4      	movs	r2, #180	; 0xb4
 8000fa8:	2101      	movs	r1, #1
 8000faa:	5499      	strb	r1, [r3, r2]
			change_opmode(radio, hspi, RECEIVER);
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f7ff ff22 	bl	8000dfc <change_opmode>
					//if not stay go standby
					change_opmode(radio, hspi, STANDBY);
				}
			}
		}
		break;
 8000fb8:	e03c      	b.n	8001034 <SX1278_APP+0x1a0>
		else if(radio->rx_flags.rx_init && !(radio->rx_flags.rx_running))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	22b4      	movs	r2, #180	; 0xb4
 8000fbe:	5c9b      	ldrb	r3, [r3, r2]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <SX1278_APP+0x158>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	22b5      	movs	r2, #181	; 0xb5
 8000fc8:	5c9b      	ldrb	r3, [r3, r2]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10e      	bne.n	8000fec <SX1278_APP+0x158>
			if((get_irq1_register(hspi) & RX_READY) == RX_READY)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff fcd3 	bl	800097c <get_irq1_register>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	001a      	movs	r2, r3
 8000fda:	2340      	movs	r3, #64	; 0x40
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b40      	cmp	r3, #64	; 0x40
 8000fe0:	d125      	bne.n	800102e <SX1278_APP+0x19a>
				radio->rx_flags.rx_running = 1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	22b5      	movs	r2, #181	; 0xb5
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	5499      	strb	r1, [r3, r2]
			if((get_irq1_register(hspi) & RX_READY) == RX_READY)
 8000fea:	e020      	b.n	800102e <SX1278_APP+0x19a>
		else if(radio->rx_flags.rx_running)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	22b5      	movs	r2, #181	; 0xb5
 8000ff0:	5c9b      	ldrb	r3, [r3, r2]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d01e      	beq.n	8001034 <SX1278_APP+0x1a0>
			if((get_irq2_register(hspi) & PAYLOAD_READY) == PAYLOAD_READY)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff fccd 	bl	8000998 <get_irq2_register>
 8000ffe:	0003      	movs	r3, r0
 8001000:	001a      	movs	r2, r3
 8001002:	2304      	movs	r3, #4
 8001004:	4013      	ands	r3, r2
 8001006:	2b04      	cmp	r3, #4
 8001008:	d114      	bne.n	8001034 <SX1278_APP+0x1a0>
				sx1278_fifo_dump(hspi, radio);
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff febd 	bl	8000d90 <sx1278_fifo_dump>
				if(!radio->rx_flags.rx_stay)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	22b6      	movs	r2, #182	; 0xb6
 800101a:	5c9b      	ldrb	r3, [r3, r2]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <SX1278_APP+0x1a0>
					change_opmode(radio, hspi, STANDBY);
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff fee8 	bl	8000dfc <change_opmode>
		break;
 800102c:	e002      	b.n	8001034 <SX1278_APP+0x1a0>
 800102e:	e001      	b.n	8001034 <SX1278_APP+0x1a0>
		break;
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	e000      	b.n	8001036 <SX1278_APP+0x1a2>
		break;
 8001034:	46c0      	nop			; (mov r8, r8)
	}
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bdb0      	pop	{r4, r5, r7, pc}

0800103e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800104c:	f7ff fff7 	bl	800103e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopForever+0x6>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	; (800108c <LoopForever+0xe>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	; (8001094 <LoopForever+0x16>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001076:	f003 fb9f 	bl	80047b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107a:	f7ff f917 	bl	80002ac <main>

0800107e <LoopForever>:

LoopForever:
    b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   r0, =_estack
 8001080:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800108c:	0800486c 	.word	0x0800486c
  ldr r2, =_sbss
 8001090:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001094:	200002d0 	.word	0x200002d0

08001098 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_IRQHandler>
	...

0800109c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_Init+0x24>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_Init+0x24>)
 80010a6:	2110      	movs	r1, #16
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f809 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b2:	f7ff fb19 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40022000 	.word	0x40022000

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_InitTick+0x5c>)
 80010ce:	681c      	ldr	r4, [r3, #0]
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_InitTick+0x60>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	0019      	movs	r1, r3
 80010d6:	23fa      	movs	r3, #250	; 0xfa
 80010d8:	0098      	lsls	r0, r3, #2
 80010da:	f7ff f815 	bl	8000108 <__udivsi3>
 80010de:	0003      	movs	r3, r0
 80010e0:	0019      	movs	r1, r3
 80010e2:	0020      	movs	r0, r4
 80010e4:	f7ff f810 	bl	8000108 <__udivsi3>
 80010e8:	0003      	movs	r3, r0
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 f90b 	bl	8001306 <HAL_SYSTICK_Config>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e00f      	b.n	8001118 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d80b      	bhi.n	8001116 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	2301      	movs	r3, #1
 8001102:	425b      	negs	r3, r3
 8001104:	2200      	movs	r2, #0
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f8d8 	bl	80012bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_InitTick+0x64>)
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e000      	b.n	8001118 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b003      	add	sp, #12
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	20000058 	.word	0x20000058
 8001124:	20000060 	.word	0x20000060
 8001128:	2000005c 	.word	0x2000005c

0800112c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_IncTick+0x1c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	001a      	movs	r2, r3
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_IncTick+0x20>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	18d2      	adds	r2, r2, r3
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_IncTick+0x20>)
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	20000060 	.word	0x20000060
 800114c:	200002cc 	.word	0x200002cc

08001150 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b02      	ldr	r3, [pc, #8]	; (8001160 <HAL_GetTick+0x10>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	200002cc 	.word	0x200002cc

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	0002      	movs	r2, r0
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001170:	1dfb      	adds	r3, r7, #7
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b7f      	cmp	r3, #127	; 0x7f
 8001176:	d809      	bhi.n	800118c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	001a      	movs	r2, r3
 800117e:	231f      	movs	r3, #31
 8001180:	401a      	ands	r2, r3
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_EnableIRQ+0x30>)
 8001184:	2101      	movs	r1, #1
 8001186:	4091      	lsls	r1, r2
 8001188:	000a      	movs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
  }
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	0002      	movs	r2, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	d828      	bhi.n	8001200 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ae:	4a2f      	ldr	r2, [pc, #188]	; (800126c <__NVIC_SetPriority+0xd4>)
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	33c0      	adds	r3, #192	; 0xc0
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	589b      	ldr	r3, [r3, r2]
 80011be:	1dfa      	adds	r2, r7, #7
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	0011      	movs	r1, r2
 80011c4:	2203      	movs	r2, #3
 80011c6:	400a      	ands	r2, r1
 80011c8:	00d2      	lsls	r2, r2, #3
 80011ca:	21ff      	movs	r1, #255	; 0xff
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	43d2      	mvns	r2, r2
 80011d2:	401a      	ands	r2, r3
 80011d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	019b      	lsls	r3, r3, #6
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	401a      	ands	r2, r3
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	0018      	movs	r0, r3
 80011e4:	2303      	movs	r3, #3
 80011e6:	4003      	ands	r3, r0
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ec:	481f      	ldr	r0, [pc, #124]	; (800126c <__NVIC_SetPriority+0xd4>)
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	430a      	orrs	r2, r1
 80011f8:	33c0      	adds	r3, #192	; 0xc0
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011fe:	e031      	b.n	8001264 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <__NVIC_SetPriority+0xd8>)
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	0019      	movs	r1, r3
 8001208:	230f      	movs	r3, #15
 800120a:	400b      	ands	r3, r1
 800120c:	3b08      	subs	r3, #8
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3306      	adds	r3, #6
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	18d3      	adds	r3, r2, r3
 8001216:	3304      	adds	r3, #4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1dfa      	adds	r2, r7, #7
 800121c:	7812      	ldrb	r2, [r2, #0]
 800121e:	0011      	movs	r1, r2
 8001220:	2203      	movs	r2, #3
 8001222:	400a      	ands	r2, r1
 8001224:	00d2      	lsls	r2, r2, #3
 8001226:	21ff      	movs	r1, #255	; 0xff
 8001228:	4091      	lsls	r1, r2
 800122a:	000a      	movs	r2, r1
 800122c:	43d2      	mvns	r2, r2
 800122e:	401a      	ands	r2, r3
 8001230:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	019b      	lsls	r3, r3, #6
 8001236:	22ff      	movs	r2, #255	; 0xff
 8001238:	401a      	ands	r2, r3
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	0018      	movs	r0, r3
 8001240:	2303      	movs	r3, #3
 8001242:	4003      	ands	r3, r0
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <__NVIC_SetPriority+0xd8>)
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	001c      	movs	r4, r3
 8001250:	230f      	movs	r3, #15
 8001252:	4023      	ands	r3, r4
 8001254:	3b08      	subs	r3, #8
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	430a      	orrs	r2, r1
 800125a:	3306      	adds	r3, #6
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	18c3      	adds	r3, r0, r3
 8001260:	3304      	adds	r3, #4
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b003      	add	sp, #12
 800126a:	bd90      	pop	{r4, r7, pc}
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	1e5a      	subs	r2, r3, #1
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	045b      	lsls	r3, r3, #17
 8001284:	429a      	cmp	r2, r3
 8001286:	d301      	bcc.n	800128c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001288:	2301      	movs	r3, #1
 800128a:	e010      	b.n	80012ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <SysTick_Config+0x44>)
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	3a01      	subs	r2, #1
 8001292:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001294:	2301      	movs	r3, #1
 8001296:	425b      	negs	r3, r3
 8001298:	2103      	movs	r1, #3
 800129a:	0018      	movs	r0, r3
 800129c:	f7ff ff7c 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SysTick_Config+0x44>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SysTick_Config+0x44>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	210f      	movs	r1, #15
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	1c02      	adds	r2, r0, #0
 80012cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	0011      	movs	r1, r2
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b004      	add	sp, #16
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	0002      	movs	r2, r0
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff ff33 	bl	8001164 <__NVIC_EnableIRQ>
}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b002      	add	sp, #8
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ffaf 	bl	8001274 <SysTick_Config>
 8001316:	0003      	movs	r3, r0
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001328:	210f      	movs	r1, #15
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2221      	movs	r2, #33	; 0x21
 8001334:	5c9b      	ldrb	r3, [r3, r2]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d006      	beq.n	800134a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2204      	movs	r2, #4
 8001340:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e028      	b.n	800139c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	210e      	movs	r1, #14
 8001356:	438a      	bics	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	438a      	bics	r2, r1
 8001368:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001372:	2101      	movs	r1, #1
 8001374:	4091      	lsls	r1, r2
 8001376:	000a      	movs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2221      	movs	r2, #33	; 0x21
 800137e:	2101      	movs	r1, #1
 8001380:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	0010      	movs	r0, r2
 800139a:	4798      	blx	r3
    }
  }
  return status;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	781b      	ldrb	r3, [r3, #0]
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b004      	add	sp, #16
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ba:	e149      	b.n	8001650 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d100      	bne.n	80013d4 <HAL_GPIO_Init+0x28>
 80013d2:	e13a      	b.n	800164a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2203      	movs	r2, #3
 80013da:	4013      	ands	r3, r2
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d005      	beq.n	80013ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d130      	bne.n	800144e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	409a      	lsls	r2, r3
 80013fa:	0013      	movs	r3, r2
 80013fc:	43da      	mvns	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	409a      	lsls	r2, r3
 800140e:	0013      	movs	r3, r2
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001422:	2201      	movs	r2, #1
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	43da      	mvns	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	2201      	movs	r2, #1
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
 8001440:	0013      	movs	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	4013      	ands	r3, r2
 8001456:	2b03      	cmp	r3, #3
 8001458:	d017      	beq.n	800148a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	43da      	mvns	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2203      	movs	r2, #3
 8001490:	4013      	ands	r3, r2
 8001492:	2b02      	cmp	r3, #2
 8001494:	d123      	bne.n	80014de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	58d3      	ldr	r3, [r2, r3]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2207      	movs	r2, #7
 80014a8:	4013      	ands	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2107      	movs	r1, #7
 80014c2:	400b      	ands	r3, r1
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	6939      	ldr	r1, [r7, #16]
 80014dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2203      	movs	r2, #3
 80014fc:	401a      	ands	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	23c0      	movs	r3, #192	; 0xc0
 8001518:	029b      	lsls	r3, r3, #10
 800151a:	4013      	ands	r3, r2
 800151c:	d100      	bne.n	8001520 <HAL_GPIO_Init+0x174>
 800151e:	e094      	b.n	800164a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001520:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_GPIO_Init+0x2bc>)
 8001522:	699a      	ldr	r2, [r3, #24]
 8001524:	4b50      	ldr	r3, [pc, #320]	; (8001668 <HAL_GPIO_Init+0x2bc>)
 8001526:	2101      	movs	r1, #1
 8001528:	430a      	orrs	r2, r1
 800152a:	619a      	str	r2, [r3, #24]
 800152c:	4b4e      	ldr	r3, [pc, #312]	; (8001668 <HAL_GPIO_Init+0x2bc>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2201      	movs	r2, #1
 8001532:	4013      	ands	r3, r2
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001538:	4a4c      	ldr	r2, [pc, #304]	; (800166c <HAL_GPIO_Init+0x2c0>)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	589b      	ldr	r3, [r3, r2]
 8001544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2203      	movs	r2, #3
 800154a:	4013      	ands	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	220f      	movs	r2, #15
 8001550:	409a      	lsls	r2, r3
 8001552:	0013      	movs	r3, r2
 8001554:	43da      	mvns	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	2390      	movs	r3, #144	; 0x90
 8001560:	05db      	lsls	r3, r3, #23
 8001562:	429a      	cmp	r2, r3
 8001564:	d00d      	beq.n	8001582 <HAL_GPIO_Init+0x1d6>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a41      	ldr	r2, [pc, #260]	; (8001670 <HAL_GPIO_Init+0x2c4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <HAL_GPIO_Init+0x1d2>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a40      	ldr	r2, [pc, #256]	; (8001674 <HAL_GPIO_Init+0x2c8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_GPIO_Init+0x1ce>
 8001576:	2302      	movs	r3, #2
 8001578:	e004      	b.n	8001584 <HAL_GPIO_Init+0x1d8>
 800157a:	2305      	movs	r3, #5
 800157c:	e002      	b.n	8001584 <HAL_GPIO_Init+0x1d8>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x1d8>
 8001582:	2300      	movs	r3, #0
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	2103      	movs	r1, #3
 8001588:	400a      	ands	r2, r1
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	4093      	lsls	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001594:	4935      	ldr	r1, [pc, #212]	; (800166c <HAL_GPIO_Init+0x2c0>)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a2:	4b35      	ldr	r3, [pc, #212]	; (8001678 <HAL_GPIO_Init+0x2cc>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	035b      	lsls	r3, r3, #13
 80015ba:	4013      	ands	r3, r2
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_GPIO_Init+0x2cc>)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_GPIO_Init+0x2cc>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43da      	mvns	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	039b      	lsls	r3, r3, #14
 80015e4:	4013      	ands	r3, r2
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <HAL_GPIO_Init+0x2cc>)
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_GPIO_Init+0x2cc>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43da      	mvns	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	029b      	lsls	r3, r3, #10
 800160e:	4013      	ands	r3, r2
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_GPIO_Init+0x2cc>)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_GPIO_Init+0x2cc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43da      	mvns	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	4013      	ands	r3, r2
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_GPIO_Init+0x2cc>)
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	40da      	lsrs	r2, r3
 8001658:	1e13      	subs	r3, r2, #0
 800165a:	d000      	beq.n	800165e <HAL_GPIO_Init+0x2b2>
 800165c:	e6ae      	b.n	80013bc <HAL_GPIO_Init+0x10>
  } 
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b006      	add	sp, #24
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	48000400 	.word	0x48000400
 8001674:	48000800 	.word	0x48000800
 8001678:	40010400 	.word	0x40010400

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	0008      	movs	r0, r1
 8001686:	0011      	movs	r1, r2
 8001688:	1cbb      	adds	r3, r7, #2
 800168a:	1c02      	adds	r2, r0, #0
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	1c7b      	adds	r3, r7, #1
 8001690:	1c0a      	adds	r2, r1, #0
 8001692:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001694:	1c7b      	adds	r3, r7, #1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169c:	1cbb      	adds	r3, r7, #2
 800169e:	881a      	ldrh	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e003      	b.n	80016ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	1cbb      	adds	r3, r7, #2
 80016a8:	881a      	ldrh	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b002      	add	sp, #8
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e301      	b.n	8001cce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d100      	bne.n	80016d6 <HAL_RCC_OscConfig+0x1e>
 80016d4:	e08d      	b.n	80017f2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016d6:	4bc3      	ldr	r3, [pc, #780]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	220c      	movs	r2, #12
 80016dc:	4013      	ands	r3, r2
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d00e      	beq.n	8001700 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e2:	4bc0      	ldr	r3, [pc, #768]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	220c      	movs	r2, #12
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d116      	bne.n	800171c <HAL_RCC_OscConfig+0x64>
 80016ee:	4bbd      	ldr	r3, [pc, #756]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	401a      	ands	r2, r3
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d10d      	bne.n	800171c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4bb8      	ldr	r3, [pc, #736]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d100      	bne.n	800170e <HAL_RCC_OscConfig+0x56>
 800170c:	e070      	b.n	80017f0 <HAL_RCC_OscConfig+0x138>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d000      	beq.n	8001718 <HAL_RCC_OscConfig+0x60>
 8001716:	e06b      	b.n	80017f0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e2d8      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x7c>
 8001724:	4baf      	ldr	r3, [pc, #700]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4bae      	ldr	r3, [pc, #696]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	0249      	lsls	r1, r1, #9
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e02f      	b.n	8001794 <HAL_RCC_OscConfig+0xdc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x9e>
 800173c:	4ba9      	ldr	r3, [pc, #676]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4ba8      	ldr	r3, [pc, #672]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001742:	49a9      	ldr	r1, [pc, #676]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001744:	400a      	ands	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4ba6      	ldr	r3, [pc, #664]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4ba5      	ldr	r3, [pc, #660]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800174e:	49a7      	ldr	r1, [pc, #668]	; (80019ec <HAL_RCC_OscConfig+0x334>)
 8001750:	400a      	ands	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e01e      	b.n	8001794 <HAL_RCC_OscConfig+0xdc>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d10e      	bne.n	800177c <HAL_RCC_OscConfig+0xc4>
 800175e:	4ba1      	ldr	r3, [pc, #644]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4ba0      	ldr	r3, [pc, #640]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	02c9      	lsls	r1, r1, #11
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	4b9d      	ldr	r3, [pc, #628]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b9c      	ldr	r3, [pc, #624]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	0249      	lsls	r1, r1, #9
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xdc>
 800177c:	4b99      	ldr	r3, [pc, #612]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b98      	ldr	r3, [pc, #608]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001782:	4999      	ldr	r1, [pc, #612]	; (80019e8 <HAL_RCC_OscConfig+0x330>)
 8001784:	400a      	ands	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	4b96      	ldr	r3, [pc, #600]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b95      	ldr	r3, [pc, #596]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800178e:	4997      	ldr	r1, [pc, #604]	; (80019ec <HAL_RCC_OscConfig+0x334>)
 8001790:	400a      	ands	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d014      	beq.n	80017c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fcd8 	bl	8001150 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a6:	f7ff fcd3 	bl	8001150 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e28a      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b8:	4b8a      	ldr	r3, [pc, #552]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	029b      	lsls	r3, r3, #10
 80017c0:	4013      	ands	r3, r2
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0xee>
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fcc3 	bl	8001150 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fcbe 	bl	8001150 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e275      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	4b80      	ldr	r3, [pc, #512]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	029b      	lsls	r3, r3, #10
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x118>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d100      	bne.n	80017fe <HAL_RCC_OscConfig+0x146>
 80017fc:	e069      	b.n	80018d2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017fe:	4b79      	ldr	r3, [pc, #484]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	220c      	movs	r2, #12
 8001804:	4013      	ands	r3, r2
 8001806:	d00b      	beq.n	8001820 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001808:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	220c      	movs	r2, #12
 800180e:	4013      	ands	r3, r2
 8001810:	2b08      	cmp	r3, #8
 8001812:	d11c      	bne.n	800184e <HAL_RCC_OscConfig+0x196>
 8001814:	4b73      	ldr	r3, [pc, #460]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	025b      	lsls	r3, r3, #9
 800181c:	4013      	ands	r3, r2
 800181e:	d116      	bne.n	800184e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001820:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x17e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e24b      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	4b6b      	ldr	r3, [pc, #428]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	22f8      	movs	r2, #248	; 0xf8
 800183c:	4393      	bics	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	00da      	lsls	r2, r3, #3
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184c:	e041      	b.n	80018d2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d024      	beq.n	80018a0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b62      	ldr	r3, [pc, #392]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fc75 	bl	8001150 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186c:	f7ff fc70 	bl	8001150 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e227      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d0f1      	beq.n	800186c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	22f8      	movs	r2, #248	; 0xf8
 800188e:	4393      	bics	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00da      	lsls	r2, r3, #3
 8001898:	4b52      	ldr	r3, [pc, #328]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e018      	b.n	80018d2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b4f      	ldr	r3, [pc, #316]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	438a      	bics	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fc50 	bl	8001150 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff fc4b 	bl	8001150 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e202      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c8:	4b46      	ldr	r3, [pc, #280]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2202      	movs	r2, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d1f1      	bne.n	80018b6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2208      	movs	r2, #8
 80018d8:	4013      	ands	r3, r2
 80018da:	d036      	beq.n	800194a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d019      	beq.n	8001918 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e4:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e8:	4b3e      	ldr	r3, [pc, #248]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fc2e 	bl	8001150 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fc29 	bl	8001150 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1e0      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190c:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	2202      	movs	r2, #2
 8001912:	4013      	ands	r3, r2
 8001914:	d0f1      	beq.n	80018fa <HAL_RCC_OscConfig+0x242>
 8001916:	e018      	b.n	800194a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800191a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800191c:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff fc14 	bl	8001150 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff fc0f 	bl	8001150 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1c6      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d1f1      	bne.n	800192e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2204      	movs	r2, #4
 8001950:	4013      	ands	r3, r2
 8001952:	d100      	bne.n	8001956 <HAL_RCC_OscConfig+0x29e>
 8001954:	e0b4      	b.n	8001ac0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001956:	201f      	movs	r0, #31
 8001958:	183b      	adds	r3, r7, r0
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195e:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	055b      	lsls	r3, r3, #21
 8001966:	4013      	ands	r3, r2
 8001968:	d110      	bne.n	800198c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0549      	lsls	r1, r1, #21
 8001974:	430a      	orrs	r2, r1
 8001976:	61da      	str	r2, [r3, #28]
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 800197a:	69da      	ldr	r2, [r3, #28]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	055b      	lsls	r3, r3, #21
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001986:	183b      	adds	r3, r7, r0
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_RCC_OscConfig+0x338>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d11a      	bne.n	80019ce <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_OscConfig+0x338>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_RCC_OscConfig+0x338>)
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	0049      	lsls	r1, r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fbd3 	bl	8001150 <HAL_GetTick>
 80019aa:	0003      	movs	r3, r0
 80019ac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b0:	f7ff fbce 	bl	8001150 <HAL_GetTick>
 80019b4:	0002      	movs	r2, r0
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e185      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_OscConfig+0x338>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d10e      	bne.n	80019f4 <HAL_RCC_OscConfig+0x33c>
 80019d6:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <HAL_RCC_OscConfig+0x32c>)
 80019dc:	2101      	movs	r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	e035      	b.n	8001a50 <HAL_RCC_OscConfig+0x398>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	fffeffff 	.word	0xfffeffff
 80019ec:	fffbffff 	.word	0xfffbffff
 80019f0:	40007000 	.word	0x40007000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x35e>
 80019fc:	4bb6      	ldr	r3, [pc, #728]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	4bb5      	ldr	r3, [pc, #724]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	438a      	bics	r2, r1
 8001a06:	621a      	str	r2, [r3, #32]
 8001a08:	4bb3      	ldr	r3, [pc, #716]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a0a:	6a1a      	ldr	r2, [r3, #32]
 8001a0c:	4bb2      	ldr	r3, [pc, #712]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a0e:	2104      	movs	r1, #4
 8001a10:	438a      	bics	r2, r1
 8001a12:	621a      	str	r2, [r3, #32]
 8001a14:	e01c      	b.n	8001a50 <HAL_RCC_OscConfig+0x398>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x380>
 8001a1e:	4bae      	ldr	r3, [pc, #696]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a20:	6a1a      	ldr	r2, [r3, #32]
 8001a22:	4bad      	ldr	r3, [pc, #692]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a24:	2104      	movs	r1, #4
 8001a26:	430a      	orrs	r2, r1
 8001a28:	621a      	str	r2, [r3, #32]
 8001a2a:	4bab      	ldr	r3, [pc, #684]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	4baa      	ldr	r3, [pc, #680]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	430a      	orrs	r2, r1
 8001a34:	621a      	str	r2, [r3, #32]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0x398>
 8001a38:	4ba7      	ldr	r3, [pc, #668]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	4ba6      	ldr	r3, [pc, #664]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a3e:	2101      	movs	r1, #1
 8001a40:	438a      	bics	r2, r1
 8001a42:	621a      	str	r2, [r3, #32]
 8001a44:	4ba4      	ldr	r3, [pc, #656]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a46:	6a1a      	ldr	r2, [r3, #32]
 8001a48:	4ba3      	ldr	r3, [pc, #652]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d014      	beq.n	8001a82 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fb7a 	bl	8001150 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e009      	b.n	8001a76 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fb75 	bl	8001150 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	4a9b      	ldr	r2, [pc, #620]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e12b      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	4b98      	ldr	r3, [pc, #608]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x3aa>
 8001a80:	e013      	b.n	8001aaa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a82:	f7ff fb65 	bl	8001150 <HAL_GetTick>
 8001a86:	0003      	movs	r3, r0
 8001a88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8a:	e009      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fb60 	bl	8001150 <HAL_GetTick>
 8001a90:	0002      	movs	r2, r0
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	4a91      	ldr	r2, [pc, #580]	; (8001cdc <HAL_RCC_OscConfig+0x624>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e116      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	4b8d      	ldr	r3, [pc, #564]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aaa:	231f      	movs	r3, #31
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab4:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	4b87      	ldr	r3, [pc, #540]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001aba:	4989      	ldr	r1, [pc, #548]	; (8001ce0 <HAL_RCC_OscConfig+0x628>)
 8001abc:	400a      	ands	r2, r1
 8001abe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2210      	movs	r2, #16
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d063      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d12a      	bne.n	8001b28 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ad2:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad6:	4b80      	ldr	r3, [pc, #512]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001ad8:	2104      	movs	r1, #4
 8001ada:	430a      	orrs	r2, r1
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ade:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb31 	bl	8001150 <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001af4:	f7ff fb2c 	bl	8001150 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e0e3      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b06:	4b74      	ldr	r3, [pc, #464]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d0f1      	beq.n	8001af4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b10:	4b71      	ldr	r3, [pc, #452]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b14:	22f8      	movs	r2, #248	; 0xf8
 8001b16:	4393      	bics	r3, r2
 8001b18:	0019      	movs	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	00da      	lsls	r2, r3, #3
 8001b20:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b22:	430a      	orrs	r2, r1
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
 8001b26:	e034      	b.n	8001b92 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	3305      	adds	r3, #5
 8001b2e:	d111      	bne.n	8001b54 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b30:	4b69      	ldr	r3, [pc, #420]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b34:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b36:	2104      	movs	r1, #4
 8001b38:	438a      	bics	r2, r1
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b3c:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	22f8      	movs	r2, #248	; 0xf8
 8001b42:	4393      	bics	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	00da      	lsls	r2, r3, #3
 8001b4c:	4b62      	ldr	r3, [pc, #392]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34
 8001b52:	e01e      	b.n	8001b92 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b54:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b58:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b60:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b64:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b66:	2101      	movs	r1, #1
 8001b68:	438a      	bics	r2, r1
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff faf0 	bl	8001150 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b76:	f7ff faeb 	bl	8001150 <HAL_GetTick>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0a2      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d1f1      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d100      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4e4>
 8001b9a:	e097      	b.n	8001ccc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9c:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d100      	bne.n	8001baa <HAL_RCC_OscConfig+0x4f2>
 8001ba8:	e06b      	b.n	8001c82 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d14c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001bb8:	494a      	ldr	r1, [pc, #296]	; (8001ce4 <HAL_RCC_OscConfig+0x62c>)
 8001bba:	400a      	ands	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fac7 	bl	8001150 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff fac2 	bl	8001150 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e079      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	049b      	lsls	r3, r3, #18
 8001be2:	4013      	ands	r3, r2
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be6:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	220f      	movs	r2, #15
 8001bec:	4393      	bics	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ce8 <HAL_RCC_OscConfig+0x630>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	0449      	lsls	r1, r1, #17
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fa95 	bl	8001150 <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff fa90 	bl	8001150 <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e047      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	049b      	lsls	r3, r3, #18
 8001c46:	4013      	ands	r3, r2
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0x574>
 8001c4a:	e03f      	b.n	8001ccc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c52:	4924      	ldr	r1, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x62c>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fa7a 	bl	8001150 <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fa75 	bl	8001150 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e02c      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	049b      	lsls	r3, r3, #18
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x5aa>
 8001c80:	e024      	b.n	8001ccc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e01f      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_RCC_OscConfig+0x620>)
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	025b      	lsls	r3, r3, #9
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	220f      	movs	r2, #15
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	23f0      	movs	r3, #240	; 0xf0
 8001cbc:	039b      	lsls	r3, r3, #14
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b008      	add	sp, #32
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	efffffff 	.word	0xefffffff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	ffc2ffff 	.word	0xffc2ffff

08001cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b3      	b.n	8001e68 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d00:	4b5b      	ldr	r3, [pc, #364]	; (8001e70 <HAL_RCC_ClockConfig+0x184>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d911      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b58      	ldr	r3, [pc, #352]	; (8001e70 <HAL_RCC_ClockConfig+0x184>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2201      	movs	r2, #1
 8001d14:	4393      	bics	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <HAL_RCC_ClockConfig+0x184>)
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d20:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_ClockConfig+0x184>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	4013      	ands	r3, r2
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e09a      	b.n	8001e68 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d015      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2204      	movs	r2, #4
 8001d42:	4013      	ands	r3, r2
 8001d44:	d006      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d46:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001d4c:	21e0      	movs	r1, #224	; 0xe0
 8001d4e:	00c9      	lsls	r1, r1, #3
 8001d50:	430a      	orrs	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	22f0      	movs	r2, #240	; 0xf0
 8001d5a:	4393      	bics	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	4b44      	ldr	r3, [pc, #272]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001d64:	430a      	orrs	r2, r1
 8001d66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d040      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	029b      	lsls	r3, r3, #10
 8001d82:	4013      	ands	r3, r2
 8001d84:	d114      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e06e      	b.n	8001e68 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d92:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	049b      	lsls	r3, r3, #18
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d108      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e062      	b.n	8001e68 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da2:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e05b      	b.n	8001e68 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db0:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	4393      	bics	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc4:	f7ff f9c4 	bl	8001150 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dce:	f7ff f9bf 	bl	8001150 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <HAL_RCC_ClockConfig+0x18c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e042      	b.n	8001e68 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	220c      	movs	r2, #12
 8001de8:	401a      	ands	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d1ec      	bne.n	8001dce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_RCC_ClockConfig+0x184>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d211      	bcs.n	8001e26 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_ClockConfig+0x184>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4393      	bics	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_RCC_ClockConfig+0x184>)
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <HAL_RCC_ClockConfig+0x184>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e020      	b.n	8001e68 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d009      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_RCC_ClockConfig+0x190>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e44:	f000 f820 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001e48:	0001      	movs	r1, r0
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_RCC_ClockConfig+0x188>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	220f      	movs	r2, #15
 8001e52:	4013      	ands	r3, r2
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_RCC_ClockConfig+0x194>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	000a      	movs	r2, r1
 8001e5a:	40da      	lsrs	r2, r3
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_ClockConfig+0x198>)
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f7ff f92f 	bl	80010c4 <HAL_InitTick>
  
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b004      	add	sp, #16
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	00001388 	.word	0x00001388
 8001e7c:	fffff8ff 	.word	0xfffff8ff
 8001e80:	0800482c 	.word	0x0800482c
 8001e84:	20000058 	.word	0x20000058

08001e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	220c      	movs	r2, #12
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x30>
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x36>
 8001eb6:	e02c      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eba:	613b      	str	r3, [r7, #16]
      break;
 8001ebc:	e02c      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ec8:	5cd3      	ldrb	r3, [r2, r3]
 8001eca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d009      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4810      	ldr	r0, [pc, #64]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ee8:	f7fe f90e 	bl	8000108 <__udivsi3>
 8001eec:	0003      	movs	r3, r0
 8001eee:	001a      	movs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4353      	muls	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e009      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	000a      	movs	r2, r1
 8001efc:	0152      	lsls	r2, r2, #5
 8001efe:	1a52      	subs	r2, r2, r1
 8001f00:	0193      	lsls	r3, r2, #6
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	185b      	adds	r3, r3, r1
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f14:	613b      	str	r3, [r7, #16]
      break;
 8001f16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f18:	693b      	ldr	r3, [r7, #16]
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b006      	add	sp, #24
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	40021000 	.word	0x40021000
 8001f28:	007a1200 	.word	0x007a1200
 8001f2c:	08004844 	.word	0x08004844
 8001f30:	08004854 	.word	0x08004854

08001f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b02      	ldr	r3, [pc, #8]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	20000058 	.word	0x20000058

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f4c:	f7ff fff2 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f50:	0001      	movs	r1, r0
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	2207      	movs	r2, #7
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	40d9      	lsrs	r1, r3
 8001f62:	000b      	movs	r3, r1
}    
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	0800483c 	.word	0x0800483c

08001f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	025b      	lsls	r3, r3, #9
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f90:	e08e      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	2017      	movs	r0, #23
 8001f94:	183b      	adds	r3, r7, r0
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	055b      	lsls	r3, r3, #21
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d110      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b54      	ldr	r3, [pc, #336]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	0549      	lsls	r1, r1, #21
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	61da      	str	r2, [r3, #28]
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	055b      	lsls	r3, r3, #21
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc2:	183b      	adds	r3, r7, r0
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d11a      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd4:	4b49      	ldr	r3, [pc, #292]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b48      	ldr	r3, [pc, #288]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0049      	lsls	r1, r1, #1
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f8b5 	bl	8001150 <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	e008      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fec:	f7ff f8b0 	bl	8001150 <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e077      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4013      	ands	r3, r2
 8002008:	d0f0      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	23c0      	movs	r3, #192	; 0xc0
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4013      	ands	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d034      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	23c0      	movs	r3, #192	; 0xc0
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4013      	ands	r3, r2
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d02c      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a33      	ldr	r2, [pc, #204]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002032:	4013      	ands	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002038:	6a1a      	ldr	r2, [r3, #32]
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0249      	lsls	r1, r1, #9
 8002040:	430a      	orrs	r2, r1
 8002042:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002046:	6a1a      	ldr	r2, [r3, #32]
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800204a:	492e      	ldr	r1, [pc, #184]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800204c:	400a      	ands	r2, r1
 800204e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff f877 	bl	8001150 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002066:	e009      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7ff f872 	bl	8001150 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	4a25      	ldr	r2, [pc, #148]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e038      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	2202      	movs	r2, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d0f0      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800208c:	4013      	ands	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002096:	430a      	orrs	r2, r1
 8002098:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800209a:	2317      	movs	r3, #23
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020aa:	4918      	ldr	r1, [pc, #96]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2201      	movs	r2, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	2203      	movs	r2, #3
 80020c0:	4393      	bics	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2220      	movs	r2, #32
 80020d4:	4013      	ands	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	2210      	movs	r2, #16
 80020de:	4393      	bics	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b006      	add	sp, #24
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
 8002100:	fffffcff 	.word	0xfffffcff
 8002104:	fffeffff 	.word	0xfffeffff
 8002108:	00001388 	.word	0x00001388
 800210c:	efffffff 	.word	0xefffffff

08002110 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002118:	230f      	movs	r3, #15
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e081      	b.n	800222e <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7f5b      	ldrb	r3, [r3, #29]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d106      	bne.n	8002142 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f7fe faf7 	bl	8000730 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2210      	movs	r2, #16
 8002150:	4013      	ands	r3, r2
 8002152:	2b10      	cmp	r3, #16
 8002154:	d05c      	beq.n	8002210 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	22ca      	movs	r2, #202	; 0xca
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2253      	movs	r2, #83	; 0x53
 8002164:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002166:	250f      	movs	r5, #15
 8002168:	197c      	adds	r4, r7, r5
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f9c5 	bl	80024fc <RTC_EnterInitMode>
 8002172:	0003      	movs	r3, r0
 8002174:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002176:	0028      	movs	r0, r5
 8002178:	183b      	adds	r3, r7, r0
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d12c      	bne.n	80021da <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	492b      	ldr	r1, [pc, #172]	; (8002238 <HAL_RTC_Init+0x128>)
 800218c:	400a      	ands	r2, r1
 800218e:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6899      	ldr	r1, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68d2      	ldr	r2, [r2, #12]
 80021b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6919      	ldr	r1, [r3, #16]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	041a      	lsls	r2, r3, #16
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80021cc:	183c      	adds	r4, r7, r0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 f9d6 	bl	8002582 <RTC_ExitInitMode>
 80021d6:	0003      	movs	r3, r0
 80021d8:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80021da:	230f      	movs	r3, #15
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d110      	bne.n	8002206 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4913      	ldr	r1, [pc, #76]	; (800223c <HAL_RTC_Init+0x12c>)
 80021f0:	400a      	ands	r2, r1
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	22ff      	movs	r2, #255	; 0xff
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
 800220e:	e003      	b.n	8002218 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002210:	230f      	movs	r3, #15
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002218:	230f      	movs	r3, #15
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002228:	230f      	movs	r3, #15
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	781b      	ldrb	r3, [r3, #0]
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b004      	add	sp, #16
 8002234:	bdb0      	pop	{r4, r5, r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	ff8fffbf 	.word	0xff8fffbf
 800223c:	fffbffff 	.word	0xfffbffff

08002240 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	7f1b      	ldrb	r3, [r3, #28]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_RTC_SetTime+0x1c>
 8002258:	2302      	movs	r3, #2
 800225a:	e08e      	b.n	800237a <HAL_RTC_SetTime+0x13a>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2201      	movs	r2, #1
 8002260:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2202      	movs	r2, #2
 8002266:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d125      	bne.n	80022ba <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	4013      	ands	r3, r2
 8002278:	d102      	bne.n	8002280 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2200      	movs	r2, #0
 800227e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	0018      	movs	r0, r3
 8002286:	f000 f9a5 	bl	80025d4 <RTC_ByteToBcd2>
 800228a:	0003      	movs	r3, r0
 800228c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	0018      	movs	r0, r3
 8002294:	f000 f99e 	bl	80025d4 <RTC_ByteToBcd2>
 8002298:	0003      	movs	r3, r0
 800229a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800229c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	789b      	ldrb	r3, [r3, #2]
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 f996 	bl	80025d4 <RTC_ByteToBcd2>
 80022a8:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022aa:	0022      	movs	r2, r4
 80022ac:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e017      	b.n	80022ea <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	4013      	ands	r3, r2
 80022c4:	d102      	bne.n	80022cc <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2200      	movs	r2, #0
 80022ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80022d8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80022de:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	78db      	ldrb	r3, [r3, #3]
 80022e4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	22ca      	movs	r2, #202	; 0xca
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2253      	movs	r2, #83	; 0x53
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80022fa:	2513      	movs	r5, #19
 80022fc:	197c      	adds	r4, r7, r5
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f8fb 	bl	80024fc <RTC_EnterInitMode>
 8002306:	0003      	movs	r3, r0
 8002308:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800230a:	0028      	movs	r0, r5
 800230c:	183b      	adds	r3, r7, r0
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d120      	bne.n	8002356 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	491a      	ldr	r1, [pc, #104]	; (8002384 <HAL_RTC_SetTime+0x144>)
 800231c:	400a      	ands	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4917      	ldr	r1, [pc, #92]	; (8002388 <HAL_RTC_SetTime+0x148>)
 800232c:	400a      	ands	r2, r1
 800232e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6899      	ldr	r1, [r3, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	431a      	orrs	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002348:	183c      	adds	r4, r7, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f918 	bl	8002582 <RTC_ExitInitMode>
 8002352:	0003      	movs	r3, r0
 8002354:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002356:	2313      	movs	r3, #19
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	22ff      	movs	r2, #255	; 0xff
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]

  return status;
 8002374:	2313      	movs	r3, #19
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	781b      	ldrb	r3, [r3, #0]
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b006      	add	sp, #24
 8002380:	bdb0      	pop	{r4, r5, r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	007f7f7f 	.word	0x007f7f7f
 8002388:	fffbffff 	.word	0xfffbffff

0800238c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800238c:	b5b0      	push	{r4, r5, r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	7f1b      	ldrb	r3, [r3, #28]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_RTC_SetDate+0x1c>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e07a      	b.n	800249e <HAL_RTC_SetDate+0x112>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2202      	movs	r2, #2
 80023b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <HAL_RTC_SetDate+0x4c>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	785b      	ldrb	r3, [r3, #1]
 80023be:	001a      	movs	r2, r3
 80023c0:	2310      	movs	r3, #16
 80023c2:	4013      	ands	r3, r2
 80023c4:	d008      	beq.n	80023d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	2210      	movs	r2, #16
 80023cc:	4393      	bics	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	330a      	adds	r3, #10
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d11c      	bne.n	8002418 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	78db      	ldrb	r3, [r3, #3]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 f8f6 	bl	80025d4 <RTC_ByteToBcd2>
 80023e8:	0003      	movs	r3, r0
 80023ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	785b      	ldrb	r3, [r3, #1]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 f8ef 	bl	80025d4 <RTC_ByteToBcd2>
 80023f6:	0003      	movs	r3, r0
 80023f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	789b      	ldrb	r3, [r3, #2]
 8002400:	0018      	movs	r0, r3
 8002402:	f000 f8e7 	bl	80025d4 <RTC_ByteToBcd2>
 8002406:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002408:	0022      	movs	r2, r4
 800240a:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e00e      	b.n	8002436 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	78db      	ldrb	r3, [r3, #3]
 800241c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002424:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800242a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	22ca      	movs	r2, #202	; 0xca
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2253      	movs	r2, #83	; 0x53
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002446:	2513      	movs	r5, #19
 8002448:	197c      	adds	r4, r7, r5
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f855 	bl	80024fc <RTC_EnterInitMode>
 8002452:	0003      	movs	r3, r0
 8002454:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002456:	0028      	movs	r0, r5
 8002458:	183b      	adds	r3, r7, r0
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10c      	bne.n	800247a <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4910      	ldr	r1, [pc, #64]	; (80024a8 <HAL_RTC_SetDate+0x11c>)
 8002468:	400a      	ands	r2, r1
 800246a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800246c:	183c      	adds	r4, r7, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	0018      	movs	r0, r3
 8002472:	f000 f886 	bl	8002582 <RTC_ExitInitMode>
 8002476:	0003      	movs	r3, r0
 8002478:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800247a:	2313      	movs	r3, #19
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	22ff      	movs	r2, #255	; 0xff
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]

  return status;
 8002498:	2313      	movs	r3, #19
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	781b      	ldrb	r3, [r3, #0]
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b006      	add	sp, #24
 80024a4:	bdb0      	pop	{r4, r5, r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	00ffff3f 	.word	0x00ffff3f

080024ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <HAL_RTC_WaitForSynchro+0x4c>)
 80024be:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c0:	f7fe fe46 	bl	8001150 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024c8:	e00a      	b.n	80024e0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80024ca:	f7fe fe41 	bl	8001150 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad2      	subs	r2, r2, r3
 80024d4:	23fa      	movs	r3, #250	; 0xfa
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	429a      	cmp	r2, r3
 80024da:	d901      	bls.n	80024e0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e006      	b.n	80024ee <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	4013      	ands	r3, r2
 80024ea:	d0ee      	beq.n	80024ca <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b004      	add	sp, #16
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	00017959 	.word	0x00017959

080024fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	230f      	movs	r3, #15
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	4013      	ands	r3, r2
 800251a:	d12b      	bne.n	8002574 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	430a      	orrs	r2, r1
 800252a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800252c:	f7fe fe10 	bl	8001150 <HAL_GetTick>
 8002530:	0003      	movs	r3, r0
 8002532:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002534:	e013      	b.n	800255e <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002536:	f7fe fe0b 	bl	8001150 <HAL_GetTick>
 800253a:	0002      	movs	r2, r0
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	200f      	movs	r0, #15
 8002542:	183b      	adds	r3, r7, r0
 8002544:	1839      	adds	r1, r7, r0
 8002546:	7809      	ldrb	r1, [r1, #0]
 8002548:	7019      	strb	r1, [r3, #0]
 800254a:	23fa      	movs	r3, #250	; 0xfa
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	429a      	cmp	r2, r3
 8002550:	d905      	bls.n	800255e <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2204      	movs	r2, #4
 8002556:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002558:	183b      	adds	r3, r7, r0
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2240      	movs	r2, #64	; 0x40
 8002566:	4013      	ands	r3, r2
 8002568:	d104      	bne.n	8002574 <RTC_EnterInitMode+0x78>
 800256a:	230f      	movs	r3, #15
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d1e0      	bne.n	8002536 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002574:	230f      	movs	r3, #15
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	781b      	ldrb	r3, [r3, #0]
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b004      	add	sp, #16
 8002580:	bd80      	pop	{r7, pc}

08002582 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002582:	b590      	push	{r4, r7, lr}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	240f      	movs	r4, #15
 800258c:	193b      	adds	r3, r7, r4
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	438a      	bics	r2, r1
 80025a0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2220      	movs	r2, #32
 80025aa:	4013      	ands	r3, r2
 80025ac:	d10b      	bne.n	80025c6 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff ff7b 	bl	80024ac <HAL_RTC_WaitForSynchro>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d005      	beq.n	80025c6 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2204      	movs	r2, #4
 80025be:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80025c0:	193b      	adds	r3, r7, r4
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80025c6:	230f      	movs	r3, #15
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	781b      	ldrb	r3, [r3, #0]
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b005      	add	sp, #20
 80025d2:	bd90      	pop	{r4, r7, pc}

080025d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	0002      	movs	r2, r0
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80025e4:	e007      	b.n	80025f6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3301      	adds	r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80025ec:	1dfb      	adds	r3, r7, #7
 80025ee:	1dfa      	adds	r2, r7, #7
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	3a0a      	subs	r2, #10
 80025f4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b09      	cmp	r3, #9
 80025fc:	d8f3      	bhi.n	80025e6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	b2da      	uxtb	r2, r3
 8002606:	1dfb      	adds	r3, r7, #7
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	4313      	orrs	r3, r2
 800260c:	b2db      	uxtb	r3, r3
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0a8      	b.n	800277c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	2382      	movs	r3, #130	; 0x82
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	429a      	cmp	r2, r3
 800263c:	d009      	beq.n	8002652 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	61da      	str	r2, [r3, #28]
 8002644:	e005      	b.n	8002652 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	225d      	movs	r2, #93	; 0x5d
 800265c:	5c9b      	ldrb	r3, [r3, r2]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	225c      	movs	r2, #92	; 0x5c
 8002668:	2100      	movs	r1, #0
 800266a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0018      	movs	r0, r3
 8002670:	f7fe f876 	bl	8000760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	225d      	movs	r2, #93	; 0x5d
 8002678:	2102      	movs	r1, #2
 800267a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	438a      	bics	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	23e0      	movs	r3, #224	; 0xe0
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	429a      	cmp	r2, r3
 8002696:	d902      	bls.n	800269e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e002      	b.n	80026a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	015b      	lsls	r3, r3, #5
 80026a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	23f0      	movs	r3, #240	; 0xf0
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d008      	beq.n	80026c2 <HAL_SPI_Init+0xaa>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	23e0      	movs	r3, #224	; 0xe0
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d002      	beq.n	80026c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	2382      	movs	r3, #130	; 0x82
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	401a      	ands	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	2384      	movs	r3, #132	; 0x84
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	400b      	ands	r3, r1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2102      	movs	r1, #2
 80026de:	400b      	ands	r3, r1
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	2101      	movs	r1, #1
 80026e8:	400b      	ands	r3, r1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6999      	ldr	r1, [r3, #24]
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	400b      	ands	r3, r1
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2138      	movs	r1, #56	; 0x38
 80026fe:	400b      	ands	r3, r1
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	400b      	ands	r3, r1
 800270a:	431a      	orrs	r2, r3
 800270c:	0011      	movs	r1, r2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	401a      	ands	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	2204      	movs	r2, #4
 8002728:	401a      	ands	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	2110      	movs	r1, #16
 8002730:	400b      	ands	r3, r1
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	2108      	movs	r1, #8
 800273a:	400b      	ands	r3, r1
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68d9      	ldr	r1, [r3, #12]
 8002742:	23f0      	movs	r3, #240	; 0xf0
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	400b      	ands	r3, r1
 8002748:	431a      	orrs	r2, r3
 800274a:	0011      	movs	r1, r2
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	015b      	lsls	r3, r3, #5
 8002752:	401a      	ands	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4907      	ldr	r1, [pc, #28]	; (8002784 <HAL_SPI_Init+0x16c>)
 8002768:	400a      	ands	r2, r1
 800276a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	225d      	movs	r2, #93	; 0x5d
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b004      	add	sp, #16
 8002782:	bd80      	pop	{r7, pc}
 8002784:	fffff7ff 	.word	0xfffff7ff

08002788 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	1dbb      	adds	r3, r7, #6
 8002796:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002798:	231f      	movs	r3, #31
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	225c      	movs	r2, #92	; 0x5c
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_SPI_Transmit+0x26>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e147      	b.n	8002a3e <HAL_SPI_Transmit+0x2b6>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	225c      	movs	r2, #92	; 0x5c
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027b6:	f7fe fccb 	bl	8001150 <HAL_GetTick>
 80027ba:	0003      	movs	r3, r0
 80027bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027be:	2316      	movs	r3, #22
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	1dba      	adds	r2, r7, #6
 80027c4:	8812      	ldrh	r2, [r2, #0]
 80027c6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	225d      	movs	r2, #93	; 0x5d
 80027cc:	5c9b      	ldrb	r3, [r3, r2]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d004      	beq.n	80027de <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80027d4:	231f      	movs	r3, #31
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2202      	movs	r2, #2
 80027da:	701a      	strb	r2, [r3, #0]
    goto error;
 80027dc:	e128      	b.n	8002a30 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_SPI_Transmit+0x64>
 80027e4:	1dbb      	adds	r3, r7, #6
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80027ec:	231f      	movs	r3, #31
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80027f4:	e11c      	b.n	8002a30 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	225d      	movs	r2, #93	; 0x5d
 80027fa:	2103      	movs	r1, #3
 80027fc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1dba      	adds	r2, r7, #6
 800280e:	8812      	ldrh	r2, [r2, #0]
 8002810:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1dba      	adds	r2, r7, #6
 8002816:	8812      	ldrh	r2, [r2, #0]
 8002818:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2244      	movs	r2, #68	; 0x44
 8002824:	2100      	movs	r1, #0
 8002826:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2246      	movs	r2, #70	; 0x46
 800282c:	2100      	movs	r1, #0
 800282e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	429a      	cmp	r2, r3
 8002846:	d110      	bne.n	800286a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	438a      	bics	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	01c9      	lsls	r1, r1, #7
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	4013      	ands	r3, r2
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d007      	beq.n	8002888 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2140      	movs	r1, #64	; 0x40
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	23e0      	movs	r3, #224	; 0xe0
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	429a      	cmp	r2, r3
 8002892:	d952      	bls.n	800293a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d004      	beq.n	80028a6 <HAL_SPI_Transmit+0x11e>
 800289c:	2316      	movs	r3, #22
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d143      	bne.n	800292e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ca:	e030      	b.n	800292e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d112      	bne.n	8002900 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028fe:	e016      	b.n	800292e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002900:	f7fe fc26 	bl	8001150 <HAL_GetTick>
 8002904:	0002      	movs	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d802      	bhi.n	8002916 <HAL_SPI_Transmit+0x18e>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	d102      	bne.n	800291c <HAL_SPI_Transmit+0x194>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d108      	bne.n	800292e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800291c:	231f      	movs	r3, #31
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2203      	movs	r2, #3
 8002922:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	225d      	movs	r2, #93	; 0x5d
 8002928:	2101      	movs	r1, #1
 800292a:	5499      	strb	r1, [r3, r2]
          goto error;
 800292c:	e080      	b.n	8002a30 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1c9      	bne.n	80028cc <HAL_SPI_Transmit+0x144>
 8002938:	e053      	b.n	80029e2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <HAL_SPI_Transmit+0x1c4>
 8002942:	2316      	movs	r3, #22
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d145      	bne.n	80029d8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002972:	e031      	b.n	80029d8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2202      	movs	r2, #2
 800297c:	4013      	ands	r3, r2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d113      	bne.n	80029aa <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029a8:	e016      	b.n	80029d8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029aa:	f7fe fbd1 	bl	8001150 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d802      	bhi.n	80029c0 <HAL_SPI_Transmit+0x238>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_SPI_Transmit+0x23e>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80029c6:	231f      	movs	r3, #31
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	2203      	movs	r2, #3
 80029cc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	225d      	movs	r2, #93	; 0x5d
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]
          goto error;
 80029d6:	e02b      	b.n	8002a30 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1c8      	bne.n	8002974 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 fdf7 	bl	80035dc <SPI_EndRxTxTransaction>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a00:	2300      	movs	r3, #0
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002a1e:	231f      	movs	r3, #31
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e003      	b.n	8002a30 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	225d      	movs	r2, #93	; 0x5d
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	225c      	movs	r2, #92	; 0x5c
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a38:	231f      	movs	r3, #31
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	781b      	ldrb	r3, [r3, #0]
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b008      	add	sp, #32
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	1dbb      	adds	r3, r7, #6
 8002a56:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a58:	2117      	movs	r1, #23
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	225d      	movs	r2, #93	; 0x5d
 8002a64:	5c9b      	ldrb	r3, [r3, r2]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d003      	beq.n	8002a74 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a72:	e12b      	b.n	8002ccc <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	2382      	movs	r3, #130	; 0x82
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d113      	bne.n	8002aa8 <HAL_SPI_Receive+0x60>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10f      	bne.n	8002aa8 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	225d      	movs	r2, #93	; 0x5d
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a90:	1dbb      	adds	r3, r7, #6
 8002a92:	881c      	ldrh	r4, [r3, #0]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	0023      	movs	r3, r4
 8002aa0:	f000 f924 	bl	8002cec <HAL_SPI_TransmitReceive>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	e118      	b.n	8002cda <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	225c      	movs	r2, #92	; 0x5c
 8002aac:	5c9b      	ldrb	r3, [r3, r2]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_SPI_Receive+0x6e>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e111      	b.n	8002cda <HAL_SPI_Receive+0x292>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	225c      	movs	r2, #92	; 0x5c
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002abe:	f7fe fb47 	bl	8001150 <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_SPI_Receive+0x8c>
 8002acc:	1dbb      	adds	r3, r7, #6
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d104      	bne.n	8002ade <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002ad4:	2317      	movs	r3, #23
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
    goto error;
 8002adc:	e0f6      	b.n	8002ccc <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	225d      	movs	r2, #93	; 0x5d
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1dba      	adds	r2, r7, #6
 8002af6:	2144      	movs	r1, #68	; 0x44
 8002af8:	8812      	ldrh	r2, [r2, #0]
 8002afa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1dba      	adds	r2, r7, #6
 8002b00:	2146      	movs	r1, #70	; 0x46
 8002b02:	8812      	ldrh	r2, [r2, #0]
 8002b04:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	23e0      	movs	r3, #224	; 0xe0
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d908      	bls.n	8002b42 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	496a      	ldr	r1, [pc, #424]	; (8002ce4 <HAL_SPI_Receive+0x29c>)
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	e008      	b.n	8002b54 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0149      	lsls	r1, r1, #5
 8002b50:	430a      	orrs	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d10f      	bne.n	8002b80 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2140      	movs	r1, #64	; 0x40
 8002b6c:	438a      	bics	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	495b      	ldr	r1, [pc, #364]	; (8002ce8 <HAL_SPI_Receive+0x2a0>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2240      	movs	r2, #64	; 0x40
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d007      	beq.n	8002b9e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	23e0      	movs	r3, #224	; 0xe0
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d900      	bls.n	8002bac <HAL_SPI_Receive+0x164>
 8002baa:	e071      	b.n	8002c90 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bac:	e035      	b.n	8002c1a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d117      	bne.n	8002bec <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2246      	movs	r2, #70	; 0x46
 8002bdc:	5a9b      	ldrh	r3, [r3, r2]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b299      	uxth	r1, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2246      	movs	r2, #70	; 0x46
 8002be8:	5299      	strh	r1, [r3, r2]
 8002bea:	e016      	b.n	8002c1a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bec:	f7fe fab0 	bl	8001150 <HAL_GetTick>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d802      	bhi.n	8002c02 <HAL_SPI_Receive+0x1ba>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_SPI_Receive+0x1c0>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d108      	bne.n	8002c1a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002c08:	2317      	movs	r3, #23
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	225d      	movs	r2, #93	; 0x5d
 8002c14:	2101      	movs	r1, #1
 8002c16:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c18:	e058      	b.n	8002ccc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2246      	movs	r2, #70	; 0x46
 8002c1e:	5a9b      	ldrh	r3, [r3, r2]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1c3      	bne.n	8002bae <HAL_SPI_Receive+0x166>
 8002c26:	e039      	b.n	8002c9c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d115      	bne.n	8002c62 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	b292      	uxth	r2, r2
 8002c42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	1c9a      	adds	r2, r3, #2
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2246      	movs	r2, #70	; 0x46
 8002c52:	5a9b      	ldrh	r3, [r3, r2]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b299      	uxth	r1, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2246      	movs	r2, #70	; 0x46
 8002c5e:	5299      	strh	r1, [r3, r2]
 8002c60:	e016      	b.n	8002c90 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c62:	f7fe fa75 	bl	8001150 <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d802      	bhi.n	8002c78 <HAL_SPI_Receive+0x230>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	d102      	bne.n	8002c7e <HAL_SPI_Receive+0x236>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d108      	bne.n	8002c90 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002c7e:	2317      	movs	r3, #23
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	2203      	movs	r2, #3
 8002c84:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	225d      	movs	r2, #93	; 0x5d
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c8e:	e01d      	b.n	8002ccc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2246      	movs	r2, #70	; 0x46
 8002c94:	5a9b      	ldrh	r3, [r3, r2]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1c5      	bne.n	8002c28 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	6839      	ldr	r1, [r7, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 fc3c 	bl	8003520 <SPI_EndRxTransaction>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d004      	beq.n	8002cc4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002cba:	2317      	movs	r3, #23
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e003      	b.n	8002ccc <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	225d      	movs	r2, #93	; 0x5d
 8002cc8:	2101      	movs	r1, #1
 8002cca:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	225c      	movs	r2, #92	; 0x5c
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002cd4:	2317      	movs	r3, #23
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b007      	add	sp, #28
 8002ce0:	bd90      	pop	{r4, r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	ffffefff 	.word	0xffffefff
 8002ce8:	ffffbfff 	.word	0xffffbfff

08002cec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	1cbb      	adds	r3, r7, #2
 8002cfc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d02:	2323      	movs	r3, #35	; 0x23
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	225c      	movs	r2, #92	; 0x5c
 8002d0e:	5c9b      	ldrb	r3, [r3, r2]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0x2c>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e1c4      	b.n	80030a2 <HAL_SPI_TransmitReceive+0x3b6>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	225c      	movs	r2, #92	; 0x5c
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d20:	f7fe fa16 	bl	8001150 <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d28:	201b      	movs	r0, #27
 8002d2a:	183b      	adds	r3, r7, r0
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	215d      	movs	r1, #93	; 0x5d
 8002d30:	5c52      	ldrb	r2, [r2, r1]
 8002d32:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d3a:	2312      	movs	r3, #18
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	1cba      	adds	r2, r7, #2
 8002d40:	8812      	ldrh	r2, [r2, #0]
 8002d42:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d44:	183b      	adds	r3, r7, r0
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d011      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x84>
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	2382      	movs	r3, #130	; 0x82
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d107      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x7a>
 8002d5e:	183b      	adds	r3, r7, r0
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d004      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002d66:	2323      	movs	r3, #35	; 0x23
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d6e:	e191      	b.n	8003094 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <HAL_SPI_TransmitReceive+0x98>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_SPI_TransmitReceive+0x98>
 8002d7c:	1cbb      	adds	r3, r7, #2
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d104      	bne.n	8002d8e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002d84:	2323      	movs	r3, #35	; 0x23
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d8c:	e182      	b.n	8003094 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	225d      	movs	r2, #93	; 0x5d
 8002d92:	5c9b      	ldrb	r3, [r3, r2]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d003      	beq.n	8002da2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	225d      	movs	r2, #93	; 0x5d
 8002d9e:	2105      	movs	r1, #5
 8002da0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1cba      	adds	r2, r7, #2
 8002db2:	2146      	movs	r1, #70	; 0x46
 8002db4:	8812      	ldrh	r2, [r2, #0]
 8002db6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1cba      	adds	r2, r7, #2
 8002dbc:	2144      	movs	r1, #68	; 0x44
 8002dbe:	8812      	ldrh	r2, [r2, #0]
 8002dc0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1cba      	adds	r2, r7, #2
 8002dcc:	8812      	ldrh	r2, [r2, #0]
 8002dce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1cba      	adds	r2, r7, #2
 8002dd4:	8812      	ldrh	r2, [r2, #0]
 8002dd6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	23e0      	movs	r3, #224	; 0xe0
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d908      	bls.n	8002e02 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	49ac      	ldr	r1, [pc, #688]	; (80030ac <HAL_SPI_TransmitReceive+0x3c0>)
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	e008      	b.n	8002e14 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0149      	lsls	r1, r1, #5
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2240      	movs	r2, #64	; 0x40
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b40      	cmp	r3, #64	; 0x40
 8002e20:	d007      	beq.n	8002e32 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2140      	movs	r1, #64	; 0x40
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	23e0      	movs	r3, #224	; 0xe0
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d800      	bhi.n	8002e40 <HAL_SPI_TransmitReceive+0x154>
 8002e3e:	e083      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x168>
 8002e48:	2312      	movs	r3, #18
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d000      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x168>
 8002e52:	e06d      	b.n	8002f30 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	881a      	ldrh	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	1c9a      	adds	r2, r3, #2
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e78:	e05a      	b.n	8002f30 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2202      	movs	r2, #2
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d11b      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x1d4>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x1d4>
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d113      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d11c      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x21c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2246      	movs	r2, #70	; 0x46
 8002ed2:	5a9b      	ldrh	r3, [r3, r2]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	1c9a      	adds	r2, r3, #2
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2246      	movs	r2, #70	; 0x46
 8002ef6:	5a9b      	ldrh	r3, [r3, r2]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b299      	uxth	r1, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2246      	movs	r2, #70	; 0x46
 8002f02:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f04:	2301      	movs	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f08:	f7fe f922 	bl	8001150 <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d80b      	bhi.n	8002f30 <HAL_SPI_TransmitReceive+0x244>
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	d008      	beq.n	8002f30 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002f1e:	2323      	movs	r3, #35	; 0x23
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2203      	movs	r2, #3
 8002f24:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	225d      	movs	r2, #93	; 0x5d
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]
        goto error;
 8002f2e:	e0b1      	b.n	8003094 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d19f      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x18e>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2246      	movs	r2, #70	; 0x46
 8002f3e:	5a9b      	ldrh	r3, [r3, r2]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d199      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x18e>
 8002f46:	e089      	b.n	800305c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_SPI_TransmitReceive+0x270>
 8002f50:	2312      	movs	r3, #18
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d000      	beq.n	8002f5c <HAL_SPI_TransmitReceive+0x270>
 8002f5a:	e074      	b.n	8003046 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f82:	e060      	b.n	8003046 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d11c      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x2e0>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d017      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x2e0>
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d114      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d11e      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x32c>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2246      	movs	r2, #70	; 0x46
 8002fde:	5a9b      	ldrh	r3, [r3, r2]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d018      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330c      	adds	r3, #12
 8002fec:	001a      	movs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2246      	movs	r2, #70	; 0x46
 8003006:	5a9b      	ldrh	r3, [r3, r2]
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b299      	uxth	r1, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2246      	movs	r2, #70	; 0x46
 8003012:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003014:	2301      	movs	r3, #1
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003018:	f7fe f89a 	bl	8001150 <HAL_GetTick>
 800301c:	0002      	movs	r2, r0
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003024:	429a      	cmp	r2, r3
 8003026:	d802      	bhi.n	800302e <HAL_SPI_TransmitReceive+0x342>
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	3301      	adds	r3, #1
 800302c:	d102      	bne.n	8003034 <HAL_SPI_TransmitReceive+0x348>
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2b00      	cmp	r3, #0
 8003032:	d108      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003034:	2323      	movs	r3, #35	; 0x23
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2203      	movs	r2, #3
 800303a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	225d      	movs	r2, #93	; 0x5d
 8003040:	2101      	movs	r1, #1
 8003042:	5499      	strb	r1, [r3, r2]
        goto error;
 8003044:	e026      	b.n	8003094 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d199      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x298>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2246      	movs	r2, #70	; 0x46
 8003054:	5a9b      	ldrh	r3, [r3, r2]
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d193      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	0018      	movs	r0, r3
 8003064:	f000 faba 	bl	80035dc <SPI_EndRxTxTransaction>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d006      	beq.n	800307a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800306c:	2323      	movs	r3, #35	; 0x23
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003082:	2323      	movs	r3, #35	; 0x23
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e003      	b.n	8003094 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	225d      	movs	r2, #93	; 0x5d
 8003090:	2101      	movs	r1, #1
 8003092:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	225c      	movs	r2, #92	; 0x5c
 8003098:	2100      	movs	r1, #0
 800309a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800309c:	2323      	movs	r3, #35	; 0x23
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	781b      	ldrb	r3, [r3, #0]
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b00a      	add	sp, #40	; 0x28
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	ffffefff 	.word	0xffffefff

080030b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2240      	movs	r2, #64	; 0x40
 80030cc:	4013      	ands	r3, r2
 80030ce:	d10d      	bne.n	80030ec <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2201      	movs	r2, #1
 80030d4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030d6:	d009      	beq.n	80030ec <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	2240      	movs	r2, #64	; 0x40
 80030dc:	4013      	ands	r3, r2
 80030de:	d005      	beq.n	80030ec <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	0010      	movs	r0, r2
 80030e8:	4798      	blx	r3
    return;
 80030ea:	e0c5      	b.n	8003278 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2202      	movs	r2, #2
 80030f0:	4013      	ands	r3, r2
 80030f2:	d009      	beq.n	8003108 <HAL_SPI_IRQHandler+0x58>
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	4013      	ands	r3, r2
 80030fa:	d005      	beq.n	8003108 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	0010      	movs	r0, r2
 8003104:	4798      	blx	r3
    return;
 8003106:	e0b7      	b.n	8003278 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2220      	movs	r2, #32
 800310c:	4013      	ands	r3, r2
 800310e:	d109      	bne.n	8003124 <HAL_SPI_IRQHandler+0x74>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	4013      	ands	r3, r2
 8003116:	d105      	bne.n	8003124 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4013      	ands	r3, r2
 8003120:	d100      	bne.n	8003124 <HAL_SPI_IRQHandler+0x74>
 8003122:	e0a9      	b.n	8003278 <HAL_SPI_IRQHandler+0x1c8>
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	2220      	movs	r2, #32
 8003128:	4013      	ands	r3, r2
 800312a:	d100      	bne.n	800312e <HAL_SPI_IRQHandler+0x7e>
 800312c:	e0a4      	b.n	8003278 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2240      	movs	r2, #64	; 0x40
 8003132:	4013      	ands	r3, r2
 8003134:	d023      	beq.n	800317e <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	225d      	movs	r2, #93	; 0x5d
 800313a:	5c9b      	ldrb	r3, [r3, r2]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b03      	cmp	r3, #3
 8003140:	d011      	beq.n	8003166 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	2204      	movs	r2, #4
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	e00b      	b.n	800317e <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693b      	ldr	r3, [r7, #16]
        return;
 800317c:	e07c      	b.n	8003278 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2220      	movs	r2, #32
 8003182:	4013      	ands	r3, r2
 8003184:	d014      	beq.n	80031b0 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318a:	2201      	movs	r2, #1
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	438a      	bics	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	d00c      	beq.n	80031d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031be:	2208      	movs	r2, #8
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d04c      	beq.n	8003276 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	21e0      	movs	r1, #224	; 0xe0
 80031e8:	438a      	bics	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	225d      	movs	r2, #93	; 0x5d
 80031f0:	2101      	movs	r1, #1
 80031f2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2202      	movs	r2, #2
 80031f8:	4013      	ands	r3, r2
 80031fa:	d103      	bne.n	8003204 <HAL_SPI_IRQHandler+0x154>
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d032      	beq.n	800326a <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2103      	movs	r1, #3
 8003210:	438a      	bics	r2, r1
 8003212:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	4a17      	ldr	r2, [pc, #92]	; (8003280 <HAL_SPI_IRQHandler+0x1d0>)
 8003222:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	0018      	movs	r0, r3
 800322a:	f7fe f879 	bl	8001320 <HAL_DMA_Abort_IT>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d005      	beq.n	800323e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <HAL_SPI_IRQHandler+0x1d0>)
 800324c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	0018      	movs	r0, r3
 8003254:	f7fe f864 	bl	8001320 <HAL_DMA_Abort_IT>
 8003258:	1e03      	subs	r3, r0, #0
 800325a:	d00b      	beq.n	8003274 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	2240      	movs	r2, #64	; 0x40
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003268:	e004      	b.n	8003274 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f000 f809 	bl	8003284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003272:	e000      	b.n	8003276 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8003274:	46c0      	nop			; (mov r8, r8)
    return;
 8003276:	46c0      	nop			; (mov r8, r8)
  }
}
 8003278:	46bd      	mov	sp, r7
 800327a:	b008      	add	sp, #32
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	08003295 	.word	0x08003295

08003284 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}

08003294 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2246      	movs	r2, #70	; 0x46
 80032a6:	2100      	movs	r1, #0
 80032a8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7ff ffe6 	bl	8003284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b004      	add	sp, #16
 80032be:	bd80      	pop	{r7, pc}

080032c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	1dfb      	adds	r3, r7, #7
 80032ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032d0:	f7fd ff3e 	bl	8001150 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	18d3      	adds	r3, r2, r3
 80032de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032e0:	f7fd ff36 	bl	8001150 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	015b      	lsls	r3, r3, #5
 80032ee:	0d1b      	lsrs	r3, r3, #20
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	4353      	muls	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f6:	e058      	b.n	80033aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	d055      	beq.n	80033aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032fe:	f7fd ff27 	bl	8001150 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	429a      	cmp	r2, r3
 800330c:	d902      	bls.n	8003314 <SPI_WaitFlagStateUntilTimeout+0x54>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d142      	bne.n	800339a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	21e0      	movs	r1, #224	; 0xe0
 8003320:	438a      	bics	r2, r1
 8003322:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	2382      	movs	r3, #130	; 0x82
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	429a      	cmp	r2, r3
 800332e:	d113      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	429a      	cmp	r2, r3
 800333a:	d005      	beq.n	8003348 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2140      	movs	r1, #64	; 0x40
 8003354:	438a      	bics	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	019b      	lsls	r3, r3, #6
 8003360:	429a      	cmp	r2, r3
 8003362:	d110      	bne.n	8003386 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	491a      	ldr	r1, [pc, #104]	; (80033d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	0189      	lsls	r1, r1, #6
 8003382:	430a      	orrs	r2, r1
 8003384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	225d      	movs	r2, #93	; 0x5d
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	225c      	movs	r2, #92	; 0x5c
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e017      	b.n	80033ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	425a      	negs	r2, r3
 80033ba:	4153      	adcs	r3, r2
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	001a      	movs	r2, r3
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d197      	bne.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b008      	add	sp, #32
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	20000058 	.word	0x20000058
 80033d8:	ffffdfff 	.word	0xffffdfff

080033dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033ea:	2317      	movs	r3, #23
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033f2:	f7fd fead 	bl	8001150 <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	18d3      	adds	r3, r2, r3
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003402:	f7fd fea5 	bl	8001150 <HAL_GetTick>
 8003406:	0003      	movs	r3, r0
 8003408:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003412:	4b41      	ldr	r3, [pc, #260]	; (8003518 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	0013      	movs	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	189b      	adds	r3, r3, r2
 800341c:	00da      	lsls	r2, r3, #3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	0d1b      	lsrs	r3, r3, #20
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	4353      	muls	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003428:	e068      	b.n	80034fc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	23c0      	movs	r3, #192	; 0xc0
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	429a      	cmp	r2, r3
 8003432:	d10a      	bne.n	800344a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d107      	bne.n	800344a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	2117      	movs	r1, #23
 8003442:	187b      	adds	r3, r7, r1
 8003444:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003446:	187b      	adds	r3, r7, r1
 8003448:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	d055      	beq.n	80034fc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003450:	f7fd fe7e 	bl	8001150 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	429a      	cmp	r2, r3
 800345e:	d902      	bls.n	8003466 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d142      	bne.n	80034ec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	21e0      	movs	r1, #224	; 0xe0
 8003472:	438a      	bics	r2, r1
 8003474:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	2382      	movs	r3, #130	; 0x82
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	429a      	cmp	r2, r3
 8003480:	d113      	bne.n	80034aa <SPI_WaitFifoStateUntilTimeout+0xce>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	429a      	cmp	r2, r3
 800348c:	d005      	beq.n	800349a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	429a      	cmp	r2, r3
 8003498:	d107      	bne.n	80034aa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2140      	movs	r1, #64	; 0x40
 80034a6:	438a      	bics	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d110      	bne.n	80034d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4916      	ldr	r1, [pc, #88]	; (800351c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80034c2:	400a      	ands	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	0189      	lsls	r1, r1, #6
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	225d      	movs	r2, #93	; 0x5d
 80034dc:	2101      	movs	r1, #1
 80034de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	225c      	movs	r2, #92	; 0x5c
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e010      	b.n	800350e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4013      	ands	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d18e      	bne.n	800342a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b00a      	add	sp, #40	; 0x28
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	20000058 	.word	0x20000058
 800351c:	ffffdfff 	.word	0xffffdfff

08003520 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	2382      	movs	r3, #130	; 0x82
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	429a      	cmp	r2, r3
 8003536:	d113      	bne.n	8003560 <SPI_EndRxTransaction+0x40>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	429a      	cmp	r2, r3
 8003542:	d005      	beq.n	8003550 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	429a      	cmp	r2, r3
 800354e:	d107      	bne.n	8003560 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2140      	movs	r1, #64	; 0x40
 800355c:	438a      	bics	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	0013      	movs	r3, r2
 800356a:	2200      	movs	r2, #0
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	f7ff fea7 	bl	80032c0 <SPI_WaitFlagStateUntilTimeout>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d007      	beq.n	8003586 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	2220      	movs	r2, #32
 800357c:	431a      	orrs	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e026      	b.n	80035d4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	2382      	movs	r3, #130	; 0x82
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	429a      	cmp	r2, r3
 8003590:	d11f      	bne.n	80035d2 <SPI_EndRxTransaction+0xb2>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	429a      	cmp	r2, r3
 800359c:	d005      	beq.n	80035aa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d113      	bne.n	80035d2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	23c0      	movs	r3, #192	; 0xc0
 80035ae:	00d9      	lsls	r1, r3, #3
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	0013      	movs	r3, r2
 80035b8:	2200      	movs	r2, #0
 80035ba:	f7ff ff0f 	bl	80033dc <SPI_WaitFifoStateUntilTimeout>
 80035be:	1e03      	subs	r3, r0, #0
 80035c0:	d007      	beq.n	80035d2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c6:	2220      	movs	r2, #32
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e000      	b.n	80035d4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b004      	add	sp, #16
 80035da:	bd80      	pop	{r7, pc}

080035dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	23c0      	movs	r3, #192	; 0xc0
 80035ec:	0159      	lsls	r1, r3, #5
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	0013      	movs	r3, r2
 80035f6:	2200      	movs	r2, #0
 80035f8:	f7ff fef0 	bl	80033dc <SPI_WaitFifoStateUntilTimeout>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d007      	beq.n	8003610 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003604:	2220      	movs	r2, #32
 8003606:	431a      	orrs	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e027      	b.n	8003660 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	0013      	movs	r3, r2
 800361a:	2200      	movs	r2, #0
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	f7ff fe4f 	bl	80032c0 <SPI_WaitFlagStateUntilTimeout>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d007      	beq.n	8003636 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362a:	2220      	movs	r2, #32
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e014      	b.n	8003660 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	23c0      	movs	r3, #192	; 0xc0
 800363a:	00d9      	lsls	r1, r3, #3
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	0013      	movs	r3, r2
 8003644:	2200      	movs	r2, #0
 8003646:	f7ff fec9 	bl	80033dc <SPI_WaitFifoStateUntilTimeout>
 800364a:	1e03      	subs	r3, r0, #0
 800364c:	d007      	beq.n	800365e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003652:	2220      	movs	r2, #32
 8003654:	431a      	orrs	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e000      	b.n	8003660 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e042      	b.n	8003700 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223d      	movs	r2, #61	; 0x3d
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d107      	bne.n	8003696 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	223c      	movs	r2, #60	; 0x3c
 800368a:	2100      	movs	r1, #0
 800368c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0018      	movs	r0, r3
 8003692:	f7fd f8b9 	bl	8000808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	223d      	movs	r2, #61	; 0x3d
 800369a:	2102      	movs	r1, #2
 800369c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	0019      	movs	r1, r3
 80036a8:	0010      	movs	r0, r2
 80036aa:	f000 fa37 	bl	8003b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2246      	movs	r2, #70	; 0x46
 80036b2:	2101      	movs	r1, #1
 80036b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	223e      	movs	r2, #62	; 0x3e
 80036ba:	2101      	movs	r1, #1
 80036bc:	5499      	strb	r1, [r3, r2]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	223f      	movs	r2, #63	; 0x3f
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2240      	movs	r2, #64	; 0x40
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2241      	movs	r2, #65	; 0x41
 80036d2:	2101      	movs	r1, #1
 80036d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2242      	movs	r2, #66	; 0x42
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2243      	movs	r2, #67	; 0x43
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2244      	movs	r2, #68	; 0x44
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2245      	movs	r2, #69	; 0x45
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	223d      	movs	r2, #61	; 0x3d
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b002      	add	sp, #8
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d124      	bne.n	8003768 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2202      	movs	r2, #2
 8003726:	4013      	ands	r3, r2
 8003728:	2b02      	cmp	r3, #2
 800372a:	d11d      	bne.n	8003768 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2203      	movs	r2, #3
 8003732:	4252      	negs	r2, r2
 8003734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2203      	movs	r2, #3
 8003744:	4013      	ands	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 f9ce 	bl	8003aec <HAL_TIM_IC_CaptureCallback>
 8003750:	e007      	b.n	8003762 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f9c1 	bl	8003adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	0018      	movs	r0, r3
 800375e:	f000 f9cd 	bl	8003afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2204      	movs	r2, #4
 8003770:	4013      	ands	r3, r2
 8003772:	2b04      	cmp	r3, #4
 8003774:	d125      	bne.n	80037c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2204      	movs	r2, #4
 800377e:	4013      	ands	r3, r2
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11e      	bne.n	80037c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2205      	movs	r2, #5
 800378a:	4252      	negs	r2, r2
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	23c0      	movs	r3, #192	; 0xc0
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4013      	ands	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f000 f9a1 	bl	8003aec <HAL_TIM_IC_CaptureCallback>
 80037aa:	e007      	b.n	80037bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f994 	bl	8003adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 f9a0 	bl	8003afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	2208      	movs	r2, #8
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d124      	bne.n	800381a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2208      	movs	r2, #8
 80037d8:	4013      	ands	r3, r2
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d11d      	bne.n	800381a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2209      	movs	r2, #9
 80037e4:	4252      	negs	r2, r2
 80037e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2204      	movs	r2, #4
 80037ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	2203      	movs	r2, #3
 80037f6:	4013      	ands	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 f975 	bl	8003aec <HAL_TIM_IC_CaptureCallback>
 8003802:	e007      	b.n	8003814 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 f968 	bl	8003adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f974 	bl	8003afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2210      	movs	r2, #16
 8003822:	4013      	ands	r3, r2
 8003824:	2b10      	cmp	r3, #16
 8003826:	d125      	bne.n	8003874 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2210      	movs	r2, #16
 8003830:	4013      	ands	r3, r2
 8003832:	2b10      	cmp	r3, #16
 8003834:	d11e      	bne.n	8003874 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2211      	movs	r2, #17
 800383c:	4252      	negs	r2, r2
 800383e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2208      	movs	r2, #8
 8003844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	23c0      	movs	r3, #192	; 0xc0
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4013      	ands	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f948 	bl	8003aec <HAL_TIM_IC_CaptureCallback>
 800385c:	e007      	b.n	800386e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 f93b 	bl	8003adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0018      	movs	r0, r3
 800386a:	f000 f947 	bl	8003afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2201      	movs	r2, #1
 800387c:	4013      	ands	r3, r2
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10f      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	4013      	ands	r3, r2
 800388c:	2b01      	cmp	r3, #1
 800388e:	d108      	bne.n	80038a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2202      	movs	r2, #2
 8003896:	4252      	negs	r2, r2
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	0018      	movs	r0, r3
 800389e:	f7fc fcf1 	bl	8000284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d10f      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b80      	cmp	r3, #128	; 0x80
 80038bc:	d108      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2281      	movs	r2, #129	; 0x81
 80038c4:	4252      	negs	r2, r2
 80038c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 fa96 	bl	8003dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	4013      	ands	r3, r2
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d10f      	bne.n	80038fe <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2240      	movs	r2, #64	; 0x40
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d108      	bne.n	80038fe <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2241      	movs	r2, #65	; 0x41
 80038f2:	4252      	negs	r2, r2
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 f907 	bl	8003b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2220      	movs	r2, #32
 8003906:	4013      	ands	r3, r2
 8003908:	2b20      	cmp	r3, #32
 800390a:	d10f      	bne.n	800392c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	4013      	ands	r3, r2
 8003916:	2b20      	cmp	r3, #32
 8003918:	d108      	bne.n	800392c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2221      	movs	r2, #33	; 0x21
 8003920:	4252      	negs	r2, r2
 8003922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	0018      	movs	r0, r3
 8003928:	f000 fa60 	bl	8003dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393e:	230f      	movs	r3, #15
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	223c      	movs	r2, #60	; 0x3c
 800394a:	5c9b      	ldrb	r3, [r3, r2]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_TIM_ConfigClockSource+0x20>
 8003950:	2302      	movs	r3, #2
 8003952:	e0bc      	b.n	8003ace <HAL_TIM_ConfigClockSource+0x19a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	223c      	movs	r2, #60	; 0x3c
 8003958:	2101      	movs	r1, #1
 800395a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	223d      	movs	r2, #61	; 0x3d
 8003960:	2102      	movs	r1, #2
 8003962:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2277      	movs	r2, #119	; 0x77
 8003970:	4393      	bics	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4a58      	ldr	r2, [pc, #352]	; (8003ad8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003978:	4013      	ands	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	0192      	lsls	r2, r2, #6
 800398c:	4293      	cmp	r3, r2
 800398e:	d040      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0xde>
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	0192      	lsls	r2, r2, #6
 8003994:	4293      	cmp	r3, r2
 8003996:	d900      	bls.n	800399a <HAL_TIM_ConfigClockSource+0x66>
 8003998:	e088      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x178>
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	0152      	lsls	r2, r2, #5
 800399e:	4293      	cmp	r3, r2
 80039a0:	d100      	bne.n	80039a4 <HAL_TIM_ConfigClockSource+0x70>
 80039a2:	e088      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x182>
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	0152      	lsls	r2, r2, #5
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d900      	bls.n	80039ae <HAL_TIM_ConfigClockSource+0x7a>
 80039ac:	e07e      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x178>
 80039ae:	2b70      	cmp	r3, #112	; 0x70
 80039b0:	d018      	beq.n	80039e4 <HAL_TIM_ConfigClockSource+0xb0>
 80039b2:	d900      	bls.n	80039b6 <HAL_TIM_ConfigClockSource+0x82>
 80039b4:	e07a      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x178>
 80039b6:	2b60      	cmp	r3, #96	; 0x60
 80039b8:	d04f      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0x126>
 80039ba:	d900      	bls.n	80039be <HAL_TIM_ConfigClockSource+0x8a>
 80039bc:	e076      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x178>
 80039be:	2b50      	cmp	r3, #80	; 0x50
 80039c0:	d03b      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x106>
 80039c2:	d900      	bls.n	80039c6 <HAL_TIM_ConfigClockSource+0x92>
 80039c4:	e072      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x178>
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d057      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0x146>
 80039ca:	d900      	bls.n	80039ce <HAL_TIM_ConfigClockSource+0x9a>
 80039cc:	e06e      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x178>
 80039ce:	2b30      	cmp	r3, #48	; 0x30
 80039d0:	d063      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x166>
 80039d2:	d86b      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x178>
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d060      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x166>
 80039d8:	d868      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x178>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d05d      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x166>
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d05b      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x166>
 80039e2:	e063      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039f4:	f000 f982 	bl	8003cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2277      	movs	r2, #119	; 0x77
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	609a      	str	r2, [r3, #8]
      break;
 8003a10:	e052      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a22:	f000 f96b 	bl	8003cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	01c9      	lsls	r1, r1, #7
 8003a34:	430a      	orrs	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]
      break;
 8003a38:	e03e      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	001a      	movs	r2, r3
 8003a48:	f000 f8de 	bl	8003c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2150      	movs	r1, #80	; 0x50
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 f938 	bl	8003cc8 <TIM_ITRx_SetConfig>
      break;
 8003a58:	e02e      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a66:	001a      	movs	r2, r3
 8003a68:	f000 f8fc 	bl	8003c64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2160      	movs	r1, #96	; 0x60
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 f928 	bl	8003cc8 <TIM_ITRx_SetConfig>
      break;
 8003a78:	e01e      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a86:	001a      	movs	r2, r3
 8003a88:	f000 f8be 	bl	8003c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2140      	movs	r1, #64	; 0x40
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 f918 	bl	8003cc8 <TIM_ITRx_SetConfig>
      break;
 8003a98:	e00e      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	0010      	movs	r0, r2
 8003aa6:	f000 f90f 	bl	8003cc8 <TIM_ITRx_SetConfig>
      break;
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003aac:	230f      	movs	r3, #15
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
      break;
 8003ab4:	e000      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003ab6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	223d      	movs	r2, #61	; 0x3d
 8003abc:	2101      	movs	r1, #1
 8003abe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	223c      	movs	r2, #60	; 0x3c
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

  return status;
 8003ac8:	230f      	movs	r3, #15
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b004      	add	sp, #16
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	ffff00ff 	.word	0xffff00ff

08003adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b002      	add	sp, #8
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a30      	ldr	r2, [pc, #192]	; (8003bf0 <TIM_Base_SetConfig+0xd4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d008      	beq.n	8003b46 <TIM_Base_SetConfig+0x2a>
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	05db      	lsls	r3, r3, #23
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d003      	beq.n	8003b46 <TIM_Base_SetConfig+0x2a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <TIM_Base_SetConfig+0xd8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d108      	bne.n	8003b58 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2270      	movs	r2, #112	; 0x70
 8003b4a:	4393      	bics	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a25      	ldr	r2, [pc, #148]	; (8003bf0 <TIM_Base_SetConfig+0xd4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d014      	beq.n	8003b8a <TIM_Base_SetConfig+0x6e>
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	05db      	lsls	r3, r3, #23
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d00f      	beq.n	8003b8a <TIM_Base_SetConfig+0x6e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <TIM_Base_SetConfig+0xd8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00b      	beq.n	8003b8a <TIM_Base_SetConfig+0x6e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <TIM_Base_SetConfig+0xdc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d007      	beq.n	8003b8a <TIM_Base_SetConfig+0x6e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <TIM_Base_SetConfig+0xe0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d003      	beq.n	8003b8a <TIM_Base_SetConfig+0x6e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <TIM_Base_SetConfig+0xe4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d108      	bne.n	8003b9c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <TIM_Base_SetConfig+0xe8>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	4393      	bics	r3, r2
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <TIM_Base_SetConfig+0xd4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <TIM_Base_SetConfig+0xbe>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a0b      	ldr	r2, [pc, #44]	; (8003bfc <TIM_Base_SetConfig+0xe0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_Base_SetConfig+0xbe>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <TIM_Base_SetConfig+0xe4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d103      	bne.n	8003be2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	615a      	str	r2, [r3, #20]
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b004      	add	sp, #16
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40002000 	.word	0x40002000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800
 8003c04:	fffffcff 	.word	0xfffffcff

08003c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4393      	bics	r3, r2
 8003c22:	001a      	movs	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	22f0      	movs	r2, #240	; 0xf0
 8003c32:	4393      	bics	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	220a      	movs	r2, #10
 8003c44:	4393      	bics	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	621a      	str	r2, [r3, #32]
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b006      	add	sp, #24
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	2210      	movs	r2, #16
 8003c76:	4393      	bics	r3, r2
 8003c78:	001a      	movs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <TIM_TI2_ConfigInputStage+0x60>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	031b      	lsls	r3, r3, #12
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	22a0      	movs	r2, #160	; 0xa0
 8003ca0:	4393      	bics	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b006      	add	sp, #24
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	ffff0fff 	.word	0xffff0fff

08003cc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2270      	movs	r2, #112	; 0x70
 8003cdc:	4393      	bics	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	2207      	movs	r2, #7
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	609a      	str	r2, [r3, #8]
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <TIM_ETR_SetConfig+0x3c>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b006      	add	sp, #24
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	ffff00ff 	.word	0xffff00ff

08003d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	223c      	movs	r2, #60	; 0x3c
 8003d4a:	5c9b      	ldrb	r3, [r3, r2]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e042      	b.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	223c      	movs	r2, #60	; 0x3c
 8003d58:	2101      	movs	r1, #1
 8003d5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	223d      	movs	r2, #61	; 0x3d
 8003d60:	2102      	movs	r1, #2
 8003d62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2270      	movs	r2, #112	; 0x70
 8003d78:	4393      	bics	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00a      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	05db      	lsls	r3, r3, #23
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d004      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0f      	ldr	r2, [pc, #60]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10c      	bne.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	4393      	bics	r3, r2
 8003db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	223d      	movs	r2, #61	; 0x3d
 8003dcc:	2101      	movs	r1, #1
 8003dce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	223c      	movs	r2, #60	; 0x3c
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b004      	add	sp, #16
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400

08003dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e044      	b.n	8003ea8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d107      	bne.n	8003e36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2278      	movs	r2, #120	; 0x78
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7fc fd19 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2224      	movs	r2, #36	; 0x24
 8003e3a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2101      	movs	r1, #1
 8003e48:	438a      	bics	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f000 f8a0 	bl	8003f94 <UART_SetConfig>
 8003e54:	0003      	movs	r3, r0
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e024      	b.n	8003ea8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f000 f9bb 	bl	80041e4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	490d      	ldr	r1, [pc, #52]	; (8003eb0 <HAL_UART_Init+0xa4>)
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	212a      	movs	r1, #42	; 0x2a
 8003e8a:	438a      	bics	r2, r1
 8003e8c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 fa53 	bl	800434c <UART_CheckIdleState>
 8003ea6:	0003      	movs	r3, r0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b002      	add	sp, #8
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	ffffb7ff 	.word	0xffffb7ff

08003eb4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	1dbb      	adds	r3, r7, #6
 8003ec0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d15b      	bne.n	8003f82 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_UART_Transmit_IT+0x24>
 8003ed0:	1dbb      	adds	r3, r7, #6
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e053      	b.n	8003f84 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	015b      	lsls	r3, r3, #5
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d109      	bne.n	8003efc <HAL_UART_Transmit_IT+0x48>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e043      	b.n	8003f84 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1dba      	adds	r2, r7, #6
 8003f06:	2150      	movs	r1, #80	; 0x50
 8003f08:	8812      	ldrh	r2, [r2, #0]
 8003f0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1dba      	adds	r2, r7, #6
 8003f10:	2152      	movs	r1, #82	; 0x52
 8003f12:	8812      	ldrh	r2, [r2, #0]
 8003f14:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2284      	movs	r2, #132	; 0x84
 8003f20:	2100      	movs	r1, #0
 8003f22:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2221      	movs	r2, #33	; 0x21
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	015b      	lsls	r3, r3, #5
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d107      	bne.n	8003f46 <HAL_UART_Transmit_IT+0x92>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <HAL_UART_Transmit_IT+0xd8>)
 8003f42:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f44:	e002      	b.n	8003f4c <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4a11      	ldr	r2, [pc, #68]	; (8003f90 <HAL_UART_Transmit_IT+0xdc>)
 8003f4a:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f50:	613b      	str	r3, [r7, #16]
  return(result);
 8003f52:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	2301      	movs	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f383 8810 	msr	PRIMASK, r3
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f383 8810 	msr	PRIMASK, r3
}
 8003f7c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
  }
}
 8003f84:	0018      	movs	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b008      	add	sp, #32
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	080046ed 	.word	0x080046ed
 8003f90:	08004639 	.word	0x08004639

08003f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f9c:	231e      	movs	r3, #30
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a83      	ldr	r2, [pc, #524]	; (80041d0 <UART_SetConfig+0x23c>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4a7e      	ldr	r2, [pc, #504]	; (80041d4 <UART_SetConfig+0x240>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	0019      	movs	r1, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4a75      	ldr	r2, [pc, #468]	; (80041d8 <UART_SetConfig+0x244>)
 8004002:	4013      	ands	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	430a      	orrs	r2, r1
 800400e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004010:	4b72      	ldr	r3, [pc, #456]	; (80041dc <UART_SetConfig+0x248>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	2203      	movs	r2, #3
 8004016:	4013      	ands	r3, r2
 8004018:	2b03      	cmp	r3, #3
 800401a:	d00d      	beq.n	8004038 <UART_SetConfig+0xa4>
 800401c:	d81b      	bhi.n	8004056 <UART_SetConfig+0xc2>
 800401e:	2b02      	cmp	r3, #2
 8004020:	d014      	beq.n	800404c <UART_SetConfig+0xb8>
 8004022:	d818      	bhi.n	8004056 <UART_SetConfig+0xc2>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <UART_SetConfig+0x9a>
 8004028:	2b01      	cmp	r3, #1
 800402a:	d00a      	beq.n	8004042 <UART_SetConfig+0xae>
 800402c:	e013      	b.n	8004056 <UART_SetConfig+0xc2>
 800402e:	231f      	movs	r3, #31
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e012      	b.n	800405e <UART_SetConfig+0xca>
 8004038:	231f      	movs	r3, #31
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2202      	movs	r2, #2
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e00d      	b.n	800405e <UART_SetConfig+0xca>
 8004042:	231f      	movs	r3, #31
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2204      	movs	r2, #4
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e008      	b.n	800405e <UART_SetConfig+0xca>
 800404c:	231f      	movs	r3, #31
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2208      	movs	r2, #8
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e003      	b.n	800405e <UART_SetConfig+0xca>
 8004056:	231f      	movs	r3, #31
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	2210      	movs	r2, #16
 800405c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	429a      	cmp	r2, r3
 8004068:	d15c      	bne.n	8004124 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 800406a:	231f      	movs	r3, #31
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d015      	beq.n	80040a0 <UART_SetConfig+0x10c>
 8004074:	dc18      	bgt.n	80040a8 <UART_SetConfig+0x114>
 8004076:	2b04      	cmp	r3, #4
 8004078:	d00d      	beq.n	8004096 <UART_SetConfig+0x102>
 800407a:	dc15      	bgt.n	80040a8 <UART_SetConfig+0x114>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <UART_SetConfig+0xf2>
 8004080:	2b02      	cmp	r3, #2
 8004082:	d005      	beq.n	8004090 <UART_SetConfig+0xfc>
 8004084:	e010      	b.n	80040a8 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004086:	f7fd ff5f 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 800408a:	0003      	movs	r3, r0
 800408c:	61bb      	str	r3, [r7, #24]
        break;
 800408e:	e012      	b.n	80040b6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <UART_SetConfig+0x24c>)
 8004092:	61bb      	str	r3, [r7, #24]
        break;
 8004094:	e00f      	b.n	80040b6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7fd fef7 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 800409a:	0003      	movs	r3, r0
 800409c:	61bb      	str	r3, [r7, #24]
        break;
 800409e:	e00a      	b.n	80040b6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	61bb      	str	r3, [r7, #24]
        break;
 80040a6:	e006      	b.n	80040b6 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ac:	231e      	movs	r3, #30
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
        break;
 80040b4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d100      	bne.n	80040be <UART_SetConfig+0x12a>
 80040bc:	e07a      	b.n	80041b4 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	005a      	lsls	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	18d2      	adds	r2, r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	0019      	movs	r1, r3
 80040d0:	0010      	movs	r0, r2
 80040d2:	f7fc f819 	bl	8000108 <__udivsi3>
 80040d6:	0003      	movs	r3, r0
 80040d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d91c      	bls.n	800411a <UART_SetConfig+0x186>
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	025b      	lsls	r3, r3, #9
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d217      	bcs.n	800411a <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	200e      	movs	r0, #14
 80040f0:	183b      	adds	r3, r7, r0
 80040f2:	210f      	movs	r1, #15
 80040f4:	438a      	bics	r2, r1
 80040f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2207      	movs	r2, #7
 8004100:	4013      	ands	r3, r2
 8004102:	b299      	uxth	r1, r3
 8004104:	183b      	adds	r3, r7, r0
 8004106:	183a      	adds	r2, r7, r0
 8004108:	8812      	ldrh	r2, [r2, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	183a      	adds	r2, r7, r0
 8004114:	8812      	ldrh	r2, [r2, #0]
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	e04c      	b.n	80041b4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 800411a:	231e      	movs	r3, #30
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	e047      	b.n	80041b4 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004124:	231f      	movs	r3, #31
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b08      	cmp	r3, #8
 800412c:	d015      	beq.n	800415a <UART_SetConfig+0x1c6>
 800412e:	dc18      	bgt.n	8004162 <UART_SetConfig+0x1ce>
 8004130:	2b04      	cmp	r3, #4
 8004132:	d00d      	beq.n	8004150 <UART_SetConfig+0x1bc>
 8004134:	dc15      	bgt.n	8004162 <UART_SetConfig+0x1ce>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <UART_SetConfig+0x1ac>
 800413a:	2b02      	cmp	r3, #2
 800413c:	d005      	beq.n	800414a <UART_SetConfig+0x1b6>
 800413e:	e010      	b.n	8004162 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004140:	f7fd ff02 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8004144:	0003      	movs	r3, r0
 8004146:	61bb      	str	r3, [r7, #24]
        break;
 8004148:	e012      	b.n	8004170 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414a:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <UART_SetConfig+0x24c>)
 800414c:	61bb      	str	r3, [r7, #24]
        break;
 800414e:	e00f      	b.n	8004170 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004150:	f7fd fe9a 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8004154:	0003      	movs	r3, r0
 8004156:	61bb      	str	r3, [r7, #24]
        break;
 8004158:	e00a      	b.n	8004170 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	61bb      	str	r3, [r7, #24]
        break;
 8004160:	e006      	b.n	8004170 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004166:	231e      	movs	r3, #30
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
        break;
 800416e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01e      	beq.n	80041b4 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	085a      	lsrs	r2, r3, #1
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	18d2      	adds	r2, r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	0019      	movs	r1, r3
 8004186:	0010      	movs	r0, r2
 8004188:	f7fb ffbe 	bl	8000108 <__udivsi3>
 800418c:	0003      	movs	r3, r0
 800418e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d90a      	bls.n	80041ac <UART_SetConfig+0x218>
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	025b      	lsls	r3, r3, #9
 800419c:	429a      	cmp	r2, r3
 800419e:	d205      	bcs.n	80041ac <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	e003      	b.n	80041b4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 80041ac:	231e      	movs	r3, #30
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041c0:	231e      	movs	r3, #30
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	781b      	ldrb	r3, [r3, #0]
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b008      	add	sp, #32
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	ffff69f3 	.word	0xffff69f3
 80041d4:	ffffcfff 	.word	0xffffcfff
 80041d8:	fffff4ff 	.word	0xfffff4ff
 80041dc:	40021000 	.word	0x40021000
 80041e0:	007a1200 	.word	0x007a1200

080041e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2201      	movs	r2, #1
 80041f2:	4013      	ands	r3, r2
 80041f4:	d00b      	beq.n	800420e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	4a4a      	ldr	r2, [pc, #296]	; (8004328 <UART_AdvFeatureConfig+0x144>)
 80041fe:	4013      	ands	r3, r2
 8004200:	0019      	movs	r1, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2202      	movs	r2, #2
 8004214:	4013      	ands	r3, r2
 8004216:	d00b      	beq.n	8004230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4a43      	ldr	r2, [pc, #268]	; (800432c <UART_AdvFeatureConfig+0x148>)
 8004220:	4013      	ands	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	2204      	movs	r2, #4
 8004236:	4013      	ands	r3, r2
 8004238:	d00b      	beq.n	8004252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4a3b      	ldr	r2, [pc, #236]	; (8004330 <UART_AdvFeatureConfig+0x14c>)
 8004242:	4013      	ands	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2208      	movs	r2, #8
 8004258:	4013      	ands	r3, r2
 800425a:	d00b      	beq.n	8004274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4a34      	ldr	r2, [pc, #208]	; (8004334 <UART_AdvFeatureConfig+0x150>)
 8004264:	4013      	ands	r3, r2
 8004266:	0019      	movs	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2210      	movs	r2, #16
 800427a:	4013      	ands	r3, r2
 800427c:	d00b      	beq.n	8004296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <UART_AdvFeatureConfig+0x154>)
 8004286:	4013      	ands	r3, r2
 8004288:	0019      	movs	r1, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2220      	movs	r2, #32
 800429c:	4013      	ands	r3, r2
 800429e:	d00b      	beq.n	80042b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	4a25      	ldr	r2, [pc, #148]	; (800433c <UART_AdvFeatureConfig+0x158>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	0019      	movs	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	2240      	movs	r2, #64	; 0x40
 80042be:	4013      	ands	r3, r2
 80042c0:	d01d      	beq.n	80042fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <UART_AdvFeatureConfig+0x15c>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	035b      	lsls	r3, r3, #13
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d10b      	bne.n	80042fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4a15      	ldr	r2, [pc, #84]	; (8004344 <UART_AdvFeatureConfig+0x160>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	2280      	movs	r2, #128	; 0x80
 8004304:	4013      	ands	r3, r2
 8004306:	d00b      	beq.n	8004320 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a0e      	ldr	r2, [pc, #56]	; (8004348 <UART_AdvFeatureConfig+0x164>)
 8004310:	4013      	ands	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bd80      	pop	{r7, pc}
 8004328:	fffdffff 	.word	0xfffdffff
 800432c:	fffeffff 	.word	0xfffeffff
 8004330:	fffbffff 	.word	0xfffbffff
 8004334:	ffff7fff 	.word	0xffff7fff
 8004338:	ffffefff 	.word	0xffffefff
 800433c:	ffffdfff 	.word	0xffffdfff
 8004340:	ffefffff 	.word	0xffefffff
 8004344:	ff9fffff 	.word	0xff9fffff
 8004348:	fff7ffff 	.word	0xfff7ffff

0800434c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b092      	sub	sp, #72	; 0x48
 8004350:	af02      	add	r7, sp, #8
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2284      	movs	r2, #132	; 0x84
 8004358:	2100      	movs	r1, #0
 800435a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800435c:	f7fc fef8 	bl	8001150 <HAL_GetTick>
 8004360:	0003      	movs	r3, r0
 8004362:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2208      	movs	r2, #8
 800436c:	4013      	ands	r3, r2
 800436e:	2b08      	cmp	r3, #8
 8004370:	d12c      	bne.n	80043cc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	2280      	movs	r2, #128	; 0x80
 8004376:	0391      	lsls	r1, r2, #14
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4a46      	ldr	r2, [pc, #280]	; (8004494 <UART_CheckIdleState+0x148>)
 800437c:	9200      	str	r2, [sp, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	f000 f88c 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 8004384:	1e03      	subs	r3, r0, #0
 8004386:	d021      	beq.n	80043cc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004388:	f3ef 8310 	mrs	r3, PRIMASK
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004390:	63bb      	str	r3, [r7, #56]	; 0x38
 8004392:	2301      	movs	r3, #1
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	f383 8810 	msr	PRIMASK, r3
}
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	438a      	bics	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	f383 8810 	msr	PRIMASK, r3
}
 80043b8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2278      	movs	r2, #120	; 0x78
 80043c4:	2100      	movs	r1, #0
 80043c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e05f      	b.n	800448c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2204      	movs	r2, #4
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d146      	bne.n	8004468 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043dc:	2280      	movs	r2, #128	; 0x80
 80043de:	03d1      	lsls	r1, r2, #15
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <UART_CheckIdleState+0x148>)
 80043e4:	9200      	str	r2, [sp, #0]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f000 f858 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 80043ec:	1e03      	subs	r3, r0, #0
 80043ee:	d03b      	beq.n	8004468 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f0:	f3ef 8310 	mrs	r3, PRIMASK
 80043f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80043f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
 80043fa:	2301      	movs	r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f383 8810 	msr	PRIMASK, r3
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4921      	ldr	r1, [pc, #132]	; (8004498 <UART_CheckIdleState+0x14c>)
 8004412:	400a      	ands	r2, r1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f383 8810 	msr	PRIMASK, r3
}
 8004420:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004422:	f3ef 8310 	mrs	r3, PRIMASK
 8004426:	61bb      	str	r3, [r7, #24]
  return(result);
 8004428:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
 800442c:	2301      	movs	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2101      	movs	r1, #1
 8004444:	438a      	bics	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	f383 8810 	msr	PRIMASK, r3
}
 8004452:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	2120      	movs	r1, #32
 800445a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2278      	movs	r2, #120	; 0x78
 8004460:	2100      	movs	r1, #0
 8004462:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e011      	b.n	800448c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2280      	movs	r2, #128	; 0x80
 8004472:	2120      	movs	r1, #32
 8004474:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2278      	movs	r2, #120	; 0x78
 8004486:	2100      	movs	r1, #0
 8004488:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b010      	add	sp, #64	; 0x40
 8004492:	bd80      	pop	{r7, pc}
 8004494:	01ffffff 	.word	0x01ffffff
 8004498:	fffffedf 	.word	0xfffffedf

0800449c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	1dfb      	adds	r3, r7, #7
 80044aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ac:	e04b      	b.n	8004546 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	3301      	adds	r3, #1
 80044b2:	d048      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b4:	f7fc fe4c 	bl	8001150 <HAL_GetTick>
 80044b8:	0002      	movs	r2, r0
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d302      	bcc.n	80044ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e04b      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2204      	movs	r2, #4
 80044d6:	4013      	ands	r3, r2
 80044d8:	d035      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	2208      	movs	r2, #8
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d111      	bne.n	800450c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2208      	movs	r2, #8
 80044ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 f83c 	bl	8004570 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2284      	movs	r2, #132	; 0x84
 80044fc:	2108      	movs	r1, #8
 80044fe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2278      	movs	r2, #120	; 0x78
 8004504:	2100      	movs	r1, #0
 8004506:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e02c      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	401a      	ands	r2, r3
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	429a      	cmp	r2, r3
 800451e:	d112      	bne.n	8004546 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2280      	movs	r2, #128	; 0x80
 8004526:	0112      	lsls	r2, r2, #4
 8004528:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	0018      	movs	r0, r3
 800452e:	f000 f81f 	bl	8004570 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2284      	movs	r2, #132	; 0x84
 8004536:	2120      	movs	r1, #32
 8004538:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2278      	movs	r2, #120	; 0x78
 800453e:	2100      	movs	r1, #0
 8004540:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e00f      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	425a      	negs	r2, r3
 8004556:	4153      	adcs	r3, r2
 8004558:	b2db      	uxtb	r3, r3
 800455a:	001a      	movs	r2, r3
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d0a4      	beq.n	80044ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b004      	add	sp, #16
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08e      	sub	sp, #56	; 0x38
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004578:	f3ef 8310 	mrs	r3, PRIMASK
 800457c:	617b      	str	r3, [r7, #20]
  return(result);
 800457e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
 8004582:	2301      	movs	r3, #1
 8004584:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f383 8810 	msr	PRIMASK, r3
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4926      	ldr	r1, [pc, #152]	; (8004634 <UART_EndRxTransfer+0xc4>)
 800459a:	400a      	ands	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f383 8810 	msr	PRIMASK, r3
}
 80045a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045aa:	f3ef 8310 	mrs	r3, PRIMASK
 80045ae:	623b      	str	r3, [r7, #32]
  return(result);
 80045b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b2:	633b      	str	r3, [r7, #48]	; 0x30
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	f383 8810 	msr	PRIMASK, r3
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2101      	movs	r1, #1
 80045cc:	438a      	bics	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	f383 8810 	msr	PRIMASK, r3
}
 80045da:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d118      	bne.n	8004616 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045e4:	f3ef 8310 	mrs	r3, PRIMASK
 80045e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ee:	2301      	movs	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f383 8810 	msr	PRIMASK, r3
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2110      	movs	r1, #16
 8004606:	438a      	bics	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f383 8810 	msr	PRIMASK, r3
}
 8004614:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	2120      	movs	r1, #32
 800461c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	669a      	str	r2, [r3, #104]	; 0x68
}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	b00e      	add	sp, #56	; 0x38
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	fffffedf 	.word	0xfffffedf

08004638 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004644:	2b21      	cmp	r3, #33	; 0x21
 8004646:	d14d      	bne.n	80046e4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2252      	movs	r2, #82	; 0x52
 800464c:	5a9b      	ldrh	r3, [r3, r2]
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d132      	bne.n	80046ba <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004654:	f3ef 8310 	mrs	r3, PRIMASK
 8004658:	60bb      	str	r3, [r7, #8]
  return(result);
 800465a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
 800465e:	2301      	movs	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f383 8810 	msr	PRIMASK, r3
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2180      	movs	r1, #128	; 0x80
 8004676:	438a      	bics	r2, r1
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004686:	f3ef 8310 	mrs	r3, PRIMASK
 800468a:	617b      	str	r3, [r7, #20]
  return(result);
 800468c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	2301      	movs	r3, #1
 8004692:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	f383 8810 	msr	PRIMASK, r3
}
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	430a      	orrs	r2, r1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f383 8810 	msr	PRIMASK, r3
}
 80046b6:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80046b8:	e014      	b.n	80046e4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	b292      	uxth	r2, r2
 80046c6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2252      	movs	r2, #82	; 0x52
 80046d6:	5a9b      	ldrh	r3, [r3, r2]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b299      	uxth	r1, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2252      	movs	r2, #82	; 0x52
 80046e2:	5299      	strh	r1, [r3, r2]
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b00a      	add	sp, #40	; 0x28
 80046ea:	bd80      	pop	{r7, pc}

080046ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08c      	sub	sp, #48	; 0x30
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f8:	2b21      	cmp	r3, #33	; 0x21
 80046fa:	d151      	bne.n	80047a0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2252      	movs	r2, #82	; 0x52
 8004700:	5a9b      	ldrh	r3, [r3, r2]
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d132      	bne.n	800476e <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004708:	f3ef 8310 	mrs	r3, PRIMASK
 800470c:	60fb      	str	r3, [r7, #12]
  return(result);
 800470e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
 8004712:	2301      	movs	r3, #1
 8004714:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f383 8810 	msr	PRIMASK, r3
}
 800471c:	46c0      	nop			; (mov r8, r8)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2180      	movs	r1, #128	; 0x80
 800472a:	438a      	bics	r2, r1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473a:	f3ef 8310 	mrs	r3, PRIMASK
 800473e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004740:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
 8004744:	2301      	movs	r3, #1
 8004746:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f383 8810 	msr	PRIMASK, r3
}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2140      	movs	r1, #64	; 0x40
 800475c:	430a      	orrs	r2, r1
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	f383 8810 	msr	PRIMASK, r3
}
 800476a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800476c:	e018      	b.n	80047a0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	05d2      	lsls	r2, r2, #23
 800477e:	0dd2      	lsrs	r2, r2, #23
 8004780:	b292      	uxth	r2, r2
 8004782:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004788:	1c9a      	adds	r2, r3, #2
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2252      	movs	r2, #82	; 0x52
 8004792:	5a9b      	ldrh	r3, [r3, r2]
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b299      	uxth	r1, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2252      	movs	r2, #82	; 0x52
 800479e:	5299      	strh	r1, [r3, r2]
}
 80047a0:	46c0      	nop			; (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b00c      	add	sp, #48	; 0x30
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <memset>:
 80047a8:	0003      	movs	r3, r0
 80047aa:	1882      	adds	r2, r0, r2
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d100      	bne.n	80047b2 <memset+0xa>
 80047b0:	4770      	bx	lr
 80047b2:	7019      	strb	r1, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	e7f9      	b.n	80047ac <memset+0x4>

080047b8 <__libc_init_array>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	2600      	movs	r6, #0
 80047bc:	4c0c      	ldr	r4, [pc, #48]	; (80047f0 <__libc_init_array+0x38>)
 80047be:	4d0d      	ldr	r5, [pc, #52]	; (80047f4 <__libc_init_array+0x3c>)
 80047c0:	1b64      	subs	r4, r4, r5
 80047c2:	10a4      	asrs	r4, r4, #2
 80047c4:	42a6      	cmp	r6, r4
 80047c6:	d109      	bne.n	80047dc <__libc_init_array+0x24>
 80047c8:	2600      	movs	r6, #0
 80047ca:	f000 f823 	bl	8004814 <_init>
 80047ce:	4c0a      	ldr	r4, [pc, #40]	; (80047f8 <__libc_init_array+0x40>)
 80047d0:	4d0a      	ldr	r5, [pc, #40]	; (80047fc <__libc_init_array+0x44>)
 80047d2:	1b64      	subs	r4, r4, r5
 80047d4:	10a4      	asrs	r4, r4, #2
 80047d6:	42a6      	cmp	r6, r4
 80047d8:	d105      	bne.n	80047e6 <__libc_init_array+0x2e>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	00b3      	lsls	r3, r6, #2
 80047de:	58eb      	ldr	r3, [r5, r3]
 80047e0:	4798      	blx	r3
 80047e2:	3601      	adds	r6, #1
 80047e4:	e7ee      	b.n	80047c4 <__libc_init_array+0xc>
 80047e6:	00b3      	lsls	r3, r6, #2
 80047e8:	58eb      	ldr	r3, [r5, r3]
 80047ea:	4798      	blx	r3
 80047ec:	3601      	adds	r6, #1
 80047ee:	e7f2      	b.n	80047d6 <__libc_init_array+0x1e>
 80047f0:	08004864 	.word	0x08004864
 80047f4:	08004864 	.word	0x08004864
 80047f8:	08004868 	.word	0x08004868
 80047fc:	08004864 	.word	0x08004864

08004800 <memcpy>:
 8004800:	2300      	movs	r3, #0
 8004802:	b510      	push	{r4, lr}
 8004804:	429a      	cmp	r2, r3
 8004806:	d100      	bne.n	800480a <memcpy+0xa>
 8004808:	bd10      	pop	{r4, pc}
 800480a:	5ccc      	ldrb	r4, [r1, r3]
 800480c:	54c4      	strb	r4, [r0, r3]
 800480e:	3301      	adds	r3, #1
 8004810:	e7f8      	b.n	8004804 <memcpy+0x4>
	...

08004814 <_init>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr

08004820 <_fini>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr
