
Transmission_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da0  08003da0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003da0  08003da0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003da0  08003da0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000018  08003dc0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08003dc0  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cabf  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002029  00000000  00000000  0002cb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  0002eb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a19  00000000  00000000  0002f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000127db  00000000  00000000  00030279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f55e  00000000  00000000  00042a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006f029  00000000  00000000  00051fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e9c  00000000  00000000  000c0fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c3e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d58 	.word	0x08003d58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08003d58 	.word	0x08003d58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <tmp_tx>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmp_tx(radio *r, SPI_HandleTypeDef *hspi, uint8_t *data, uint8_t data_size)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	001a      	movs	r2, r3
 800022e:	1cfb      	adds	r3, r7, #3
 8000230:	701a      	strb	r2, [r3, #0]
	r->sx_state = TRANSMITTER;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2270      	movs	r2, #112	; 0x70
 8000236:	2102      	movs	r1, #2
 8000238:	5499      	strb	r1, [r3, r2]
	memcpy(r->tx_buffer, data, data_size);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	3374      	adds	r3, #116	; 0x74
 800023e:	0018      	movs	r0, r3
 8000240:	1cfb      	adds	r3, r7, #3
 8000242:	781a      	ldrb	r2, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	0019      	movs	r1, r3
 8000248:	f003 fd7c 	bl	8003d44 <memcpy>
	r->tx_buffer_size = data_size;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	1cfa      	adds	r2, r7, #3
 8000250:	4903      	ldr	r1, [pc, #12]	; (8000260 <tmp_tx+0x40>)
 8000252:	7812      	ldrb	r2, [r2, #0]
 8000254:	545a      	strb	r2, [r3, r1]
}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	b004      	add	sp, #16
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	00000474 	.word	0x00000474

08000264 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	tmp_tx(&r, &hspi1, data, sizeof(data));
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800026e:	4905      	ldr	r1, [pc, #20]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000270:	4805      	ldr	r0, [pc, #20]	; (8000288 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000272:	230c      	movs	r3, #12
 8000274:	f7ff ffd4 	bl	8000220 <tmp_tx>
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000000 	.word	0x20000000
 8000284:	20000054 	.word	0x20000054
 8000288:	20000100 	.word	0x20000100

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000290:	f000 fe7a 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000294:	f000 f828 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000298:	f000 f97c 	bl	8000594 <MX_GPIO_Init>
  MX_RTC_Init();
 800029c:	f000 f880 	bl	80003a0 <MX_RTC_Init>
  MX_SPI1_Init();
 80002a0:	f000 f8e0 	bl	8000464 <MX_SPI1_Init>
  MX_TIM1_Init();
 80002a4:	f000 f91c 	bl	80004e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim1);
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0x4c>)
 80002aa:	0018      	movs	r0, r3
 80002ac:	f003 f94c 	bl	8003548 <HAL_TIM_Base_Init>
//  HAL_TIM_Base_Start_IT(&htim1);
  sx1278_init(&r, &hspi1);
 80002b0:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <main+0x50>)
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <main+0x54>)
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fc1a 	bl	8000af0 <sx1278_init>
  tmp_tx(&r, &hspi1, data, sizeof(data));
 80002bc:	4a09      	ldr	r2, [pc, #36]	; (80002e4 <main+0x58>)
 80002be:	4907      	ldr	r1, [pc, #28]	; (80002dc <main+0x50>)
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <main+0x54>)
 80002c2:	230c      	movs	r3, #12
 80002c4:	f7ff ffac 	bl	8000220 <tmp_tx>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SX1278_APP(&r, &hspi1);
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <main+0x50>)
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <main+0x54>)
 80002cc:	0011      	movs	r1, r2
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fd8c 	bl	8000dec <SX1278_APP>
 80002d4:	e7f8      	b.n	80002c8 <main+0x3c>
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	200000b8 	.word	0x200000b8
 80002dc:	20000054 	.word	0x20000054
 80002e0:	20000100 	.word	0x20000100
 80002e4:	20000000 	.word	0x20000000

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b095      	sub	sp, #84	; 0x54
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	2420      	movs	r4, #32
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2330      	movs	r3, #48	; 0x30
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f003 fcf7 	bl	8003cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	2310      	movs	r3, #16
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	0018      	movs	r0, r3
 8000304:	2310      	movs	r3, #16
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f003 fcef 	bl	8003cec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800030e:	003b      	movs	r3, r7
 8000310:	0018      	movs	r0, r3
 8000312:	2310      	movs	r3, #16
 8000314:	001a      	movs	r2, r3
 8000316:	2100      	movs	r1, #0
 8000318:	f003 fce8 	bl	8003cec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800031c:	0021      	movs	r1, r4
 800031e:	187b      	adds	r3, r7, r1
 8000320:	220a      	movs	r2, #10
 8000322:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2201      	movs	r2, #1
 8000328:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2210      	movs	r2, #16
 800032e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2201      	movs	r2, #1
 8000334:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	187b      	adds	r3, r7, r1
 800033e:	0018      	movs	r0, r3
 8000340:	f001 f94a 	bl	80015d8 <HAL_RCC_OscConfig>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000348:	f000 f986 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	2110      	movs	r1, #16
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2207      	movs	r2, #7
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2200      	movs	r2, #0
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2100      	movs	r1, #0
 800036a:	0018      	movs	r0, r3
 800036c:	f001 fc4e 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000374:	f000 f970 	bl	8000658 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000378:	003b      	movs	r3, r7
 800037a:	2280      	movs	r2, #128	; 0x80
 800037c:	0252      	lsls	r2, r2, #9
 800037e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000380:	003b      	movs	r3, r7
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	0092      	lsls	r2, r2, #2
 8000386:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000388:	003b      	movs	r3, r7
 800038a:	0018      	movs	r0, r3
 800038c:	f001 fd62 	bl	8001e54 <HAL_RCCEx_PeriphCLKConfig>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000394:	f000 f960 	bl	8000658 <Error_Handler>
  }
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b015      	add	sp, #84	; 0x54
 800039e:	bd90      	pop	{r4, r7, pc}

080003a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	0018      	movs	r0, r3
 80003aa:	2314      	movs	r3, #20
 80003ac:	001a      	movs	r2, r3
 80003ae:	2100      	movs	r1, #0
 80003b0:	f003 fc9c 	bl	8003cec <memset>
  RTC_DateTypeDef sDate = {0};
 80003b4:	003b      	movs	r3, r7
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003ba:	4b28      	ldr	r3, [pc, #160]	; (800045c <MX_RTC_Init+0xbc>)
 80003bc:	4a28      	ldr	r2, [pc, #160]	; (8000460 <MX_RTC_Init+0xc0>)
 80003be:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003c0:	4b26      	ldr	r3, [pc, #152]	; (800045c <MX_RTC_Init+0xbc>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003c6:	4b25      	ldr	r3, [pc, #148]	; (800045c <MX_RTC_Init+0xbc>)
 80003c8:	227f      	movs	r2, #127	; 0x7f
 80003ca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003cc:	4b23      	ldr	r3, [pc, #140]	; (800045c <MX_RTC_Init+0xbc>)
 80003ce:	22ff      	movs	r2, #255	; 0xff
 80003d0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003d2:	4b22      	ldr	r3, [pc, #136]	; (800045c <MX_RTC_Init+0xbc>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <MX_RTC_Init+0xbc>)
 80003da:	2200      	movs	r2, #0
 80003dc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003de:	4b1f      	ldr	r3, [pc, #124]	; (800045c <MX_RTC_Init+0xbc>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_RTC_Init+0xbc>)
 80003e6:	0018      	movs	r0, r3
 80003e8:	f001 fe02 	bl	8001ff0 <HAL_RTC_Init>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80003f0:	f000 f932 	bl	8000658 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000412:	1d39      	adds	r1, r7, #4
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_RTC_Init+0xbc>)
 8000416:	2201      	movs	r2, #1
 8000418:	0018      	movs	r0, r3
 800041a:	f001 fe81 	bl	8002120 <HAL_RTC_SetTime>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000422:	f000 f919 	bl	8000658 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000426:	003b      	movs	r3, r7
 8000428:	2201      	movs	r2, #1
 800042a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800042c:	003b      	movs	r3, r7
 800042e:	2201      	movs	r2, #1
 8000430:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000432:	003b      	movs	r3, r7
 8000434:	2201      	movs	r2, #1
 8000436:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000438:	003b      	movs	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800043e:	0039      	movs	r1, r7
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_RTC_Init+0xbc>)
 8000442:	2201      	movs	r2, #1
 8000444:	0018      	movs	r0, r3
 8000446:	f001 ff11 	bl	800226c <HAL_RTC_SetDate>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 800044e:	f000 f903 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	b006      	add	sp, #24
 8000458:	bd80      	pop	{r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	20000034 	.word	0x20000034
 8000460:	40002800 	.word	0x40002800

08000464 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_SPI1_Init+0x74>)
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <MX_SPI1_Init+0x78>)
 800046c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_SPI1_Init+0x74>)
 8000470:	2282      	movs	r2, #130	; 0x82
 8000472:	0052      	lsls	r2, r2, #1
 8000474:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <MX_SPI1_Init+0x74>)
 800047e:	22e0      	movs	r2, #224	; 0xe0
 8000480:	00d2      	lsls	r2, r2, #3
 8000482:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_SPI1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_SPI1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_SPI1_Init+0x74>)
 8000492:	2280      	movs	r2, #128	; 0x80
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_SPI1_Init+0x74>)
 800049a:	2208      	movs	r2, #8
 800049c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_SPI1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_SPI1_Init+0x74>)
 80004b2:	2207      	movs	r2, #7
 80004b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_SPI1_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_SPI1_Init+0x74>)
 80004be:	2208      	movs	r2, #8
 80004c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <MX_SPI1_Init+0x74>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 f817 	bl	80024f8 <HAL_SPI_Init>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004ce:	f000 f8c3 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000054 	.word	0x20000054
 80004dc:	40013000 	.word	0x40013000

080004e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e6:	2308      	movs	r3, #8
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	0018      	movs	r0, r3
 80004ec:	2310      	movs	r3, #16
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f003 fbfb 	bl	8003cec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	2308      	movs	r3, #8
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f003 fbf4 	bl	8003cec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <MX_TIM1_Init+0xa8>)
 8000506:	4a21      	ldr	r2, [pc, #132]	; (800058c <MX_TIM1_Init+0xac>)
 8000508:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 256;
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_TIM1_Init+0xa8>)
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	0052      	lsls	r2, r2, #1
 8000510:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_TIM1_Init+0xa8>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_TIM1_Init+0xa8>)
 800051a:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <MX_TIM1_Init+0xb0>)
 800051c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_TIM1_Init+0xa8>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_TIM1_Init+0xa8>)
 8000526:	2200      	movs	r2, #0
 8000528:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_TIM1_Init+0xa8>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_TIM1_Init+0xa8>)
 8000532:	0018      	movs	r0, r3
 8000534:	f003 f808 	bl	8003548 <HAL_TIM_Base_Init>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 800053c:	f000 f88c 	bl	8000658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000540:	2108      	movs	r1, #8
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2280      	movs	r2, #128	; 0x80
 8000546:	0152      	lsls	r2, r2, #5
 8000548:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800054a:	187a      	adds	r2, r7, r1
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_TIM1_Init+0xa8>)
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f003 f95f 	bl	8003814 <HAL_TIM_ConfigClockSource>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800055a:	f000 f87d 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055e:	003b      	movs	r3, r7
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	003b      	movs	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800056a:	003a      	movs	r2, r7
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_TIM1_Init+0xa8>)
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f003 fb53 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800057a:	f000 f86d 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b006      	add	sp, #24
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	200000b8 	.word	0x200000b8
 800058c:	40012c00 	.word	0x40012c00
 8000590:	0000ffff 	.word	0x0000ffff

08000594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b089      	sub	sp, #36	; 0x24
 8000598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	240c      	movs	r4, #12
 800059c:	193b      	adds	r3, r7, r4
 800059e:	0018      	movs	r0, r3
 80005a0:	2314      	movs	r3, #20
 80005a2:	001a      	movs	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f003 fba1 	bl	8003cec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_GPIO_Init+0xbc>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_GPIO_Init+0xbc>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0289      	lsls	r1, r1, #10
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <MX_GPIO_Init+0xbc>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	029b      	lsls	r3, r3, #10
 80005c0:	4013      	ands	r3, r2
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_GPIO_Init+0xbc>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_GPIO_Init+0xbc>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	02c9      	lsls	r1, r1, #11
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <MX_GPIO_Init+0xbc>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	02db      	lsls	r3, r3, #11
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005e2:	2390      	movs	r3, #144	; 0x90
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2200      	movs	r2, #0
 80005e8:	2110      	movs	r1, #16
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 ffbc 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_GPIO_Init+0xc0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	2108      	movs	r1, #8
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 ffb6 	bl	8001568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2210      	movs	r2, #16
 8000600:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2201      	movs	r2, #1
 8000606:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	193a      	adds	r2, r7, r4
 8000616:	2390      	movs	r3, #144	; 0x90
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fe3b 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000622:	0021      	movs	r1, r4
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2208      	movs	r2, #8
 8000628:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2201      	movs	r2, #1
 800062e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	187b      	adds	r3, r7, r1
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <MX_GPIO_Init+0xc0>)
 8000640:	0019      	movs	r1, r3
 8000642:	0010      	movs	r0, r2
 8000644:	f000 fe28 	bl	8001298 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b009      	add	sp, #36	; 0x24
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	40021000 	.word	0x40021000
 8000654:	48000400 	.word	0x48000400

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <Error_Handler+0x8>
	...

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_MspInit+0x44>)
 800066c:	699a      	ldr	r2, [r3, #24]
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_MspInit+0x44>)
 8000670:	2101      	movs	r1, #1
 8000672:	430a      	orrs	r2, r1
 8000674:	619a      	str	r2, [r3, #24]
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_MspInit+0x44>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	2201      	movs	r2, #1
 800067c:	4013      	ands	r3, r2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_MspInit+0x44>)
 8000684:	69da      	ldr	r2, [r3, #28]
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_MspInit+0x44>)
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	0549      	lsls	r1, r1, #21
 800068c:	430a      	orrs	r2, r1
 800068e:	61da      	str	r2, [r3, #28]
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_MspInit+0x44>)
 8000692:	69da      	ldr	r2, [r3, #28]
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	055b      	lsls	r3, r3, #21
 8000698:	4013      	ands	r3, r2
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <HAL_RTC_MspInit+0x28>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d106      	bne.n	80006cc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_RTC_MspInit+0x2c>)
 80006c0:	6a1a      	ldr	r2, [r3, #32]
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_RTC_MspInit+0x2c>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0209      	lsls	r1, r1, #8
 80006c8:	430a      	orrs	r2, r1
 80006ca:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b002      	add	sp, #8
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40002800 	.word	0x40002800
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b08b      	sub	sp, #44	; 0x2c
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	2414      	movs	r4, #20
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	0018      	movs	r0, r3
 80006ea:	2314      	movs	r3, #20
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f003 fafc 	bl	8003cec <memset>
  if(hspi->Instance==SPI1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <HAL_SPI_MspInit+0xa0>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d13a      	bne.n	8000774 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <HAL_SPI_MspInit+0xa4>)
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <HAL_SPI_MspInit+0xa4>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0149      	lsls	r1, r1, #5
 8000708:	430a      	orrs	r2, r1
 800070a:	619a      	str	r2, [r3, #24]
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <HAL_SPI_MspInit+0xa4>)
 800070e:	699a      	ldr	r2, [r3, #24]
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	015b      	lsls	r3, r3, #5
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_SPI_MspInit+0xa4>)
 800071c:	695a      	ldr	r2, [r3, #20]
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_SPI_MspInit+0xa4>)
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	0289      	lsls	r1, r1, #10
 8000724:	430a      	orrs	r2, r1
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_SPI_MspInit+0xa4>)
 800072a:	695a      	ldr	r2, [r3, #20]
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	029b      	lsls	r3, r3, #10
 8000730:	4013      	ands	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22e0      	movs	r2, #224	; 0xe0
 800073c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2202      	movs	r2, #2
 8000742:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2203      	movs	r2, #3
 800074e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	187a      	adds	r2, r7, r1
 8000758:	2390      	movs	r3, #144	; 0x90
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	0011      	movs	r1, r2
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fd9a 	bl	8001298 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2019      	movs	r0, #25
 800076a:	f000 fd1d 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800076e:	2019      	movs	r0, #25
 8000770:	f000 fd2f 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b00b      	add	sp, #44	; 0x2c
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	40013000 	.word	0x40013000
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <HAL_TIM_Base_MspInit+0x58>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d11d      	bne.n	80007d2 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_TIM_Base_MspInit+0x5c>)
 8000798:	699a      	ldr	r2, [r3, #24]
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_TIM_Base_MspInit+0x5c>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0109      	lsls	r1, r1, #4
 80007a0:	430a      	orrs	r2, r1
 80007a2:	619a      	str	r2, [r3, #24]
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_TIM_Base_MspInit+0x5c>)
 80007a6:	699a      	ldr	r2, [r3, #24]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	011b      	lsls	r3, r3, #4
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	200d      	movs	r0, #13
 80007b8:	f000 fcf6 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80007bc:	200d      	movs	r0, #13
 80007be:	f000 fd08 	bl	80011d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200e      	movs	r0, #14
 80007c8:	f000 fcee 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80007cc:	200e      	movs	r0, #14
 80007ce:	f000 fd00 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	40012c00 	.word	0x40012c00
 80007e0:	40021000 	.word	0x40021000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <NMI_Handler+0x4>

080007ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <HardFault_Handler+0x4>

080007f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 fc06 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800081a:	0018      	movs	r0, r3
 800081c:	f002 fee4 	bl	80035e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	200000b8 	.word	0x200000b8

0800082c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <TIM1_CC_IRQHandler+0x14>)
 8000832:	0018      	movs	r0, r3
 8000834:	f002 fed8 	bl	80035e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	200000b8 	.word	0x200000b8

08000844 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <SPI1_IRQHandler+0x14>)
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fba0 	bl	8002f90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	20000054 	.word	0x20000054

0800085c <get_irq2_register>:
}


//Gets the IRQ2 Register Status
uint8_t get_irq2_register(SPI_HandleTypeDef *hspi)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	return spi_single_read(hspi, REG_IRQFLAGS2);;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	213f      	movs	r1, #63	; 0x3f
 8000868:	0018      	movs	r0, r3
 800086a:	f000 f837 	bl	80008dc <spi_single_read>
 800086e:	0003      	movs	r3, r0
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}

08000878 <spi_single_write>:


//This Writes to a single register
void spi_single_write(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	0008      	movs	r0, r1
 8000882:	0011      	movs	r1, r2
 8000884:	1cfb      	adds	r3, r7, #3
 8000886:	1c02      	adds	r2, r0, #0
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	1cbb      	adds	r3, r7, #2
 800088c:	1c0a      	adds	r2, r1, #0
 800088e:	701a      	strb	r2, [r3, #0]
	address |= WRITE_MASK;
 8000890:	1cfb      	adds	r3, r7, #3
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	4252      	negs	r2, r2
 8000898:	4313      	orrs	r3, r2
 800089a:	b2da      	uxtb	r2, r3
 800089c:	1cfb      	adds	r3, r7, #3
 800089e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 80008a0:	2390      	movs	r3, #144	; 0x90
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	2200      	movs	r2, #0
 80008a6:	2110      	movs	r1, #16
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 fe5d 	bl	8001568 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 80008ae:	1cf9      	adds	r1, r7, #3
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	f001 fed7 	bl	8002668 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &data, sizeof(data), 100);
 80008ba:	1cb9      	adds	r1, r7, #2
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	2364      	movs	r3, #100	; 0x64
 80008c0:	2201      	movs	r2, #1
 80008c2:	f001 fed1 	bl	8002668 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 80008c6:	2390      	movs	r3, #144	; 0x90
 80008c8:	05db      	lsls	r3, r3, #23
 80008ca:	2201      	movs	r2, #1
 80008cc:	2110      	movs	r1, #16
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fe4a 	bl	8001568 <HAL_GPIO_WritePin>
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}

080008dc <spi_single_read>:

//This reads a single register
uint8_t spi_single_read(SPI_HandleTypeDef *hspi, uint8_t address)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	000a      	movs	r2, r1
 80008e6:	1cfb      	adds	r3, r7, #3
 80008e8:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;
	address &= READ_MASK;
 80008ea:	1cfb      	adds	r3, r7, #3
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	227f      	movs	r2, #127	; 0x7f
 80008f0:	4013      	ands	r3, r2
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	1cfb      	adds	r3, r7, #3
 80008f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 80008f8:	2390      	movs	r3, #144	; 0x90
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fe31 	bl	8001568 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 8000906:	1cf9      	adds	r1, r7, #3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	2201      	movs	r2, #1
 800090e:	f001 feab 	bl	8002668 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, sizeof(rx_data), 100);
 8000912:	240f      	movs	r4, #15
 8000914:	1939      	adds	r1, r7, r4
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	2364      	movs	r3, #100	; 0x64
 800091a:	2201      	movs	r2, #1
 800091c:	f002 f804 	bl	8002928 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 8000920:	2390      	movs	r3, #144	; 0x90
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	2201      	movs	r2, #1
 8000926:	2110      	movs	r1, #16
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fe1d 	bl	8001568 <HAL_GPIO_WritePin>
	return rx_data;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	781b      	ldrb	r3, [r3, #0]
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b005      	add	sp, #20
 8000938:	bd90      	pop	{r4, r7, pc}

0800093a <sx1278_struct_init>:

//Only Change Below if the Value is different
//From the default setting in Datasheet
void sx1278_struct_init(SX1278 *radio)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	//Common Settings
	radio->RegOpMode |= RF_OPMODE_SLEEP | RF_OPMODE_FREQMODE_ACCESS_LF;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	2208      	movs	r2, #8
 8000948:	4313      	orrs	r3, r2
 800094a:	b2da      	uxtb	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	705a      	strb	r2, [r3, #1]
	radio->RegBitrateMsb |= RF_BITRATEMSB_250000_BPS;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	789a      	ldrb	r2, [r3, #2]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	709a      	strb	r2, [r3, #2]
	radio->RegBitrateLsb |= RF_BITRATELSB_250000_BPS;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	78db      	ldrb	r3, [r3, #3]
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	4252      	negs	r2, r2
 8000960:	4313      	orrs	r3, r2
 8000962:	b2da      	uxtb	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	70da      	strb	r2, [r3, #3]
	//You Have to Calculate with Eqs on Datasheet
	radio->RegFrfMsb = 0x6c;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	226c      	movs	r2, #108	; 0x6c
 800096c:	719a      	strb	r2, [r3, #6]
	radio->RegFrfMid = 0x80;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	71da      	strb	r2, [r3, #7]
	radio->RegFrfLsb = 0x00;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	721a      	strb	r2, [r3, #8]
	//TX/RX Settings
	radio->RegPaConfig |= RF_PACONFIG_PASELECT_RFO | 0x04 | 0x0f;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7a5b      	ldrb	r3, [r3, #9]
 800097e:	220f      	movs	r2, #15
 8000980:	4313      	orrs	r3, r2
 8000982:	b2da      	uxtb	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	725a      	strb	r2, [r3, #9]
	radio->RegPaRamp |= 0x00;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7a9a      	ldrb	r2, [r3, #10]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	729a      	strb	r2, [r3, #10]
	radio->RegLna |= RF_LNA_GAIN_G6;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7b1b      	ldrb	r3, [r3, #12]
 8000994:	2240      	movs	r2, #64	; 0x40
 8000996:	4252      	negs	r2, r2
 8000998:	4313      	orrs	r3, r2
 800099a:	b2da      	uxtb	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	731a      	strb	r2, [r3, #12]
	radio->RegFdevMsb |= 0b00111010;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	791b      	ldrb	r3, [r3, #4]
 80009a4:	223a      	movs	r2, #58	; 0x3a
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	711a      	strb	r2, [r3, #4]
	//TCXO Settings:
	radio->RegTcxo = RF_TCXO_TCXOINPUT_ON;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2258      	movs	r2, #88	; 0x58
 80009b2:	2110      	movs	r1, #16
 80009b4:	5499      	strb	r1, [r3, r2]
	radio->RegFifoThresh |=  0x0b00111111;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2235      	movs	r2, #53	; 0x35
 80009ba:	5c9b      	ldrb	r3, [r3, r2]
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	2211      	movs	r2, #17
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b25b      	sxtb	r3, r3
 80009c4:	b2d9      	uxtb	r1, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2235      	movs	r2, #53	; 0x35
 80009ca:	5499      	strb	r1, [r3, r2]
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <sx1278_read_all_registers>:

//This gets the status of all registers.
//Mainly for init purposes
uint8_t sx1278_read_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3301      	adds	r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 80009e4:	2317      	movs	r3, #23
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	e013      	b.n	8000a16 <sx1278_read_all_registers+0x42>
	{
		*(struct_ptr + ((reg-1))) = spi_single_read(hspi, reg);
 80009ee:	2517      	movs	r5, #23
 80009f0:	197b      	adds	r3, r7, r5
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	18d4      	adds	r4, r2, r3
 80009fa:	197b      	adds	r3, r7, r5
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff ff6a 	bl	80008dc <spi_single_read>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	7023      	strb	r3, [r4, #0]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000a0c:	197b      	adds	r3, r7, r5
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	197b      	adds	r3, r7, r5
 8000a12:	3201      	adds	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	2317      	movs	r3, #23
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b70      	cmp	r3, #112	; 0x70
 8000a1e:	d9e6      	bls.n	80009ee <sx1278_read_all_registers+0x1a>
	}
	uint8_t temp = spi_single_read(hspi, REG_VERSION);
 8000a20:	250f      	movs	r5, #15
 8000a22:	197c      	adds	r4, r7, r5
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	2142      	movs	r1, #66	; 0x42
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f7ff ff57 	bl	80008dc <spi_single_read>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	7023      	strb	r3, [r4, #0]
	if(temp == CHIP_VERSION)
 8000a32:	197b      	adds	r3, r7, r5
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b12      	cmp	r3, #18
 8000a38:	d101      	bne.n	8000a3e <sx1278_read_all_registers+0x6a>
	{
		return 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <sx1278_read_all_registers+0x6c>
	}
	return 0;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b006      	add	sp, #24
 8000a46:	bdb0      	pop	{r4, r5, r7, pc}

08000a48 <sx1278_write_all_registers>:

//This Function updates all registers with the desired configuration
//Probably will be only used for init and major function changes.
uint8_t sx1278_write_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 8000a48:	b5b0      	push	{r4, r5, r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000a58:	2317      	movs	r3, #23
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e013      	b.n	8000a8a <sx1278_write_all_registers+0x42>
		{
			spi_single_write(hspi, reg, *(struct_ptr + ((reg-1))));
 8000a62:	2117      	movs	r1, #23
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	18d3      	adds	r3, r2, r3
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	000c      	movs	r4, r1
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	7819      	ldrb	r1, [r3, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fefd 	bl	8000878 <spi_single_write>
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000a7e:	0021      	movs	r1, r4
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	3201      	adds	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	2317      	movs	r3, #23
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b70      	cmp	r3, #112	; 0x70
 8000a92:	d9e6      	bls.n	8000a62 <sx1278_write_all_registers+0x1a>
		}
	uint8_t temp = spi_single_read(hspi, REG_OPMODE);
 8000a94:	250f      	movs	r5, #15
 8000a96:	197c      	adds	r4, r7, r5
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff ff1d 	bl	80008dc <spi_single_read>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	7023      	strb	r3, [r4, #0]
	if(radio->RegOpMode == temp)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	197a      	adds	r2, r7, r5
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d101      	bne.n	8000ab6 <sx1278_write_all_registers+0x6e>
	{
		return 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <sx1278_write_all_registers+0x70>
	}
	return 0;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b006      	add	sp, #24
 8000abe:	bdb0      	pop	{r4, r5, r7, pc}

08000ac0 <sx1278_mem_init>:

void sx1278_mem_init(SPI_HandleTypeDef *hspi, radio *radio)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	// Set for the SX App
	radio->tx_flags.tx_init = 0;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2271      	movs	r2, #113	; 0x71
 8000ace:	2100      	movs	r1, #0
 8000ad0:	5499      	strb	r1, [r3, r2]
	radio->tx_flags.tx_inp= 0;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2272      	movs	r2, #114	; 0x72
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	5499      	strb	r1, [r3, r2]
	radio->tx_buffer_prog = 0;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	4a03      	ldr	r2, [pc, #12]	; (8000aec <sx1278_mem_init+0x2c>)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	5499      	strb	r1, [r3, r2]
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	00000475 	.word	0x00000475

08000af0 <sx1278_init>:

//General Init Function for the Module.
uint8_t sx1278_init(radio *radio, SPI_HandleTypeDef *hspi)
{
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
	uint8_t timeout_counter = 0;
 8000afa:	230f      	movs	r3, #15
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000b02:	230e      	movs	r3, #14
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000b0a:	e015      	b.n	8000b38 <sx1278_init+0x48>
	{
		stat = sx1278_read_all_registers(&(radio->radio), hspi);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	220e      	movs	r2, #14
 8000b10:	18bc      	adds	r4, r7, r2
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff ff5c 	bl	80009d4 <sx1278_read_all_registers>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000b20:	210f      	movs	r1, #15
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	3201      	adds	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b64      	cmp	r3, #100	; 0x64
 8000b32:	d101      	bne.n	8000b38 <sx1278_init+0x48>
		{
			return 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e03d      	b.n	8000bb4 <sx1278_init+0xc4>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000b38:	230e      	movs	r3, #14
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <sx1278_init+0x5c>
 8000b42:	230f      	movs	r3, #15
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b64      	cmp	r3, #100	; 0x64
 8000b4a:	d9df      	bls.n	8000b0c <sx1278_init+0x1c>
		}
	}
	timeout_counter = 0;
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
	stat = 0;
 8000b54:	230e      	movs	r3, #14
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
	sx1278_struct_init(&(radio->radio));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff feeb 	bl	800093a <sx1278_struct_init>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000b64:	e015      	b.n	8000b92 <sx1278_init+0xa2>
	{
		timeout_counter++;
 8000b66:	250f      	movs	r5, #15
 8000b68:	197b      	adds	r3, r7, r5
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	197b      	adds	r3, r7, r5
 8000b6e:	3201      	adds	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
		stat = sx1278_write_all_registers(&(radio->radio), hspi);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	220e      	movs	r2, #14
 8000b76:	18bc      	adds	r4, r7, r2
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f7ff ff63 	bl	8000a48 <sx1278_write_all_registers>
 8000b82:	0003      	movs	r3, r0
 8000b84:	7023      	strb	r3, [r4, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000b86:	197b      	adds	r3, r7, r5
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b64      	cmp	r3, #100	; 0x64
 8000b8c:	d101      	bne.n	8000b92 <sx1278_init+0xa2>
		{
			return 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e010      	b.n	8000bb4 <sx1278_init+0xc4>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000b92:	230e      	movs	r3, #14
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <sx1278_init+0xb6>
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b64      	cmp	r3, #100	; 0x64
 8000ba4:	d9df      	bls.n	8000b66 <sx1278_init+0x76>
		}
	}
	sx1278_mem_init(hspi, radio);
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ff87 	bl	8000ac0 <sx1278_mem_init>
	return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b004      	add	sp, #16
 8000bba:	bdb0      	pop	{r4, r5, r7, pc}

08000bbc <sx1278_fifo_fill>:

uint8_t sx1278_fifo_fill(SPI_HandleTypeDef *hspi, uint8_t* data)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
	uint8_t address_packet = WRITE_MASK | REG_FIFO;
 8000bc6:	230e      	movs	r3, #14
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	701a      	strb	r2, [r3, #0]
 	for(uint8_t i = 0; i < DATA_SIZE; i++)
 8000bce:	230f      	movs	r3, #15
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e011      	b.n	8000bfc <sx1278_fifo_fill+0x40>
	{
 		spi_single_write(hspi, address_packet, data[i]);
 8000bd8:	240f      	movs	r4, #15
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	230e      	movs	r3, #14
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	7819      	ldrb	r1, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fe43 	bl	8000878 <spi_single_write>
 	for(uint8_t i = 0; i < DATA_SIZE; i++)
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	3201      	adds	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b3f      	cmp	r3, #63	; 0x3f
 8000c04:	d9e8      	bls.n	8000bd8 <sx1278_fifo_fill+0x1c>
	}
 	if((get_irq2_register(hspi) & 0x00100000 )== 0x00100000)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fe27 	bl	800085c <get_irq2_register>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	001a      	movs	r2, r3
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	035b      	lsls	r3, r3, #13
 8000c16:	401a      	ands	r2, r3
 8000c18:	2380      	movs	r3, #128	; 0x80
 8000c1a:	035b      	lsls	r3, r3, #13
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d101      	bne.n	8000c24 <sx1278_fifo_fill+0x68>
	{
 		//If Fifo is filled tell the higher level and adjust the tx_buffer.
 		return 1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e000      	b.n	8000c26 <sx1278_fifo_fill+0x6a>
	}
	return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b005      	add	sp, #20
 8000c2c:	bd90      	pop	{r4, r7, pc}

08000c2e <change_opmode>:

uint8_t change_opmode(SX1278 *radio, SPI_HandleTypeDef *hspi, radio_state new_mode)
{
 8000c2e:	b590      	push	{r4, r7, lr}
 8000c30:	b087      	sub	sp, #28
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	701a      	strb	r2, [r3, #0]
	uint8_t timeout_counter = 0;
 8000c3c:	2317      	movs	r3, #23
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000c44:	2316      	movs	r3, #22
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000c4c:	e015      	b.n	8000c7a <change_opmode+0x4c>
	{
		stat = sx1278_read_all_registers(radio, hspi);
 8000c4e:	2316      	movs	r3, #22
 8000c50:	18fc      	adds	r4, r7, r3
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff febb 	bl	80009d4 <sx1278_read_all_registers>
 8000c5e:	0003      	movs	r3, r0
 8000c60:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000c62:	2117      	movs	r1, #23
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	3201      	adds	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d101      	bne.n	8000c7a <change_opmode+0x4c>
		{
			return 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e01c      	b.n	8000cb4 <change_opmode+0x86>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000c7a:	2316      	movs	r3, #22
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d104      	bne.n	8000c8e <change_opmode+0x60>
 8000c84:	2317      	movs	r3, #23
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b64      	cmp	r3, #100	; 0x64
 8000c8c:	d9df      	bls.n	8000c4e <change_opmode+0x20>
		}
	}
	uint8_t temp_mode = RF_OPMODE_MODULATIONTYPE_FSK |
 8000c8e:	2015      	movs	r0, #21
 8000c90:	183b      	adds	r3, r7, r0
 8000c92:	1dfa      	adds	r2, r7, #7
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	2108      	movs	r1, #8
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	701a      	strb	r2, [r3, #0]
			RF_OPMODE_FREQMODE_ACCESS_LF |new_mode;
	radio->RegOpMode = temp_mode;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	183a      	adds	r2, r7, r0
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	705a      	strb	r2, [r3, #1]
	spi_single_write(hspi, REG_OPMODE, (radio->RegOpMode));
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	785a      	ldrb	r2, [r3, #1]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2101      	movs	r1, #1
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff fde3 	bl	8000878 <spi_single_write>
	return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b007      	add	sp, #28
 8000cba:	bd90      	pop	{r4, r7, pc}

08000cbc <packet>:

void packet(radio* radio, uint8_t *dat)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b095      	sub	sp, #84	; 0x54
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	uint8_t packet_to_send[DATA_SIZE];
	uint8_t remaining = radio->tx_buffer_size - radio->tx_buffer_prog;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a46      	ldr	r2, [pc, #280]	; (8000de4 <packet+0x128>)
 8000cca:	5c99      	ldrb	r1, [r3, r2]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a46      	ldr	r2, [pc, #280]	; (8000de8 <packet+0x12c>)
 8000cd0:	5c9a      	ldrb	r2, [r3, r2]
 8000cd2:	204e      	movs	r0, #78	; 0x4e
 8000cd4:	183b      	adds	r3, r7, r0
 8000cd6:	1a8a      	subs	r2, r1, r2
 8000cd8:	701a      	strb	r2, [r3, #0]
	if(remaining > DATA_SIZE)
 8000cda:	183b      	adds	r3, r7, r0
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b40      	cmp	r3, #64	; 0x40
 8000ce0:	d917      	bls.n	8000d12 <packet+0x56>
	{
		memcpy(packet_to_send, &(radio->tx_buffer[radio->tx_buffer_prog]), DATA_SIZE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a40      	ldr	r2, [pc, #256]	; (8000de8 <packet+0x12c>)
 8000ce6:	5c9b      	ldrb	r3, [r3, r2]
 8000ce8:	3370      	adds	r3, #112	; 0x70
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	3304      	adds	r3, #4
 8000cf0:	220c      	movs	r2, #12
 8000cf2:	18ba      	adds	r2, r7, r2
 8000cf4:	0010      	movs	r0, r2
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	f003 f822 	bl	8003d44 <memcpy>
		radio->tx_buffer_prog += DATA_SIZE;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a39      	ldr	r2, [pc, #228]	; (8000de8 <packet+0x12c>)
 8000d04:	5c9b      	ldrb	r3, [r3, r2]
 8000d06:	3340      	adds	r3, #64	; 0x40
 8000d08:	b2d9      	uxtb	r1, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <packet+0x12c>)
 8000d0e:	5499      	strb	r1, [r3, r2]
 8000d10:	e05a      	b.n	8000dc8 <packet+0x10c>
	}
	else if(remaining == DATA_SIZE)
 8000d12:	234e      	movs	r3, #78	; 0x4e
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b40      	cmp	r3, #64	; 0x40
 8000d1a:	d11b      	bne.n	8000d54 <packet+0x98>
	{
		//If there are 64 bytes of data left in the buffer just return the buffer
		memcpy(packet_to_send, &(radio->tx_buffer[radio->tx_buffer_prog]), DATA_SIZE);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a32      	ldr	r2, [pc, #200]	; (8000de8 <packet+0x12c>)
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	3370      	adds	r3, #112	; 0x70
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	3304      	adds	r3, #4
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	0010      	movs	r0, r2
 8000d30:	0019      	movs	r1, r3
 8000d32:	2340      	movs	r3, #64	; 0x40
 8000d34:	001a      	movs	r2, r3
 8000d36:	f003 f805 	bl	8003d44 <memcpy>
		//This is last packet in buffer take out of tx
		radio->tx_buffer_size = 0;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <packet+0x128>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	5499      	strb	r1, [r3, r2]
		radio->tx_buffer_prog = 0;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <packet+0x12c>)
 8000d46:	2100      	movs	r1, #0
 8000d48:	5499      	strb	r1, [r3, r2]
		radio->tx_flags.tx_inp = 0;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2272      	movs	r2, #114	; 0x72
 8000d4e:	2100      	movs	r1, #0
 8000d50:	5499      	strb	r1, [r3, r2]
 8000d52:	e039      	b.n	8000dc8 <packet+0x10c>
	}
	else if(remaining < DATA_SIZE)
 8000d54:	204e      	movs	r0, #78	; 0x4e
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d5c:	d834      	bhi.n	8000dc8 <packet+0x10c>
	{
		memcpy(packet_to_send, &(radio->tx_buffer[radio->tx_buffer_prog]), DATA_SIZE - remaining);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a21      	ldr	r2, [pc, #132]	; (8000de8 <packet+0x12c>)
 8000d62:	5c9b      	ldrb	r3, [r3, r2]
 8000d64:	3370      	adds	r3, #112	; 0x70
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	1d19      	adds	r1, r3, #4
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2240      	movs	r2, #64	; 0x40
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	001a      	movs	r2, r3
 8000d78:	230c      	movs	r3, #12
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f002 ffe1 	bl	8003d44 <memcpy>
		for(uint8_t place = remaining; place < DATA_SIZE; place++)
 8000d82:	234f      	movs	r3, #79	; 0x4f
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	193a      	adds	r2, r7, r4
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	701a      	strb	r2, [r3, #0]
 8000d8c:	e00b      	b.n	8000da6 <packet+0xea>
		{
			packet_to_send[place] = '\0';
 8000d8e:	204f      	movs	r0, #79	; 0x4f
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	220c      	movs	r2, #12
 8000d96:	18ba      	adds	r2, r7, r2
 8000d98:	2100      	movs	r1, #0
 8000d9a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t place = remaining; place < DATA_SIZE; place++)
 8000d9c:	183b      	adds	r3, r7, r0
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	183b      	adds	r3, r7, r0
 8000da2:	3201      	adds	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	234f      	movs	r3, #79	; 0x4f
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b3f      	cmp	r3, #63	; 0x3f
 8000dae:	d9ee      	bls.n	8000d8e <packet+0xd2>
		}
		//This is last packet in buffer take out of tx
		radio->tx_buffer_size = 0;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <packet+0x128>)
 8000db4:	2100      	movs	r1, #0
 8000db6:	5499      	strb	r1, [r3, r2]
		radio->tx_buffer_prog = 0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <packet+0x12c>)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	5499      	strb	r1, [r3, r2]
		radio->tx_flags.tx_inp = 0;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2272      	movs	r2, #114	; 0x72
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	5499      	strb	r1, [r3, r2]
	}
	memcpy(dat, packet_to_send, DATA_SIZE);
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	230c      	movs	r3, #12
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	0010      	movs	r0, r2
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	2340      	movs	r3, #64	; 0x40
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	f002 ffb5 	bl	8003d44 <memcpy>
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b015      	add	sp, #84	; 0x54
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	00000474 	.word	0x00000474
 8000de8:	00000475 	.word	0x00000475

08000dec <SX1278_APP>:
//This Function fills the FIFO with the input data and sets the opmode to transmit.
//It will be up to the app to check when the tx is done.
void SX1278_APP(radio *radio, SPI_HandleTypeDef *hspi)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b093      	sub	sp, #76	; 0x4c
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	switch(radio->sx_state)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2270      	movs	r2, #112	; 0x70
 8000dfa:	5c9b      	ldrb	r3, [r3, r2]
 8000dfc:	2b05      	cmp	r3, #5
 8000dfe:	d100      	bne.n	8000e02 <SX1278_APP+0x16>
 8000e00:	e085      	b.n	8000f0e <SX1278_APP+0x122>
 8000e02:	dd00      	ble.n	8000e06 <SX1278_APP+0x1a>
 8000e04:	e086      	b.n	8000f14 <SX1278_APP+0x128>
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d002      	beq.n	8000e10 <SX1278_APP+0x24>
 8000e0a:	dd00      	ble.n	8000e0e <SX1278_APP+0x22>
 8000e0c:	e082      	b.n	8000f14 <SX1278_APP+0x128>
	{
	case SLEEP:
		break;
 8000e0e:	e081      	b.n	8000f14 <SX1278_APP+0x128>
	case STANDBY:
		break;
	case TRANSMITTER:
		if(radio->tx_flags.tx_init == 0)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2271      	movs	r2, #113	; 0x71
 8000e14:	5c9b      	ldrb	r3, [r3, r2]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d11f      	bne.n	8000e5a <SX1278_APP+0x6e>
		{
			// If the Radio has not been initialized for TX Set DIO  & FiFo thresh
			//The Following Sets the TX Start to condition to anything above 0 & the thresh to datasize.
			radio->radio.RegFifoThresh = RF_FIFOTHRESH_TXSTARTCONDITION_FIFONOTEMPTY | (DATA_SIZE-1);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2235      	movs	r2, #53	; 0x35
 8000e1e:	21bf      	movs	r1, #191	; 0xbf
 8000e20:	5499      	strb	r1, [r3, r2]
			spi_single_write(hspi, REG_FIFOTHRESH, radio->radio.RegFifoThresh);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2235      	movs	r2, #53	; 0x35
 8000e26:	5c9a      	ldrb	r2, [r3, r2]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2135      	movs	r1, #53	; 0x35
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fd23 	bl	8000878 <spi_single_write>
			change_opmode(&(radio->radio), hspi, TRANSMITTER);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	2202      	movs	r2, #2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fef8 	bl	8000c2e <change_opmode>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000e3e:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <SX1278_APP+0x130>)
 8000e40:	2108      	movs	r1, #8
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 fbad 	bl	80015a2 <HAL_GPIO_TogglePin>
			radio->tx_flags.tx_init = 1;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2271      	movs	r2, #113	; 0x71
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	5499      	strb	r1, [r3, r2]
			//How my brain works fuck you
			radio->tx_flags.tx_inp = 1;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2272      	movs	r2, #114	; 0x72
 8000e54:	2101      	movs	r1, #1
 8000e56:	5499      	strb	r1, [r3, r2]
			radio->tx_flags.tx_fifo_full = 0;
			radio->sx_state = STANDBY;
			change_opmode(&(radio->radio), hspi, STANDBY);
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		}
		break;
 8000e58:	e05b      	b.n	8000f12 <SX1278_APP+0x126>
		else if(radio->tx_flags.tx_inp == 1)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2272      	movs	r2, #114	; 0x72
 8000e5e:	5c9b      	ldrb	r3, [r3, r2]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d130      	bne.n	8000ec6 <SX1278_APP+0xda>
			if(radio->tx_flags.tx_fifo_full == 0)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2273      	movs	r2, #115	; 0x73
 8000e68:	5c9b      	ldrb	r3, [r3, r2]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d114      	bne.n	8000e98 <SX1278_APP+0xac>
				packet(radio, packet_to_send);
 8000e6e:	2408      	movs	r4, #8
 8000e70:	193a      	adds	r2, r7, r4
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0011      	movs	r1, r2
 8000e76:	0018      	movs	r0, r3
 8000e78:	f7ff ff20 	bl	8000cbc <packet>
				if(sx1278_fifo_fill(hspi, packet_to_send) == 1)
 8000e7c:	193a      	adds	r2, r7, r4
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	0011      	movs	r1, r2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f7ff fe9a 	bl	8000bbc <sx1278_fifo_fill>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d141      	bne.n	8000f12 <SX1278_APP+0x126>
					radio->tx_flags.tx_fifo_full = 1;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2273      	movs	r2, #115	; 0x73
 8000e92:	2101      	movs	r1, #1
 8000e94:	5499      	strb	r1, [r3, r2]
		break;
 8000e96:	e03c      	b.n	8000f12 <SX1278_APP+0x126>
			else if(radio->tx_flags.tx_fifo_full == 1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2273      	movs	r2, #115	; 0x73
 8000e9c:	5c9b      	ldrb	r3, [r3, r2]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d137      	bne.n	8000f12 <SX1278_APP+0x126>
				if((get_irq2_register(hspi) & 0x01000000 )== 0x01000000)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fcd9 	bl	800085c <get_irq2_register>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	001a      	movs	r2, r3
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	045b      	lsls	r3, r3, #17
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	045b      	lsls	r3, r3, #17
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d12a      	bne.n	8000f12 <SX1278_APP+0x126>
					radio->tx_flags.tx_fifo_full = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2273      	movs	r2, #115	; 0x73
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	5499      	strb	r1, [r3, r2]
		break;
 8000ec4:	e025      	b.n	8000f12 <SX1278_APP+0x126>
			radio->tx_buffer_size = 0;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <SX1278_APP+0x134>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	5499      	strb	r1, [r3, r2]
			radio->tx_buffer_prog = 0;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <SX1278_APP+0x138>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	5499      	strb	r1, [r3, r2]
			radio->tx_flags.tx_init = 0;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2271      	movs	r2, #113	; 0x71
 8000eda:	2100      	movs	r1, #0
 8000edc:	5499      	strb	r1, [r3, r2]
			radio->tx_flags.tx_inp = 0;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2272      	movs	r2, #114	; 0x72
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	5499      	strb	r1, [r3, r2]
			radio->tx_flags.tx_fifo_full = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2273      	movs	r2, #115	; 0x73
 8000eea:	2100      	movs	r1, #0
 8000eec:	5499      	strb	r1, [r3, r2]
			radio->sx_state = STANDBY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2270      	movs	r2, #112	; 0x70
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	5499      	strb	r1, [r3, r2]
			change_opmode(&(radio->radio), hspi, STANDBY);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6839      	ldr	r1, [r7, #0]
 8000efa:	2201      	movs	r2, #1
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff fe96 	bl	8000c2e <change_opmode>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SX1278_APP+0x130>)
 8000f04:	2108      	movs	r1, #8
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fb4b 	bl	80015a2 <HAL_GPIO_TogglePin>
		break;
 8000f0c:	e001      	b.n	8000f12 <SX1278_APP+0x126>
	case RECEIVER:
		break;
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	e000      	b.n	8000f14 <SX1278_APP+0x128>
		break;
 8000f12:	46c0      	nop			; (mov r8, r8)
	}

}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b013      	add	sp, #76	; 0x4c
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	48000400 	.word	0x48000400
 8000f20:	00000474 	.word	0x00000474
 8000f24:	00000475 	.word	0x00000475

08000f28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f38:	f7ff fff6 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	; (8000f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <LoopForever+0xe>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	; (8000f80 <LoopForever+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f62:	f002 fecb 	bl	8003cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f66:	f7ff f991 	bl	800028c <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
  ldr   r0, =_estack
 8000f6c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f78:	08003da8 	.word	0x08003da8
  ldr r2, =_sbss
 8000f7c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f80:	2000057c 	.word	0x2000057c

08000f84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_IRQHandler>
	...

08000f88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <HAL_Init+0x24>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_Init+0x24>)
 8000f92:	2110      	movs	r1, #16
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f809 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9e:	f7ff fb61 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	40022000 	.word	0x40022000

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_InitTick+0x5c>)
 8000fba:	681c      	ldr	r4, [r3, #0]
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_InitTick+0x60>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	23fa      	movs	r3, #250	; 0xfa
 8000fc4:	0098      	lsls	r0, r3, #2
 8000fc6:	f7ff f89f 	bl	8000108 <__udivsi3>
 8000fca:	0003      	movs	r3, r0
 8000fcc:	0019      	movs	r1, r3
 8000fce:	0020      	movs	r0, r4
 8000fd0:	f7ff f89a 	bl	8000108 <__udivsi3>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 f90b 	bl	80011f2 <HAL_SYSTICK_Config>
 8000fdc:	1e03      	subs	r3, r0, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e00f      	b.n	8001004 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d80b      	bhi.n	8001002 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	2301      	movs	r3, #1
 8000fee:	425b      	negs	r3, r3
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 f8d8 	bl	80011a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_InitTick+0x64>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b003      	add	sp, #12
 800100a:	bd90      	pop	{r4, r7, pc}
 800100c:	2000000c 	.word	0x2000000c
 8001010:	20000014 	.word	0x20000014
 8001014:	20000010 	.word	0x20000010

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x1c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	001a      	movs	r2, r3
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x20>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	18d2      	adds	r2, r2, r3
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_IncTick+0x20>)
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	20000014 	.word	0x20000014
 8001038:	20000578 	.word	0x20000578

0800103c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <HAL_GetTick+0x10>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	20000578 	.word	0x20000578

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	0002      	movs	r2, r0
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b7f      	cmp	r3, #127	; 0x7f
 8001062:	d809      	bhi.n	8001078 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	001a      	movs	r2, r3
 800106a:	231f      	movs	r3, #31
 800106c:	401a      	ands	r2, r3
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_EnableIRQ+0x30>)
 8001070:	2101      	movs	r1, #1
 8001072:	4091      	lsls	r1, r2
 8001074:	000a      	movs	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
  }
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	0002      	movs	r2, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b7f      	cmp	r3, #127	; 0x7f
 8001098:	d828      	bhi.n	80010ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109a:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <__NVIC_SetPriority+0xd4>)
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	33c0      	adds	r3, #192	; 0xc0
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	589b      	ldr	r3, [r3, r2]
 80010aa:	1dfa      	adds	r2, r7, #7
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	0011      	movs	r1, r2
 80010b0:	2203      	movs	r2, #3
 80010b2:	400a      	ands	r2, r1
 80010b4:	00d2      	lsls	r2, r2, #3
 80010b6:	21ff      	movs	r1, #255	; 0xff
 80010b8:	4091      	lsls	r1, r2
 80010ba:	000a      	movs	r2, r1
 80010bc:	43d2      	mvns	r2, r2
 80010be:	401a      	ands	r2, r3
 80010c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	401a      	ands	r2, r3
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	0018      	movs	r0, r3
 80010d0:	2303      	movs	r3, #3
 80010d2:	4003      	ands	r3, r0
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	481f      	ldr	r0, [pc, #124]	; (8001158 <__NVIC_SetPriority+0xd4>)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	430a      	orrs	r2, r1
 80010e4:	33c0      	adds	r3, #192	; 0xc0
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ea:	e031      	b.n	8001150 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <__NVIC_SetPriority+0xd8>)
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	0019      	movs	r1, r3
 80010f4:	230f      	movs	r3, #15
 80010f6:	400b      	ands	r3, r1
 80010f8:	3b08      	subs	r3, #8
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3306      	adds	r3, #6
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	3304      	adds	r3, #4
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1dfa      	adds	r2, r7, #7
 8001108:	7812      	ldrb	r2, [r2, #0]
 800110a:	0011      	movs	r1, r2
 800110c:	2203      	movs	r2, #3
 800110e:	400a      	ands	r2, r1
 8001110:	00d2      	lsls	r2, r2, #3
 8001112:	21ff      	movs	r1, #255	; 0xff
 8001114:	4091      	lsls	r1, r2
 8001116:	000a      	movs	r2, r1
 8001118:	43d2      	mvns	r2, r2
 800111a:	401a      	ands	r2, r3
 800111c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	019b      	lsls	r3, r3, #6
 8001122:	22ff      	movs	r2, #255	; 0xff
 8001124:	401a      	ands	r2, r3
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	2303      	movs	r3, #3
 800112e:	4003      	ands	r3, r0
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <__NVIC_SetPriority+0xd8>)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	001c      	movs	r4, r3
 800113c:	230f      	movs	r3, #15
 800113e:	4023      	ands	r3, r4
 8001140:	3b08      	subs	r3, #8
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	430a      	orrs	r2, r1
 8001146:	3306      	adds	r3, #6
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	18c3      	adds	r3, r0, r3
 800114c:	3304      	adds	r3, #4
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b003      	add	sp, #12
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	045b      	lsls	r3, r3, #17
 8001170:	429a      	cmp	r2, r3
 8001172:	d301      	bcc.n	8001178 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001174:	2301      	movs	r3, #1
 8001176:	e010      	b.n	800119a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <SysTick_Config+0x44>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	3a01      	subs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001180:	2301      	movs	r3, #1
 8001182:	425b      	negs	r3, r3
 8001184:	2103      	movs	r1, #3
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff ff7c 	bl	8001084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x44>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x44>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	210f      	movs	r1, #15
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	1c02      	adds	r2, r0, #0
 80011b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff5d 	bl	8001084 <__NVIC_SetPriority>
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	0002      	movs	r2, r0
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff ff33 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff ffaf 	bl	8001160 <SysTick_Config>
 8001202:	0003      	movs	r3, r0
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b002      	add	sp, #8
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001214:	210f      	movs	r1, #15
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2221      	movs	r2, #33	; 0x21
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d006      	beq.n	8001236 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2204      	movs	r2, #4
 800122c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e028      	b.n	8001288 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	210e      	movs	r1, #14
 8001242:	438a      	bics	r2, r1
 8001244:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	438a      	bics	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125e:	2101      	movs	r1, #1
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2221      	movs	r2, #33	; 0x21
 800126a:	2101      	movs	r1, #1
 800126c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2220      	movs	r2, #32
 8001272:	2100      	movs	r1, #0
 8001274:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	0010      	movs	r0, r2
 8001286:	4798      	blx	r3
    }
  }
  return status;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	781b      	ldrb	r3, [r3, #0]
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b004      	add	sp, #16
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	e149      	b.n	800153c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4091      	lsls	r1, r2
 80012b2:	000a      	movs	r2, r1
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d100      	bne.n	80012c0 <HAL_GPIO_Init+0x28>
 80012be:	e13a      	b.n	8001536 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d005      	beq.n	80012d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d130      	bne.n	800133a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	409a      	lsls	r2, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	43da      	mvns	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	409a      	lsls	r2, r3
 80012fa:	0013      	movs	r3, r2
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	2201      	movs	r2, #1
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	4013      	ands	r3, r2
 8001342:	2b03      	cmp	r3, #3
 8001344:	d017      	beq.n	8001376 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2203      	movs	r2, #3
 800137c:	4013      	ands	r3, r2
 800137e:	2b02      	cmp	r3, #2
 8001380:	d123      	bne.n	80013ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	58d3      	ldr	r3, [r2, r3]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2207      	movs	r2, #7
 8001394:	4013      	ands	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	43da      	mvns	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2107      	movs	r1, #7
 80013ae:	400b      	ands	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	6939      	ldr	r1, [r7, #16]
 80013c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	401a      	ands	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	409a      	lsls	r2, r3
 80013f0:	0013      	movs	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	23c0      	movs	r3, #192	; 0xc0
 8001404:	029b      	lsls	r3, r3, #10
 8001406:	4013      	ands	r3, r2
 8001408:	d100      	bne.n	800140c <HAL_GPIO_Init+0x174>
 800140a:	e094      	b.n	8001536 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140c:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_GPIO_Init+0x2bc>)
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_GPIO_Init+0x2bc>)
 8001412:	2101      	movs	r1, #1
 8001414:	430a      	orrs	r2, r1
 8001416:	619a      	str	r2, [r3, #24]
 8001418:	4b4e      	ldr	r3, [pc, #312]	; (8001554 <HAL_GPIO_Init+0x2bc>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	2201      	movs	r2, #1
 800141e:	4013      	ands	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_GPIO_Init+0x2c0>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	589b      	ldr	r3, [r3, r2]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2203      	movs	r2, #3
 8001436:	4013      	ands	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	409a      	lsls	r2, r3
 800143e:	0013      	movs	r3, r2
 8001440:	43da      	mvns	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	2390      	movs	r3, #144	; 0x90
 800144c:	05db      	lsls	r3, r3, #23
 800144e:	429a      	cmp	r2, r3
 8001450:	d00d      	beq.n	800146e <HAL_GPIO_Init+0x1d6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a41      	ldr	r2, [pc, #260]	; (800155c <HAL_GPIO_Init+0x2c4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x1d2>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a40      	ldr	r2, [pc, #256]	; (8001560 <HAL_GPIO_Init+0x2c8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_GPIO_Init+0x1ce>
 8001462:	2302      	movs	r3, #2
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x1d8>
 8001466:	2305      	movs	r3, #5
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x1d8>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x1d8>
 800146e:	2300      	movs	r3, #0
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	2103      	movs	r1, #3
 8001474:	400a      	ands	r2, r1
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	; (8001558 <HAL_GPIO_Init+0x2c0>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b35      	ldr	r3, [pc, #212]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43da      	mvns	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	035b      	lsls	r3, r3, #13
 80014a6:	4013      	ands	r3, r2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	039b      	lsls	r3, r3, #14
 80014d0:	4013      	ands	r3, r2
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	029b      	lsls	r3, r3, #10
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	025b      	lsls	r3, r3, #9
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	40da      	lsrs	r2, r3
 8001544:	1e13      	subs	r3, r2, #0
 8001546:	d000      	beq.n	800154a <HAL_GPIO_Init+0x2b2>
 8001548:	e6ae      	b.n	80012a8 <HAL_GPIO_Init+0x10>
  } 
}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b006      	add	sp, #24
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000
 800155c:	48000400 	.word	0x48000400
 8001560:	48000800 	.word	0x48000800
 8001564:	40010400 	.word	0x40010400

08001568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	0008      	movs	r0, r1
 8001572:	0011      	movs	r1, r2
 8001574:	1cbb      	adds	r3, r7, #2
 8001576:	1c02      	adds	r2, r0, #0
 8001578:	801a      	strh	r2, [r3, #0]
 800157a:	1c7b      	adds	r3, r7, #1
 800157c:	1c0a      	adds	r2, r1, #0
 800157e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001580:	1c7b      	adds	r3, r7, #1
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001588:	1cbb      	adds	r3, r7, #2
 800158a:	881a      	ldrh	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001592:	1cbb      	adds	r3, r7, #2
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	000a      	movs	r2, r1
 80015ac:	1cbb      	adds	r3, r7, #2
 80015ae:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b6:	1cbb      	adds	r3, r7, #2
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	041a      	lsls	r2, r3, #16
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	1cb9      	adds	r1, r7, #2
 80015c6:	8809      	ldrh	r1, [r1, #0]
 80015c8:	400b      	ands	r3, r1
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	619a      	str	r2, [r3, #24]
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e301      	b.n	8001bee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <HAL_RCC_OscConfig+0x1e>
 80015f4:	e08d      	b.n	8001712 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015f6:	4bc3      	ldr	r3, [pc, #780]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	220c      	movs	r2, #12
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d00e      	beq.n	8001620 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001602:	4bc0      	ldr	r3, [pc, #768]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	220c      	movs	r2, #12
 8001608:	4013      	ands	r3, r2
 800160a:	2b08      	cmp	r3, #8
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x64>
 800160e:	4bbd      	ldr	r3, [pc, #756]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	025b      	lsls	r3, r3, #9
 8001616:	401a      	ands	r2, r3
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	025b      	lsls	r3, r3, #9
 800161c:	429a      	cmp	r2, r3
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4bb8      	ldr	r3, [pc, #736]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	029b      	lsls	r3, r3, #10
 8001628:	4013      	ands	r3, r2
 800162a:	d100      	bne.n	800162e <HAL_RCC_OscConfig+0x56>
 800162c:	e070      	b.n	8001710 <HAL_RCC_OscConfig+0x138>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d000      	beq.n	8001638 <HAL_RCC_OscConfig+0x60>
 8001636:	e06b      	b.n	8001710 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e2d8      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x7c>
 8001644:	4baf      	ldr	r3, [pc, #700]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4bae      	ldr	r3, [pc, #696]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	0249      	lsls	r1, r1, #9
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e02f      	b.n	80016b4 <HAL_RCC_OscConfig+0xdc>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x9e>
 800165c:	4ba9      	ldr	r3, [pc, #676]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4ba8      	ldr	r3, [pc, #672]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001662:	49a9      	ldr	r1, [pc, #676]	; (8001908 <HAL_RCC_OscConfig+0x330>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	4ba6      	ldr	r3, [pc, #664]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4ba5      	ldr	r3, [pc, #660]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800166e:	49a7      	ldr	r1, [pc, #668]	; (800190c <HAL_RCC_OscConfig+0x334>)
 8001670:	400a      	ands	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e01e      	b.n	80016b4 <HAL_RCC_OscConfig+0xdc>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10e      	bne.n	800169c <HAL_RCC_OscConfig+0xc4>
 800167e:	4ba1      	ldr	r3, [pc, #644]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4ba0      	ldr	r3, [pc, #640]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	02c9      	lsls	r1, r1, #11
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	4b9d      	ldr	r3, [pc, #628]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b9c      	ldr	r3, [pc, #624]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0249      	lsls	r1, r1, #9
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xdc>
 800169c:	4b99      	ldr	r3, [pc, #612]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b98      	ldr	r3, [pc, #608]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	4999      	ldr	r1, [pc, #612]	; (8001908 <HAL_RCC_OscConfig+0x330>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	4b96      	ldr	r3, [pc, #600]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b95      	ldr	r3, [pc, #596]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	4997      	ldr	r1, [pc, #604]	; (800190c <HAL_RCC_OscConfig+0x334>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d014      	beq.n	80016e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fcbe 	bl	800103c <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c6:	f7ff fcb9 	bl	800103c <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b64      	cmp	r3, #100	; 0x64
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e28a      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d8:	4b8a      	ldr	r3, [pc, #552]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	029b      	lsls	r3, r3, #10
 80016e0:	4013      	ands	r3, r2
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0xee>
 80016e4:	e015      	b.n	8001712 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fca9 	bl	800103c <HAL_GetTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fca4 	bl	800103c <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e275      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b80      	ldr	r3, [pc, #512]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	029b      	lsls	r3, r3, #10
 800170a:	4013      	ands	r3, r2
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x118>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2202      	movs	r2, #2
 8001718:	4013      	ands	r3, r2
 800171a:	d100      	bne.n	800171e <HAL_RCC_OscConfig+0x146>
 800171c:	e069      	b.n	80017f2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800171e:	4b79      	ldr	r3, [pc, #484]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	220c      	movs	r2, #12
 8001724:	4013      	ands	r3, r2
 8001726:	d00b      	beq.n	8001740 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001728:	4b76      	ldr	r3, [pc, #472]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	220c      	movs	r2, #12
 800172e:	4013      	ands	r3, r2
 8001730:	2b08      	cmp	r3, #8
 8001732:	d11c      	bne.n	800176e <HAL_RCC_OscConfig+0x196>
 8001734:	4b73      	ldr	r3, [pc, #460]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	025b      	lsls	r3, r3, #9
 800173c:	4013      	ands	r3, r2
 800173e:	d116      	bne.n	800176e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001740:	4b70      	ldr	r3, [pc, #448]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x17e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e24b      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b6b      	ldr	r3, [pc, #428]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	22f8      	movs	r2, #248	; 0xf8
 800175c:	4393      	bics	r3, r2
 800175e:	0019      	movs	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	00da      	lsls	r2, r3, #3
 8001766:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176c:	e041      	b.n	80017f2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d024      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b62      	ldr	r3, [pc, #392]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fc5b 	bl	800103c <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fc56 	bl	800103c <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e227      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b59      	ldr	r3, [pc, #356]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d0f1      	beq.n	800178c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b56      	ldr	r3, [pc, #344]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	22f8      	movs	r2, #248	; 0xf8
 80017ae:	4393      	bics	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00da      	lsls	r2, r3, #3
 80017b8:	4b52      	ldr	r3, [pc, #328]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e018      	b.n	80017f2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c0:	4b50      	ldr	r3, [pc, #320]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fc36 	bl	800103c <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fc31 	bl	800103c <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e202      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e8:	4b46      	ldr	r3, [pc, #280]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f1      	bne.n	80017d6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2208      	movs	r2, #8
 80017f8:	4013      	ands	r3, r2
 80017fa:	d036      	beq.n	800186a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d019      	beq.n	8001838 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001804:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001808:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800180a:	2101      	movs	r1, #1
 800180c:	430a      	orrs	r2, r1
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff fc14 	bl	800103c <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff fc0f 	bl	800103c <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e1e0      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	2202      	movs	r2, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d0f1      	beq.n	800181a <HAL_RCC_OscConfig+0x242>
 8001836:	e018      	b.n	800186a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001838:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800183a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800183e:	2101      	movs	r1, #1
 8001840:	438a      	bics	r2, r1
 8001842:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001844:	f7ff fbfa 	bl	800103c <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff fbf5 	bl	800103c <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1c6      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d1f1      	bne.n	800184e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2204      	movs	r2, #4
 8001870:	4013      	ands	r3, r2
 8001872:	d100      	bne.n	8001876 <HAL_RCC_OscConfig+0x29e>
 8001874:	e0b4      	b.n	80019e0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	201f      	movs	r0, #31
 8001878:	183b      	adds	r3, r7, r0
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	055b      	lsls	r3, r3, #21
 8001886:	4013      	ands	r3, r2
 8001888:	d110      	bne.n	80018ac <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	0549      	lsls	r1, r1, #21
 8001894:	430a      	orrs	r2, r1
 8001896:	61da      	str	r2, [r3, #28]
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 800189a:	69da      	ldr	r2, [r3, #28]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	055b      	lsls	r3, r3, #21
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018a6:	183b      	adds	r3, r7, r0
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_RCC_OscConfig+0x338>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4013      	ands	r3, r2
 80018b6:	d11a      	bne.n	80018ee <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_RCC_OscConfig+0x338>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_RCC_OscConfig+0x338>)
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	0049      	lsls	r1, r1, #1
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fbb9 	bl	800103c <HAL_GetTick>
 80018ca:	0003      	movs	r3, r0
 80018cc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d0:	f7ff fbb4 	bl	800103c <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e185      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_OscConfig+0x338>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d10e      	bne.n	8001914 <HAL_RCC_OscConfig+0x33c>
 80018f6:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80018f8:	6a1a      	ldr	r2, [r3, #32]
 80018fa:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	621a      	str	r2, [r3, #32]
 8001902:	e035      	b.n	8001970 <HAL_RCC_OscConfig+0x398>
 8001904:	40021000 	.word	0x40021000
 8001908:	fffeffff 	.word	0xfffeffff
 800190c:	fffbffff 	.word	0xfffbffff
 8001910:	40007000 	.word	0x40007000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10c      	bne.n	8001936 <HAL_RCC_OscConfig+0x35e>
 800191c:	4bb6      	ldr	r3, [pc, #728]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 800191e:	6a1a      	ldr	r2, [r3, #32]
 8001920:	4bb5      	ldr	r3, [pc, #724]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001922:	2101      	movs	r1, #1
 8001924:	438a      	bics	r2, r1
 8001926:	621a      	str	r2, [r3, #32]
 8001928:	4bb3      	ldr	r3, [pc, #716]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	4bb2      	ldr	r3, [pc, #712]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 800192e:	2104      	movs	r1, #4
 8001930:	438a      	bics	r2, r1
 8001932:	621a      	str	r2, [r3, #32]
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x398>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x380>
 800193e:	4bae      	ldr	r3, [pc, #696]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	4bad      	ldr	r3, [pc, #692]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001944:	2104      	movs	r1, #4
 8001946:	430a      	orrs	r2, r1
 8001948:	621a      	str	r2, [r3, #32]
 800194a:	4bab      	ldr	r3, [pc, #684]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 800194c:	6a1a      	ldr	r2, [r3, #32]
 800194e:	4baa      	ldr	r3, [pc, #680]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001950:	2101      	movs	r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	621a      	str	r2, [r3, #32]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0x398>
 8001958:	4ba7      	ldr	r3, [pc, #668]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 800195a:	6a1a      	ldr	r2, [r3, #32]
 800195c:	4ba6      	ldr	r3, [pc, #664]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 800195e:	2101      	movs	r1, #1
 8001960:	438a      	bics	r2, r1
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	4ba4      	ldr	r3, [pc, #656]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001966:	6a1a      	ldr	r2, [r3, #32]
 8001968:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 800196a:	2104      	movs	r1, #4
 800196c:	438a      	bics	r2, r1
 800196e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d014      	beq.n	80019a2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff fb60 	bl	800103c <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001980:	e009      	b.n	8001996 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7ff fb5b 	bl	800103c <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	4a9b      	ldr	r2, [pc, #620]	; (8001bfc <HAL_RCC_OscConfig+0x624>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e12b      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001996:	4b98      	ldr	r3, [pc, #608]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	2202      	movs	r2, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x3aa>
 80019a0:	e013      	b.n	80019ca <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fb4b 	bl	800103c <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019aa:	e009      	b.n	80019c0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f7ff fb46 	bl	800103c <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a91      	ldr	r2, [pc, #580]	; (8001bfc <HAL_RCC_OscConfig+0x624>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e116      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	4b8d      	ldr	r3, [pc, #564]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	2202      	movs	r2, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019ca:	231f      	movs	r3, #31
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 80019d6:	69da      	ldr	r2, [r3, #28]
 80019d8:	4b87      	ldr	r3, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 80019da:	4989      	ldr	r1, [pc, #548]	; (8001c00 <HAL_RCC_OscConfig+0x628>)
 80019dc:	400a      	ands	r2, r1
 80019de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2210      	movs	r2, #16
 80019e6:	4013      	ands	r3, r2
 80019e8:	d063      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d12a      	bne.n	8001a48 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019f2:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 80019f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f6:	4b80      	ldr	r3, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 80019f8:	2104      	movs	r1, #4
 80019fa:	430a      	orrs	r2, r1
 80019fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80019fe:	4b7e      	ldr	r3, [pc, #504]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a02:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb17 	bl	800103c <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a14:	f7ff fb12 	bl	800103c <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e0e3      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a26:	4b74      	ldr	r3, [pc, #464]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0f1      	beq.n	8001a14 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a30:	4b71      	ldr	r3, [pc, #452]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a34:	22f8      	movs	r2, #248	; 0xf8
 8001a36:	4393      	bics	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	00da      	lsls	r2, r3, #3
 8001a40:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34
 8001a46:	e034      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	3305      	adds	r3, #5
 8001a4e:	d111      	bne.n	8001a74 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a50:	4b69      	ldr	r3, [pc, #420]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a54:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a56:	2104      	movs	r1, #4
 8001a58:	438a      	bics	r2, r1
 8001a5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a5c:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a60:	22f8      	movs	r2, #248	; 0xf8
 8001a62:	4393      	bics	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	00da      	lsls	r2, r3, #3
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	635a      	str	r2, [r3, #52]	; 0x34
 8001a72:	e01e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a74:	4b60      	ldr	r3, [pc, #384]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a78:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a80:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a84:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	438a      	bics	r2, r1
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fad6 	bl	800103c <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a96:	f7ff fad1 	bl	800103c <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0a2      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d1f1      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d100      	bne.n	8001abc <HAL_RCC_OscConfig+0x4e4>
 8001aba:	e097      	b.n	8001bec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abc:	4b4e      	ldr	r3, [pc, #312]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	220c      	movs	r2, #12
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d100      	bne.n	8001aca <HAL_RCC_OscConfig+0x4f2>
 8001ac8:	e06b      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d14c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001ad8:	494a      	ldr	r1, [pc, #296]	; (8001c04 <HAL_RCC_OscConfig+0x62c>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff faad 	bl	800103c <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff faa8 	bl	800103c <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e079      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	049b      	lsls	r3, r3, #18
 8001b02:	4013      	ands	r3, r2
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b06:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a3a      	ldr	r2, [pc, #232]	; (8001c08 <HAL_RCC_OscConfig+0x630>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	0449      	lsls	r1, r1, #17
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fa7b 	bl	800103c <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff fa76 	bl	800103c <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e047      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	049b      	lsls	r3, r3, #18
 8001b66:	4013      	ands	r3, r2
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x574>
 8001b6a:	e03f      	b.n	8001bec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b72:	4924      	ldr	r1, [pc, #144]	; (8001c04 <HAL_RCC_OscConfig+0x62c>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fa60 	bl	800103c <HAL_GetTick>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff fa5b 	bl	800103c <HAL_GetTick>
 8001b86:	0002      	movs	r2, r0
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e02c      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	049b      	lsls	r3, r3, #18
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x5aa>
 8001ba0:	e024      	b.n	8001bec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e01f      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_RCC_OscConfig+0x620>)
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	025b      	lsls	r3, r3, #9
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d10e      	bne.n	8001be8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	220f      	movs	r2, #15
 8001bce:	401a      	ands	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	23f0      	movs	r3, #240	; 0xf0
 8001bdc:	039b      	lsls	r3, r3, #14
 8001bde:	401a      	ands	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b008      	add	sp, #32
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	00001388 	.word	0x00001388
 8001c00:	efffffff 	.word	0xefffffff
 8001c04:	feffffff 	.word	0xfeffffff
 8001c08:	ffc2ffff 	.word	0xffc2ffff

08001c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0b3      	b.n	8001d88 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <HAL_RCC_ClockConfig+0x184>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d911      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <HAL_RCC_ClockConfig+0x184>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4393      	bics	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	4b55      	ldr	r3, [pc, #340]	; (8001d90 <HAL_RCC_ClockConfig+0x184>)
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c40:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_ClockConfig+0x184>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e09a      	b.n	8001d88 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2202      	movs	r2, #2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d015      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2204      	movs	r2, #4
 8001c62:	4013      	ands	r3, r2
 8001c64:	d006      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c66:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4b4a      	ldr	r3, [pc, #296]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001c6c:	21e0      	movs	r1, #224	; 0xe0
 8001c6e:	00c9      	lsls	r1, r1, #3
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	22f0      	movs	r2, #240	; 0xf0
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d040      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	029b      	lsls	r3, r3, #10
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d114      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e06e      	b.n	8001d88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	049b      	lsls	r3, r3, #18
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d108      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e062      	b.n	8001d88 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e05b      	b.n	8001d88 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd0:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	4393      	bics	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f9aa 	bl	800103c <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cec:	e009      	b.n	8001d02 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cee:	f7ff f9a5 	bl	800103c <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <HAL_RCC_ClockConfig+0x18c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e042      	b.n	8001d88 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	220c      	movs	r2, #12
 8001d08:	401a      	ands	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1ec      	bne.n	8001cee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_RCC_ClockConfig+0x184>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d211      	bcs.n	8001d46 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_ClockConfig+0x184>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2201      	movs	r2, #1
 8001d28:	4393      	bics	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_RCC_ClockConfig+0x184>)
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_RCC_ClockConfig+0x184>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e020      	b.n	8001d88 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d009      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_RCC_ClockConfig+0x190>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d64:	f000 f820 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d68:	0001      	movs	r1, r0
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_ClockConfig+0x188>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	220f      	movs	r2, #15
 8001d72:	4013      	ands	r3, r2
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_RCC_ClockConfig+0x194>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	000a      	movs	r2, r1
 8001d7a:	40da      	lsrs	r2, r3
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x198>)
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f7ff f915 	bl	8000fb0 <HAL_InitTick>
  
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	0018      	movs	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b004      	add	sp, #16
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40022000 	.word	0x40022000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	00001388 	.word	0x00001388
 8001d9c:	fffff8ff 	.word	0xfffff8ff
 8001da0:	08003d70 	.word	0x08003d70
 8001da4:	2000000c 	.word	0x2000000c

08001da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	220c      	movs	r2, #12
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d002      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x36>
 8001dd6:	e02c      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dda:	613b      	str	r3, [r7, #16]
      break;
 8001ddc:	e02c      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0c9b      	lsrs	r3, r3, #18
 8001de2:	220f      	movs	r2, #15
 8001de4:	4013      	ands	r3, r2
 8001de6:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	220f      	movs	r2, #15
 8001df2:	4013      	ands	r3, r2
 8001df4:	4a16      	ldr	r2, [pc, #88]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	025b      	lsls	r3, r3, #9
 8001e00:	4013      	ands	r3, r2
 8001e02:	d009      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	4810      	ldr	r0, [pc, #64]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e08:	f7fe f97e 	bl	8000108 <__udivsi3>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	001a      	movs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4353      	muls	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e009      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	000a      	movs	r2, r1
 8001e1c:	0152      	lsls	r2, r2, #5
 8001e1e:	1a52      	subs	r2, r2, r1
 8001e20:	0193      	lsls	r3, r2, #6
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	185b      	adds	r3, r3, r1
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
      break;
 8001e30:	e002      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e34:	613b      	str	r3, [r7, #16]
      break;
 8001e36:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e38:	693b      	ldr	r3, [r7, #16]
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b006      	add	sp, #24
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	40021000 	.word	0x40021000
 8001e48:	007a1200 	.word	0x007a1200
 8001e4c:	08003d80 	.word	0x08003d80
 8001e50:	08003d90 	.word	0x08003d90

08001e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	025b      	lsls	r3, r3, #9
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d100      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e70:	e08e      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e72:	2017      	movs	r0, #23
 8001e74:	183b      	adds	r3, r7, r0
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	055b      	lsls	r3, r3, #21
 8001e82:	4013      	ands	r3, r2
 8001e84:	d110      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b54      	ldr	r3, [pc, #336]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	0549      	lsls	r1, r1, #21
 8001e90:	430a      	orrs	r2, r1
 8001e92:	61da      	str	r2, [r3, #28]
 8001e94:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	055b      	lsls	r3, r3, #21
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	183b      	adds	r3, r7, r0
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d11a      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb4:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0049      	lsls	r1, r1, #1
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff f8bb 	bl	800103c <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eca:	e008      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ecc:	f7ff f8b6 	bl	800103c <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e077      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d034      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	23c0      	movs	r3, #192	; 0xc0
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d02c      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f18:	6a1a      	ldr	r2, [r3, #32]
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0249      	lsls	r1, r1, #9
 8001f20:	430a      	orrs	r2, r1
 8001f22:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f24:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f2a:	492e      	ldr	r1, [pc, #184]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f30:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f87d 	bl	800103c <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f46:	e009      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f48:	f7ff f878 	bl	800103c <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e038      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f7a:	2317      	movs	r3, #23
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f8a:	4918      	ldr	r1, [pc, #96]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	4393      	bics	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b006      	add	sp, #24
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	fffffcff 	.word	0xfffffcff
 8001fe4:	fffeffff 	.word	0xfffeffff
 8001fe8:	00001388 	.word	0x00001388
 8001fec:	efffffff 	.word	0xefffffff

08001ff0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e081      	b.n	800210e <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7f5b      	ldrb	r3, [r3, #29]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f7fe fb45 	bl	80006ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2210      	movs	r2, #16
 8002030:	4013      	ands	r3, r2
 8002032:	2b10      	cmp	r3, #16
 8002034:	d05c      	beq.n	80020f0 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	22ca      	movs	r2, #202	; 0xca
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2253      	movs	r2, #83	; 0x53
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002046:	250f      	movs	r5, #15
 8002048:	197c      	adds	r4, r7, r5
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	0018      	movs	r0, r3
 800204e:	f000 f9c5 	bl	80023dc <RTC_EnterInitMode>
 8002052:	0003      	movs	r3, r0
 8002054:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002056:	0028      	movs	r0, r5
 8002058:	183b      	adds	r3, r7, r0
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d12c      	bne.n	80020ba <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	492b      	ldr	r1, [pc, #172]	; (8002118 <HAL_RTC_Init+0x128>)
 800206c:	400a      	ands	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68d2      	ldr	r2, [r2, #12]
 8002096:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6919      	ldr	r1, [r3, #16]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	041a      	lsls	r2, r3, #16
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80020ac:	183c      	adds	r4, r7, r0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 f9d6 	bl	8002462 <RTC_ExitInitMode>
 80020b6:	0003      	movs	r3, r0
 80020b8:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80020ba:	230f      	movs	r3, #15
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d110      	bne.n	80020e6 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4913      	ldr	r1, [pc, #76]	; (800211c <HAL_RTC_Init+0x12c>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	22ff      	movs	r2, #255	; 0xff
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
 80020ee:	e003      	b.n	80020f8 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80020f0:	230f      	movs	r3, #15
 80020f2:	18fb      	adds	r3, r7, r3
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80020f8:	230f      	movs	r3, #15
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002108:	230f      	movs	r3, #15
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	781b      	ldrb	r3, [r3, #0]
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	ff8fffbf 	.word	0xff8fffbf
 800211c:	fffbffff 	.word	0xfffbffff

08002120 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	7f1b      	ldrb	r3, [r3, #28]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_RTC_SetTime+0x1c>
 8002138:	2302      	movs	r3, #2
 800213a:	e08e      	b.n	800225a <HAL_RTC_SetTime+0x13a>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2202      	movs	r2, #2
 8002146:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d125      	bne.n	800219a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2240      	movs	r2, #64	; 0x40
 8002156:	4013      	ands	r3, r2
 8002158:	d102      	bne.n	8002160 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2200      	movs	r2, #0
 800215e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	0018      	movs	r0, r3
 8002166:	f000 f9a5 	bl	80024b4 <RTC_ByteToBcd2>
 800216a:	0003      	movs	r3, r0
 800216c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	0018      	movs	r0, r3
 8002174:	f000 f99e 	bl	80024b4 <RTC_ByteToBcd2>
 8002178:	0003      	movs	r3, r0
 800217a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800217c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	789b      	ldrb	r3, [r3, #2]
 8002182:	0018      	movs	r0, r3
 8002184:	f000 f996 	bl	80024b4 <RTC_ByteToBcd2>
 8002188:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800218a:	0022      	movs	r2, r4
 800218c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	78db      	ldrb	r3, [r3, #3]
 8002192:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e017      	b.n	80021ca <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	4013      	ands	r3, r2
 80021a4:	d102      	bne.n	80021ac <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2200      	movs	r2, #0
 80021aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80021b8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80021be:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	78db      	ldrb	r3, [r3, #3]
 80021c4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	22ca      	movs	r2, #202	; 0xca
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2253      	movs	r2, #83	; 0x53
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021da:	2513      	movs	r5, #19
 80021dc:	197c      	adds	r4, r7, r5
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f8fb 	bl	80023dc <RTC_EnterInitMode>
 80021e6:	0003      	movs	r3, r0
 80021e8:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80021ea:	0028      	movs	r0, r5
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d120      	bne.n	8002236 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	491a      	ldr	r1, [pc, #104]	; (8002264 <HAL_RTC_SetTime+0x144>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4917      	ldr	r1, [pc, #92]	; (8002268 <HAL_RTC_SetTime+0x148>)
 800220c:	400a      	ands	r2, r1
 800220e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	431a      	orrs	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002228:	183c      	adds	r4, r7, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	0018      	movs	r0, r3
 800222e:	f000 f918 	bl	8002462 <RTC_ExitInitMode>
 8002232:	0003      	movs	r3, r0
 8002234:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002236:	2313      	movs	r3, #19
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	22ff      	movs	r2, #255	; 0xff
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]

  return status;
 8002254:	2313      	movs	r3, #19
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	781b      	ldrb	r3, [r3, #0]
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	b006      	add	sp, #24
 8002260:	bdb0      	pop	{r4, r5, r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	007f7f7f 	.word	0x007f7f7f
 8002268:	fffbffff 	.word	0xfffbffff

0800226c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800226c:	b5b0      	push	{r4, r5, r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	7f1b      	ldrb	r3, [r3, #28]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_RTC_SetDate+0x1c>
 8002284:	2302      	movs	r3, #2
 8002286:	e07a      	b.n	800237e <HAL_RTC_SetDate+0x112>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2202      	movs	r2, #2
 8002292:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10e      	bne.n	80022b8 <HAL_RTC_SetDate+0x4c>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	785b      	ldrb	r3, [r3, #1]
 800229e:	001a      	movs	r2, r3
 80022a0:	2310      	movs	r3, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	d008      	beq.n	80022b8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	2210      	movs	r2, #16
 80022ac:	4393      	bics	r3, r2
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	330a      	adds	r3, #10
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11c      	bne.n	80022f8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	78db      	ldrb	r3, [r3, #3]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f8f6 	bl	80024b4 <RTC_ByteToBcd2>
 80022c8:	0003      	movs	r3, r0
 80022ca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	785b      	ldrb	r3, [r3, #1]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f000 f8ef 	bl	80024b4 <RTC_ByteToBcd2>
 80022d6:	0003      	movs	r3, r0
 80022d8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022da:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	789b      	ldrb	r3, [r3, #2]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f8e7 	bl	80024b4 <RTC_ByteToBcd2>
 80022e6:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80022e8:	0022      	movs	r2, r4
 80022ea:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e00e      	b.n	8002316 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	78db      	ldrb	r3, [r3, #3]
 80022fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002304:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800230a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	22ca      	movs	r2, #202	; 0xca
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2253      	movs	r2, #83	; 0x53
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002326:	2513      	movs	r5, #19
 8002328:	197c      	adds	r4, r7, r5
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0018      	movs	r0, r3
 800232e:	f000 f855 	bl	80023dc <RTC_EnterInitMode>
 8002332:	0003      	movs	r3, r0
 8002334:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002336:	0028      	movs	r0, r5
 8002338:	183b      	adds	r3, r7, r0
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10c      	bne.n	800235a <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	4910      	ldr	r1, [pc, #64]	; (8002388 <HAL_RTC_SetDate+0x11c>)
 8002348:	400a      	ands	r2, r1
 800234a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800234c:	183c      	adds	r4, r7, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 f886 	bl	8002462 <RTC_ExitInitMode>
 8002356:	0003      	movs	r3, r0
 8002358:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800235a:	2313      	movs	r3, #19
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]

  return status;
 8002378:	2313      	movs	r3, #19
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	781b      	ldrb	r3, [r3, #0]
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b006      	add	sp, #24
 8002384:	bdb0      	pop	{r4, r5, r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	00ffff3f 	.word	0x00ffff3f

0800238c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RTC_WaitForSynchro+0x4c>)
 800239e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a0:	f7fe fe4c 	bl	800103c <HAL_GetTick>
 80023a4:	0003      	movs	r3, r0
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023a8:	e00a      	b.n	80023c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023aa:	f7fe fe47 	bl	800103c <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad2      	subs	r2, r2, r3
 80023b4:	23fa      	movs	r3, #250	; 0xfa
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d901      	bls.n	80023c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e006      	b.n	80023ce <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	4013      	ands	r3, r2
 80023ca:	d0ee      	beq.n	80023aa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	0018      	movs	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b004      	add	sp, #16
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	00017959 	.word	0x00017959

080023dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	230f      	movs	r3, #15
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2240      	movs	r2, #64	; 0x40
 80023f8:	4013      	ands	r3, r2
 80023fa:	d12b      	bne.n	8002454 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800240c:	f7fe fe16 	bl	800103c <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002414:	e013      	b.n	800243e <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002416:	f7fe fe11 	bl	800103c <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1ad2      	subs	r2, r2, r3
 8002420:	200f      	movs	r0, #15
 8002422:	183b      	adds	r3, r7, r0
 8002424:	1839      	adds	r1, r7, r0
 8002426:	7809      	ldrb	r1, [r1, #0]
 8002428:	7019      	strb	r1, [r3, #0]
 800242a:	23fa      	movs	r3, #250	; 0xfa
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	429a      	cmp	r2, r3
 8002430:	d905      	bls.n	800243e <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2204      	movs	r2, #4
 8002436:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002438:	183b      	adds	r3, r7, r0
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	4013      	ands	r3, r2
 8002448:	d104      	bne.n	8002454 <RTC_EnterInitMode+0x78>
 800244a:	230f      	movs	r3, #15
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d1e0      	bne.n	8002416 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002454:	230f      	movs	r3, #15
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b004      	add	sp, #16
 8002460:	bd80      	pop	{r7, pc}

08002462 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002462:	b590      	push	{r4, r7, lr}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	240f      	movs	r4, #15
 800246c:	193b      	adds	r3, r7, r4
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2180      	movs	r1, #128	; 0x80
 800247e:	438a      	bics	r2, r1
 8002480:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2220      	movs	r2, #32
 800248a:	4013      	ands	r3, r2
 800248c:	d10b      	bne.n	80024a6 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff ff7b 	bl	800238c <HAL_RTC_WaitForSynchro>
 8002496:	1e03      	subs	r3, r0, #0
 8002498:	d005      	beq.n	80024a6 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80024a6:	230f      	movs	r3, #15
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	781b      	ldrb	r3, [r3, #0]
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b005      	add	sp, #20
 80024b2:	bd90      	pop	{r4, r7, pc}

080024b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	0002      	movs	r2, r0
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80024c4:	e007      	b.n	80024d6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3301      	adds	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80024cc:	1dfb      	adds	r3, r7, #7
 80024ce:	1dfa      	adds	r2, r7, #7
 80024d0:	7812      	ldrb	r2, [r2, #0]
 80024d2:	3a0a      	subs	r2, #10
 80024d4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b09      	cmp	r3, #9
 80024dc:	d8f3      	bhi.n	80024c6 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	b2db      	uxtb	r3, r3
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b004      	add	sp, #16
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0a8      	b.n	800265c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	2382      	movs	r3, #130	; 0x82
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	429a      	cmp	r2, r3
 800251c:	d009      	beq.n	8002532 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
 8002524:	e005      	b.n	8002532 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	225d      	movs	r2, #93	; 0x5d
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	225c      	movs	r2, #92	; 0x5c
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0018      	movs	r0, r3
 8002550:	f7fe f8c4 	bl	80006dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	225d      	movs	r2, #93	; 0x5d
 8002558:	2102      	movs	r1, #2
 800255a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2140      	movs	r1, #64	; 0x40
 8002568:	438a      	bics	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	23e0      	movs	r3, #224	; 0xe0
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	429a      	cmp	r2, r3
 8002576:	d902      	bls.n	800257e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e002      	b.n	8002584 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	23f0      	movs	r3, #240	; 0xf0
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	429a      	cmp	r2, r3
 800258e:	d008      	beq.n	80025a2 <HAL_SPI_Init+0xaa>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	23e0      	movs	r3, #224	; 0xe0
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	429a      	cmp	r2, r3
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	2382      	movs	r3, #130	; 0x82
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	401a      	ands	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	2384      	movs	r3, #132	; 0x84
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	400b      	ands	r3, r1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2102      	movs	r1, #2
 80025be:	400b      	ands	r3, r1
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2101      	movs	r1, #1
 80025c8:	400b      	ands	r3, r1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6999      	ldr	r1, [r3, #24]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	400b      	ands	r3, r1
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2138      	movs	r1, #56	; 0x38
 80025de:	400b      	ands	r3, r1
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	2180      	movs	r1, #128	; 0x80
 80025e8:	400b      	ands	r3, r1
 80025ea:	431a      	orrs	r2, r3
 80025ec:	0011      	movs	r1, r2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	401a      	ands	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	2204      	movs	r2, #4
 8002608:	401a      	ands	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2110      	movs	r1, #16
 8002610:	400b      	ands	r3, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	2108      	movs	r1, #8
 800261a:	400b      	ands	r3, r1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68d9      	ldr	r1, [r3, #12]
 8002622:	23f0      	movs	r3, #240	; 0xf0
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	400b      	ands	r3, r1
 8002628:	431a      	orrs	r2, r3
 800262a:	0011      	movs	r1, r2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	015b      	lsls	r3, r3, #5
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4907      	ldr	r1, [pc, #28]	; (8002664 <HAL_SPI_Init+0x16c>)
 8002648:	400a      	ands	r2, r1
 800264a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	225d      	movs	r2, #93	; 0x5d
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}
 8002664:	fffff7ff 	.word	0xfffff7ff

08002668 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	1dbb      	adds	r3, r7, #6
 8002676:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002678:	231f      	movs	r3, #31
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	225c      	movs	r2, #92	; 0x5c
 8002684:	5c9b      	ldrb	r3, [r3, r2]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_SPI_Transmit+0x26>
 800268a:	2302      	movs	r3, #2
 800268c:	e147      	b.n	800291e <HAL_SPI_Transmit+0x2b6>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	225c      	movs	r2, #92	; 0x5c
 8002692:	2101      	movs	r1, #1
 8002694:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002696:	f7fe fcd1 	bl	800103c <HAL_GetTick>
 800269a:	0003      	movs	r3, r0
 800269c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800269e:	2316      	movs	r3, #22
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	1dba      	adds	r2, r7, #6
 80026a4:	8812      	ldrh	r2, [r2, #0]
 80026a6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	225d      	movs	r2, #93	; 0x5d
 80026ac:	5c9b      	ldrb	r3, [r3, r2]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d004      	beq.n	80026be <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80026b4:	231f      	movs	r3, #31
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	2202      	movs	r2, #2
 80026ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80026bc:	e128      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_SPI_Transmit+0x64>
 80026c4:	1dbb      	adds	r3, r7, #6
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d104      	bne.n	80026d6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80026cc:	231f      	movs	r3, #31
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80026d4:	e11c      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	225d      	movs	r2, #93	; 0x5d
 80026da:	2103      	movs	r1, #3
 80026dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1dba      	adds	r2, r7, #6
 80026ee:	8812      	ldrh	r2, [r2, #0]
 80026f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1dba      	adds	r2, r7, #6
 80026f6:	8812      	ldrh	r2, [r2, #0]
 80026f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2244      	movs	r2, #68	; 0x44
 8002704:	2100      	movs	r1, #0
 8002706:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2246      	movs	r2, #70	; 0x46
 800270c:	2100      	movs	r1, #0
 800270e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	429a      	cmp	r2, r3
 8002726:	d110      	bne.n	800274a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2140      	movs	r1, #64	; 0x40
 8002734:	438a      	bics	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	01c9      	lsls	r1, r1, #7
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2240      	movs	r2, #64	; 0x40
 8002752:	4013      	ands	r3, r2
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d007      	beq.n	8002768 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2140      	movs	r1, #64	; 0x40
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	23e0      	movs	r3, #224	; 0xe0
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	429a      	cmp	r2, r3
 8002772:	d952      	bls.n	800281a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_SPI_Transmit+0x11e>
 800277c:	2316      	movs	r3, #22
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d143      	bne.n	800280e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	881a      	ldrh	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	1c9a      	adds	r2, r3, #2
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027aa:	e030      	b.n	800280e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d112      	bne.n	80027e0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	881a      	ldrh	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	1c9a      	adds	r2, r3, #2
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027de:	e016      	b.n	800280e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027e0:	f7fe fc2c 	bl	800103c <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d802      	bhi.n	80027f6 <HAL_SPI_Transmit+0x18e>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_SPI_Transmit+0x194>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d108      	bne.n	800280e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80027fc:	231f      	movs	r3, #31
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2203      	movs	r2, #3
 8002802:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	225d      	movs	r2, #93	; 0x5d
 8002808:	2101      	movs	r1, #1
 800280a:	5499      	strb	r1, [r3, r2]
          goto error;
 800280c:	e080      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1c9      	bne.n	80027ac <HAL_SPI_Transmit+0x144>
 8002818:	e053      	b.n	80028c2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_SPI_Transmit+0x1c4>
 8002822:	2316      	movs	r3, #22
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d145      	bne.n	80028b8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	330c      	adds	r3, #12
 8002836:	7812      	ldrb	r2, [r2, #0]
 8002838:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002852:	e031      	b.n	80028b8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d113      	bne.n	800288a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002888:	e016      	b.n	80028b8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800288a:	f7fe fbd7 	bl	800103c <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d802      	bhi.n	80028a0 <HAL_SPI_Transmit+0x238>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	d102      	bne.n	80028a6 <HAL_SPI_Transmit+0x23e>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80028a6:	231f      	movs	r3, #31
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2203      	movs	r2, #3
 80028ac:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	225d      	movs	r2, #93	; 0x5d
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]
          goto error;
 80028b6:	e02b      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1c8      	bne.n	8002854 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0018      	movs	r0, r3
 80028ca:	f000 fdf7 	bl	80034bc <SPI_EndRxTxTransaction>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80028fe:	231f      	movs	r3, #31
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e003      	b.n	8002910 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	225d      	movs	r2, #93	; 0x5d
 800290c:	2101      	movs	r1, #1
 800290e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	225c      	movs	r2, #92	; 0x5c
 8002914:	2100      	movs	r1, #0
 8002916:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002918:	231f      	movs	r3, #31
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	781b      	ldrb	r3, [r3, #0]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b008      	add	sp, #32
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	1dbb      	adds	r3, r7, #6
 8002936:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002938:	2117      	movs	r1, #23
 800293a:	187b      	adds	r3, r7, r1
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	225d      	movs	r2, #93	; 0x5d
 8002944:	5c9b      	ldrb	r3, [r3, r2]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d003      	beq.n	8002954 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 800294c:	187b      	adds	r3, r7, r1
 800294e:	2202      	movs	r2, #2
 8002950:	701a      	strb	r2, [r3, #0]
    goto error;
 8002952:	e12b      	b.n	8002bac <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	2382      	movs	r3, #130	; 0x82
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	429a      	cmp	r2, r3
 800295e:	d113      	bne.n	8002988 <HAL_SPI_Receive+0x60>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10f      	bne.n	8002988 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	225d      	movs	r2, #93	; 0x5d
 800296c:	2104      	movs	r1, #4
 800296e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002970:	1dbb      	adds	r3, r7, #6
 8002972:	881c      	ldrh	r4, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	0023      	movs	r3, r4
 8002980:	f000 f924 	bl	8002bcc <HAL_SPI_TransmitReceive>
 8002984:	0003      	movs	r3, r0
 8002986:	e118      	b.n	8002bba <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	225c      	movs	r2, #92	; 0x5c
 800298c:	5c9b      	ldrb	r3, [r3, r2]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_SPI_Receive+0x6e>
 8002992:	2302      	movs	r3, #2
 8002994:	e111      	b.n	8002bba <HAL_SPI_Receive+0x292>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	225c      	movs	r2, #92	; 0x5c
 800299a:	2101      	movs	r1, #1
 800299c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800299e:	f7fe fb4d 	bl	800103c <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_SPI_Receive+0x8c>
 80029ac:	1dbb      	adds	r3, r7, #6
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d104      	bne.n	80029be <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80029b4:	2317      	movs	r3, #23
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80029bc:	e0f6      	b.n	8002bac <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	225d      	movs	r2, #93	; 0x5d
 80029c2:	2104      	movs	r1, #4
 80029c4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1dba      	adds	r2, r7, #6
 80029d6:	2144      	movs	r1, #68	; 0x44
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1dba      	adds	r2, r7, #6
 80029e0:	2146      	movs	r1, #70	; 0x46
 80029e2:	8812      	ldrh	r2, [r2, #0]
 80029e4:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	23e0      	movs	r3, #224	; 0xe0
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d908      	bls.n	8002a22 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	496a      	ldr	r1, [pc, #424]	; (8002bc4 <HAL_SPI_Receive+0x29c>)
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	e008      	b.n	8002a34 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	0149      	lsls	r1, r1, #5
 8002a30:	430a      	orrs	r2, r1
 8002a32:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d10f      	bne.n	8002a60 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	495b      	ldr	r1, [pc, #364]	; (8002bc8 <HAL_SPI_Receive+0x2a0>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2240      	movs	r2, #64	; 0x40
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d007      	beq.n	8002a7e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	23e0      	movs	r3, #224	; 0xe0
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d900      	bls.n	8002a8c <HAL_SPI_Receive+0x164>
 8002a8a:	e071      	b.n	8002b70 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a8c:	e035      	b.n	8002afa <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2201      	movs	r2, #1
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d117      	bne.n	8002acc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	001a      	movs	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	7812      	ldrb	r2, [r2, #0]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2246      	movs	r2, #70	; 0x46
 8002abc:	5a9b      	ldrh	r3, [r3, r2]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b299      	uxth	r1, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2246      	movs	r2, #70	; 0x46
 8002ac8:	5299      	strh	r1, [r3, r2]
 8002aca:	e016      	b.n	8002afa <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002acc:	f7fe fab6 	bl	800103c <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d802      	bhi.n	8002ae2 <HAL_SPI_Receive+0x1ba>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_SPI_Receive+0x1c0>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d108      	bne.n	8002afa <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002ae8:	2317      	movs	r3, #23
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2203      	movs	r2, #3
 8002aee:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	225d      	movs	r2, #93	; 0x5d
 8002af4:	2101      	movs	r1, #1
 8002af6:	5499      	strb	r1, [r3, r2]
          goto error;
 8002af8:	e058      	b.n	8002bac <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2246      	movs	r2, #70	; 0x46
 8002afe:	5a9b      	ldrh	r3, [r3, r2]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1c3      	bne.n	8002a8e <HAL_SPI_Receive+0x166>
 8002b06:	e039      	b.n	8002b7c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d115      	bne.n	8002b42 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	b292      	uxth	r2, r2
 8002b22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2246      	movs	r2, #70	; 0x46
 8002b32:	5a9b      	ldrh	r3, [r3, r2]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b299      	uxth	r1, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2246      	movs	r2, #70	; 0x46
 8002b3e:	5299      	strh	r1, [r3, r2]
 8002b40:	e016      	b.n	8002b70 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b42:	f7fe fa7b 	bl	800103c <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d802      	bhi.n	8002b58 <HAL_SPI_Receive+0x230>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	3301      	adds	r3, #1
 8002b56:	d102      	bne.n	8002b5e <HAL_SPI_Receive+0x236>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d108      	bne.n	8002b70 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002b5e:	2317      	movs	r3, #23
 8002b60:	18fb      	adds	r3, r7, r3
 8002b62:	2203      	movs	r2, #3
 8002b64:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	225d      	movs	r2, #93	; 0x5d
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b6e:	e01d      	b.n	8002bac <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2246      	movs	r2, #70	; 0x46
 8002b74:	5a9b      	ldrh	r3, [r3, r2]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1c5      	bne.n	8002b08 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	0018      	movs	r0, r3
 8002b84:	f000 fc3c 	bl	8003400 <SPI_EndRxTransaction>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002b9a:	2317      	movs	r3, #23
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e003      	b.n	8002bac <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	225d      	movs	r2, #93	; 0x5d
 8002ba8:	2101      	movs	r1, #1
 8002baa:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	225c      	movs	r2, #92	; 0x5c
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002bb4:	2317      	movs	r3, #23
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	781b      	ldrb	r3, [r3, #0]
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b007      	add	sp, #28
 8002bc0:	bd90      	pop	{r4, r7, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	ffffefff 	.word	0xffffefff
 8002bc8:	ffffbfff 	.word	0xffffbfff

08002bcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	001a      	movs	r2, r3
 8002bda:	1cbb      	adds	r3, r7, #2
 8002bdc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bde:	2301      	movs	r3, #1
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002be2:	2323      	movs	r3, #35	; 0x23
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	225c      	movs	r2, #92	; 0x5c
 8002bee:	5c9b      	ldrb	r3, [r3, r2]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_SPI_TransmitReceive+0x2c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e1c4      	b.n	8002f82 <HAL_SPI_TransmitReceive+0x3b6>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	225c      	movs	r2, #92	; 0x5c
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c00:	f7fe fa1c 	bl	800103c <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c08:	201b      	movs	r0, #27
 8002c0a:	183b      	adds	r3, r7, r0
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	215d      	movs	r1, #93	; 0x5d
 8002c10:	5c52      	ldrb	r2, [r2, r1]
 8002c12:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c1a:	2312      	movs	r3, #18
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	1cba      	adds	r2, r7, #2
 8002c20:	8812      	ldrh	r2, [r2, #0]
 8002c22:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c24:	183b      	adds	r3, r7, r0
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d011      	beq.n	8002c50 <HAL_SPI_TransmitReceive+0x84>
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	2382      	movs	r3, #130	; 0x82
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d107      	bne.n	8002c46 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_SPI_TransmitReceive+0x7a>
 8002c3e:	183b      	adds	r3, r7, r0
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d004      	beq.n	8002c50 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002c46:	2323      	movs	r3, #35	; 0x23
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c4e:	e191      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x98>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x98>
 8002c5c:	1cbb      	adds	r3, r7, #2
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002c64:	2323      	movs	r3, #35	; 0x23
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c6c:	e182      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	225d      	movs	r2, #93	; 0x5d
 8002c72:	5c9b      	ldrb	r3, [r3, r2]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d003      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	225d      	movs	r2, #93	; 0x5d
 8002c7e:	2105      	movs	r1, #5
 8002c80:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1cba      	adds	r2, r7, #2
 8002c92:	2146      	movs	r1, #70	; 0x46
 8002c94:	8812      	ldrh	r2, [r2, #0]
 8002c96:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1cba      	adds	r2, r7, #2
 8002c9c:	2144      	movs	r1, #68	; 0x44
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1cba      	adds	r2, r7, #2
 8002cac:	8812      	ldrh	r2, [r2, #0]
 8002cae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1cba      	adds	r2, r7, #2
 8002cb4:	8812      	ldrh	r2, [r2, #0]
 8002cb6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	23e0      	movs	r3, #224	; 0xe0
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d908      	bls.n	8002ce2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	49ac      	ldr	r1, [pc, #688]	; (8002f8c <HAL_SPI_TransmitReceive+0x3c0>)
 8002cdc:	400a      	ands	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	e008      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	0149      	lsls	r1, r1, #5
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2240      	movs	r2, #64	; 0x40
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b40      	cmp	r3, #64	; 0x40
 8002d00:	d007      	beq.n	8002d12 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2140      	movs	r1, #64	; 0x40
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	23e0      	movs	r3, #224	; 0xe0
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d800      	bhi.n	8002d20 <HAL_SPI_TransmitReceive+0x154>
 8002d1e:	e083      	b.n	8002e28 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_SPI_TransmitReceive+0x168>
 8002d28:	2312      	movs	r3, #18
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d000      	beq.n	8002d34 <HAL_SPI_TransmitReceive+0x168>
 8002d32:	e06d      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d58:	e05a      	b.n	8002e10 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d11b      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x1d4>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d016      	beq.n	8002da0 <HAL_SPI_TransmitReceive+0x1d4>
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d113      	bne.n	8002da0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	1c9a      	adds	r2, r3, #2
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2201      	movs	r2, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d11c      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x21c>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2246      	movs	r2, #70	; 0x46
 8002db2:	5a9b      	ldrh	r3, [r3, r2]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	1c9a      	adds	r2, r3, #2
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2246      	movs	r2, #70	; 0x46
 8002dd6:	5a9b      	ldrh	r3, [r3, r2]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b299      	uxth	r1, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2246      	movs	r2, #70	; 0x46
 8002de2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002de4:	2301      	movs	r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002de8:	f7fe f928 	bl	800103c <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d80b      	bhi.n	8002e10 <HAL_SPI_TransmitReceive+0x244>
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	d008      	beq.n	8002e10 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002dfe:	2323      	movs	r3, #35	; 0x23
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2203      	movs	r2, #3
 8002e04:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	225d      	movs	r2, #93	; 0x5d
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]
        goto error;
 8002e0e:	e0b1      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d19f      	bne.n	8002d5a <HAL_SPI_TransmitReceive+0x18e>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2246      	movs	r2, #70	; 0x46
 8002e1e:	5a9b      	ldrh	r3, [r3, r2]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d199      	bne.n	8002d5a <HAL_SPI_TransmitReceive+0x18e>
 8002e26:	e089      	b.n	8002f3c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x270>
 8002e30:	2312      	movs	r3, #18
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d000      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x270>
 8002e3a:	e074      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e62:	e060      	b.n	8002f26 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d11c      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x2e0>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d017      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x2e0>
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d114      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d11e      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x32c>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2246      	movs	r2, #70	; 0x46
 8002ebe:	5a9b      	ldrh	r3, [r3, r2]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d018      	beq.n	8002ef8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	330c      	adds	r3, #12
 8002ecc:	001a      	movs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	7812      	ldrb	r2, [r2, #0]
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2246      	movs	r2, #70	; 0x46
 8002ee6:	5a9b      	ldrh	r3, [r3, r2]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b299      	uxth	r1, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2246      	movs	r2, #70	; 0x46
 8002ef2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ef8:	f7fe f8a0 	bl	800103c <HAL_GetTick>
 8002efc:	0002      	movs	r2, r0
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d802      	bhi.n	8002f0e <HAL_SPI_TransmitReceive+0x342>
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x348>
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d108      	bne.n	8002f26 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002f14:	2323      	movs	r3, #35	; 0x23
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2203      	movs	r2, #3
 8002f1a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	225d      	movs	r2, #93	; 0x5d
 8002f20:	2101      	movs	r1, #1
 8002f22:	5499      	strb	r1, [r3, r2]
        goto error;
 8002f24:	e026      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d199      	bne.n	8002e64 <HAL_SPI_TransmitReceive+0x298>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2246      	movs	r2, #70	; 0x46
 8002f34:	5a9b      	ldrh	r3, [r3, r2]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d193      	bne.n	8002e64 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 faba 	bl	80034bc <SPI_EndRxTxTransaction>
 8002f48:	1e03      	subs	r3, r0, #0
 8002f4a:	d006      	beq.n	8002f5a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002f4c:	2323      	movs	r3, #35	; 0x23
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002f62:	2323      	movs	r3, #35	; 0x23
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e003      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	225d      	movs	r2, #93	; 0x5d
 8002f70:	2101      	movs	r1, #1
 8002f72:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	225c      	movs	r2, #92	; 0x5c
 8002f78:	2100      	movs	r1, #0
 8002f7a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f7c:	2323      	movs	r3, #35	; 0x23
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	781b      	ldrb	r3, [r3, #0]
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b00a      	add	sp, #40	; 0x28
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	ffffefff 	.word	0xffffefff

08002f90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	4013      	ands	r3, r2
 8002fae:	d10d      	bne.n	8002fcc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002fb6:	d009      	beq.n	8002fcc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2240      	movs	r2, #64	; 0x40
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d005      	beq.n	8002fcc <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	0010      	movs	r0, r2
 8002fc8:	4798      	blx	r3
    return;
 8002fca:	e0c5      	b.n	8003158 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d009      	beq.n	8002fe8 <HAL_SPI_IRQHandler+0x58>
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d005      	beq.n	8002fe8 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	0010      	movs	r0, r2
 8002fe4:	4798      	blx	r3
    return;
 8002fe6:	e0b7      	b.n	8003158 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2220      	movs	r2, #32
 8002fec:	4013      	ands	r3, r2
 8002fee:	d109      	bne.n	8003004 <HAL_SPI_IRQHandler+0x74>
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2240      	movs	r2, #64	; 0x40
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d105      	bne.n	8003004 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4013      	ands	r3, r2
 8003000:	d100      	bne.n	8003004 <HAL_SPI_IRQHandler+0x74>
 8003002:	e0a9      	b.n	8003158 <HAL_SPI_IRQHandler+0x1c8>
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2220      	movs	r2, #32
 8003008:	4013      	ands	r3, r2
 800300a:	d100      	bne.n	800300e <HAL_SPI_IRQHandler+0x7e>
 800300c:	e0a4      	b.n	8003158 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2240      	movs	r2, #64	; 0x40
 8003012:	4013      	ands	r3, r2
 8003014:	d023      	beq.n	800305e <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	225d      	movs	r2, #93	; 0x5d
 800301a:	5c9b      	ldrb	r3, [r3, r2]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b03      	cmp	r3, #3
 8003020:	d011      	beq.n	8003046 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003026:	2204      	movs	r2, #4
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	e00b      	b.n	800305e <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	693b      	ldr	r3, [r7, #16]
        return;
 800305c:	e07c      	b.n	8003158 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2220      	movs	r2, #32
 8003062:	4013      	ands	r3, r2
 8003064:	d014      	beq.n	8003090 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	2201      	movs	r2, #1
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2140      	movs	r1, #64	; 0x40
 800308a:	438a      	bics	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4013      	ands	r3, r2
 8003098:	d00c      	beq.n	80030b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309e:	2208      	movs	r2, #8
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d04c      	beq.n	8003156 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	21e0      	movs	r1, #224	; 0xe0
 80030c8:	438a      	bics	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	225d      	movs	r2, #93	; 0x5d
 80030d0:	2101      	movs	r1, #1
 80030d2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2202      	movs	r2, #2
 80030d8:	4013      	ands	r3, r2
 80030da:	d103      	bne.n	80030e4 <HAL_SPI_IRQHandler+0x154>
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2201      	movs	r2, #1
 80030e0:	4013      	ands	r3, r2
 80030e2:	d032      	beq.n	800314a <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2103      	movs	r1, #3
 80030f0:	438a      	bics	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	4a17      	ldr	r2, [pc, #92]	; (8003160 <HAL_SPI_IRQHandler+0x1d0>)
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	0018      	movs	r0, r3
 800310a:	f7fe f87f 	bl	800120c <HAL_DMA_Abort_IT>
 800310e:	1e03      	subs	r3, r0, #0
 8003110:	d005      	beq.n	800311e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003122:	2b00      	cmp	r3, #0
 8003124:	d016      	beq.n	8003154 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_SPI_IRQHandler+0x1d0>)
 800312c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	0018      	movs	r0, r3
 8003134:	f7fe f86a 	bl	800120c <HAL_DMA_Abort_IT>
 8003138:	1e03      	subs	r3, r0, #0
 800313a:	d00b      	beq.n	8003154 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003140:	2240      	movs	r2, #64	; 0x40
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003148:	e004      	b.n	8003154 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 f809 	bl	8003164 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003152:	e000      	b.n	8003156 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8003154:	46c0      	nop			; (mov r8, r8)
    return;
 8003156:	46c0      	nop			; (mov r8, r8)
  }
}
 8003158:	46bd      	mov	sp, r7
 800315a:	b008      	add	sp, #32
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	08003175 	.word	0x08003175

08003164 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800316c:	46c0      	nop			; (mov r8, r8)
 800316e:	46bd      	mov	sp, r7
 8003170:	b002      	add	sp, #8
 8003172:	bd80      	pop	{r7, pc}

08003174 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2246      	movs	r2, #70	; 0x46
 8003186:	2100      	movs	r1, #0
 8003188:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff ffe6 	bl	8003164 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b004      	add	sp, #16
 800319e:	bd80      	pop	{r7, pc}

080031a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031b0:	f7fd ff44 	bl	800103c <HAL_GetTick>
 80031b4:	0002      	movs	r2, r0
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	18d3      	adds	r3, r2, r3
 80031be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031c0:	f7fd ff3c 	bl	800103c <HAL_GetTick>
 80031c4:	0003      	movs	r3, r0
 80031c6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031c8:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	015b      	lsls	r3, r3, #5
 80031ce:	0d1b      	lsrs	r3, r3, #20
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	4353      	muls	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031d6:	e058      	b.n	800328a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	d055      	beq.n	800328a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031de:	f7fd ff2d 	bl	800103c <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d902      	bls.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d142      	bne.n	800327a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	21e0      	movs	r1, #224	; 0xe0
 8003200:	438a      	bics	r2, r1
 8003202:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	2382      	movs	r3, #130	; 0x82
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	429a      	cmp	r2, r3
 800320e:	d113      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	429a      	cmp	r2, r3
 800321a:	d005      	beq.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	429a      	cmp	r2, r3
 8003226:	d107      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2140      	movs	r1, #64	; 0x40
 8003234:	438a      	bics	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	019b      	lsls	r3, r3, #6
 8003240:	429a      	cmp	r2, r3
 8003242:	d110      	bne.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	491a      	ldr	r1, [pc, #104]	; (80032b8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003250:	400a      	ands	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	0189      	lsls	r1, r1, #6
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	225d      	movs	r2, #93	; 0x5d
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	225c      	movs	r2, #92	; 0x5c
 8003272:	2100      	movs	r1, #0
 8003274:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e017      	b.n	80032aa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3b01      	subs	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	425a      	negs	r2, r3
 800329a:	4153      	adcs	r3, r2
 800329c:	b2db      	uxtb	r3, r3
 800329e:	001a      	movs	r2, r3
 80032a0:	1dfb      	adds	r3, r7, #7
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d197      	bne.n	80031d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b008      	add	sp, #32
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	2000000c 	.word	0x2000000c
 80032b8:	ffffdfff 	.word	0xffffdfff

080032bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032ca:	2317      	movs	r3, #23
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032d2:	f7fd feb3 	bl	800103c <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	18d3      	adds	r3, r2, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032e2:	f7fd feab 	bl	800103c <HAL_GetTick>
 80032e6:	0003      	movs	r3, r0
 80032e8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032f2:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	0013      	movs	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	00da      	lsls	r2, r3, #3
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	0d1b      	lsrs	r3, r3, #20
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	4353      	muls	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003308:	e068      	b.n	80033dc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	23c0      	movs	r3, #192	; 0xc0
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	429a      	cmp	r2, r3
 8003312:	d10a      	bne.n	800332a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d107      	bne.n	800332a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	2117      	movs	r1, #23
 8003322:	187b      	adds	r3, r7, r1
 8003324:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003326:	187b      	adds	r3, r7, r1
 8003328:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	d055      	beq.n	80033dc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003330:	f7fd fe84 	bl	800103c <HAL_GetTick>
 8003334:	0002      	movs	r2, r0
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333c:	429a      	cmp	r2, r3
 800333e:	d902      	bls.n	8003346 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d142      	bne.n	80033cc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	21e0      	movs	r1, #224	; 0xe0
 8003352:	438a      	bics	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	2382      	movs	r3, #130	; 0x82
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	429a      	cmp	r2, r3
 8003360:	d113      	bne.n	800338a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	429a      	cmp	r2, r3
 800336c:	d005      	beq.n	800337a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	429a      	cmp	r2, r3
 8003378:	d107      	bne.n	800338a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	438a      	bics	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	429a      	cmp	r2, r3
 8003394:	d110      	bne.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4916      	ldr	r1, [pc, #88]	; (80033fc <SPI_WaitFifoStateUntilTimeout+0x140>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	0189      	lsls	r1, r1, #6
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	225d      	movs	r2, #93	; 0x5d
 80033bc:	2101      	movs	r1, #1
 80033be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	225c      	movs	r2, #92	; 0x5c
 80033c4:	2100      	movs	r1, #0
 80033c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e010      	b.n	80033ee <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3b01      	subs	r3, #1
 80033da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d18e      	bne.n	800330a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b00a      	add	sp, #40	; 0x28
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	2000000c 	.word	0x2000000c
 80033fc:	ffffdfff 	.word	0xffffdfff

08003400 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af02      	add	r7, sp, #8
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	2382      	movs	r3, #130	; 0x82
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	429a      	cmp	r2, r3
 8003416:	d113      	bne.n	8003440 <SPI_EndRxTransaction+0x40>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	429a      	cmp	r2, r3
 8003422:	d005      	beq.n	8003430 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	2380      	movs	r3, #128	; 0x80
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	429a      	cmp	r2, r3
 800342e:	d107      	bne.n	8003440 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2140      	movs	r1, #64	; 0x40
 800343c:	438a      	bics	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	0013      	movs	r3, r2
 800344a:	2200      	movs	r2, #0
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	f7ff fea7 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 8003452:	1e03      	subs	r3, r0, #0
 8003454:	d007      	beq.n	8003466 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345a:	2220      	movs	r2, #32
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e026      	b.n	80034b4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	2382      	movs	r3, #130	; 0x82
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	429a      	cmp	r2, r3
 8003470:	d11f      	bne.n	80034b2 <SPI_EndRxTransaction+0xb2>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	429a      	cmp	r2, r3
 800347c:	d005      	beq.n	800348a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	2380      	movs	r3, #128	; 0x80
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	429a      	cmp	r2, r3
 8003488:	d113      	bne.n	80034b2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	23c0      	movs	r3, #192	; 0xc0
 800348e:	00d9      	lsls	r1, r3, #3
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	0013      	movs	r3, r2
 8003498:	2200      	movs	r2, #0
 800349a:	f7ff ff0f 	bl	80032bc <SPI_WaitFifoStateUntilTimeout>
 800349e:	1e03      	subs	r3, r0, #0
 80034a0:	d007      	beq.n	80034b2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a6:	2220      	movs	r2, #32
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e000      	b.n	80034b4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b004      	add	sp, #16
 80034ba:	bd80      	pop	{r7, pc}

080034bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	23c0      	movs	r3, #192	; 0xc0
 80034cc:	0159      	lsls	r1, r3, #5
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	0013      	movs	r3, r2
 80034d6:	2200      	movs	r2, #0
 80034d8:	f7ff fef0 	bl	80032bc <SPI_WaitFifoStateUntilTimeout>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d007      	beq.n	80034f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e4:	2220      	movs	r2, #32
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e027      	b.n	8003540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	0013      	movs	r3, r2
 80034fa:	2200      	movs	r2, #0
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	f7ff fe4f 	bl	80031a0 <SPI_WaitFlagStateUntilTimeout>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d007      	beq.n	8003516 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350a:	2220      	movs	r2, #32
 800350c:	431a      	orrs	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e014      	b.n	8003540 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	23c0      	movs	r3, #192	; 0xc0
 800351a:	00d9      	lsls	r1, r3, #3
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	0013      	movs	r3, r2
 8003524:	2200      	movs	r2, #0
 8003526:	f7ff fec9 	bl	80032bc <SPI_WaitFifoStateUntilTimeout>
 800352a:	1e03      	subs	r3, r0, #0
 800352c:	d007      	beq.n	800353e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	2220      	movs	r2, #32
 8003534:	431a      	orrs	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e000      	b.n	8003540 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e042      	b.n	80035e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	223d      	movs	r2, #61	; 0x3d
 800355e:	5c9b      	ldrb	r3, [r3, r2]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d107      	bne.n	8003576 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	223c      	movs	r2, #60	; 0x3c
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0018      	movs	r0, r3
 8003572:	f7fd f907 	bl	8000784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	223d      	movs	r2, #61	; 0x3d
 800357a:	2102      	movs	r1, #2
 800357c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3304      	adds	r3, #4
 8003586:	0019      	movs	r1, r3
 8003588:	0010      	movs	r0, r2
 800358a:	f000 fa37 	bl	80039fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2246      	movs	r2, #70	; 0x46
 8003592:	2101      	movs	r1, #1
 8003594:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	223e      	movs	r2, #62	; 0x3e
 800359a:	2101      	movs	r1, #1
 800359c:	5499      	strb	r1, [r3, r2]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	223f      	movs	r2, #63	; 0x3f
 80035a2:	2101      	movs	r1, #1
 80035a4:	5499      	strb	r1, [r3, r2]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2240      	movs	r2, #64	; 0x40
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2241      	movs	r2, #65	; 0x41
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2242      	movs	r2, #66	; 0x42
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2243      	movs	r2, #67	; 0x43
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2244      	movs	r2, #68	; 0x44
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2245      	movs	r2, #69	; 0x45
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	223d      	movs	r2, #61	; 0x3d
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2202      	movs	r2, #2
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d124      	bne.n	8003648 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	4013      	ands	r3, r2
 8003608:	2b02      	cmp	r3, #2
 800360a:	d11d      	bne.n	8003648 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2203      	movs	r2, #3
 8003612:	4252      	negs	r2, r2
 8003614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2203      	movs	r2, #3
 8003624:	4013      	ands	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	0018      	movs	r0, r3
 800362c:	f000 f9ce 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 8003630:	e007      	b.n	8003642 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 f9c1 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f9cd 	bl	80039dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2204      	movs	r2, #4
 8003650:	4013      	ands	r3, r2
 8003652:	2b04      	cmp	r3, #4
 8003654:	d125      	bne.n	80036a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2204      	movs	r2, #4
 800365e:	4013      	ands	r3, r2
 8003660:	2b04      	cmp	r3, #4
 8003662:	d11e      	bne.n	80036a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2205      	movs	r2, #5
 800366a:	4252      	negs	r2, r2
 800366c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	23c0      	movs	r3, #192	; 0xc0
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4013      	ands	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f000 f9a1 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 800368a:	e007      	b.n	800369c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0018      	movs	r0, r3
 8003690:	f000 f994 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f9a0 	bl	80039dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2208      	movs	r2, #8
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d124      	bne.n	80036fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2208      	movs	r2, #8
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d11d      	bne.n	80036fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2209      	movs	r2, #9
 80036c4:	4252      	negs	r2, r2
 80036c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2204      	movs	r2, #4
 80036cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	2203      	movs	r2, #3
 80036d6:	4013      	ands	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 f975 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 80036e2:	e007      	b.n	80036f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f968 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 f974 	bl	80039dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2210      	movs	r2, #16
 8003702:	4013      	ands	r3, r2
 8003704:	2b10      	cmp	r3, #16
 8003706:	d125      	bne.n	8003754 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2210      	movs	r2, #16
 8003710:	4013      	ands	r3, r2
 8003712:	2b10      	cmp	r3, #16
 8003714:	d11e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2211      	movs	r2, #17
 800371c:	4252      	negs	r2, r2
 800371e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2208      	movs	r2, #8
 8003724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	23c0      	movs	r3, #192	; 0xc0
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4013      	ands	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0018      	movs	r0, r3
 8003738:	f000 f948 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 800373c:	e007      	b.n	800374e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	0018      	movs	r0, r3
 8003742:	f000 f93b 	bl	80039bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0018      	movs	r0, r3
 800374a:	f000 f947 	bl	80039dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2201      	movs	r2, #1
 800375c:	4013      	ands	r3, r2
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10f      	bne.n	8003782 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	2b01      	cmp	r3, #1
 800376e:	d108      	bne.n	8003782 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2202      	movs	r2, #2
 8003776:	4252      	negs	r2, r2
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f7fc fd71 	bl	8000264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2280      	movs	r2, #128	; 0x80
 800378a:	4013      	ands	r3, r2
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d10f      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	4013      	ands	r3, r2
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d108      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2281      	movs	r2, #129	; 0x81
 80037a4:	4252      	negs	r2, r2
 80037a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 fa96 	bl	8003cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	4013      	ands	r3, r2
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d10f      	bne.n	80037de <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	d108      	bne.n	80037de <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2241      	movs	r2, #65	; 0x41
 80037d2:	4252      	negs	r2, r2
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f907 	bl	80039ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2220      	movs	r2, #32
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d10f      	bne.n	800380c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d108      	bne.n	800380c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2221      	movs	r2, #33	; 0x21
 8003800:	4252      	negs	r2, r2
 8003802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	0018      	movs	r0, r3
 8003808:	f000 fa60 	bl	8003ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	230f      	movs	r3, #15
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	223c      	movs	r2, #60	; 0x3c
 800382a:	5c9b      	ldrb	r3, [r3, r2]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_TIM_ConfigClockSource+0x20>
 8003830:	2302      	movs	r3, #2
 8003832:	e0bc      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x19a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	223c      	movs	r2, #60	; 0x3c
 8003838:	2101      	movs	r1, #1
 800383a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	223d      	movs	r2, #61	; 0x3d
 8003840:	2102      	movs	r1, #2
 8003842:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2277      	movs	r2, #119	; 0x77
 8003850:	4393      	bics	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003858:	4013      	ands	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	0192      	lsls	r2, r2, #6
 800386c:	4293      	cmp	r3, r2
 800386e:	d040      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0xde>
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	0192      	lsls	r2, r2, #6
 8003874:	4293      	cmp	r3, r2
 8003876:	d900      	bls.n	800387a <HAL_TIM_ConfigClockSource+0x66>
 8003878:	e088      	b.n	800398c <HAL_TIM_ConfigClockSource+0x178>
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	0152      	lsls	r2, r2, #5
 800387e:	4293      	cmp	r3, r2
 8003880:	d100      	bne.n	8003884 <HAL_TIM_ConfigClockSource+0x70>
 8003882:	e088      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x182>
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	0152      	lsls	r2, r2, #5
 8003888:	4293      	cmp	r3, r2
 800388a:	d900      	bls.n	800388e <HAL_TIM_ConfigClockSource+0x7a>
 800388c:	e07e      	b.n	800398c <HAL_TIM_ConfigClockSource+0x178>
 800388e:	2b70      	cmp	r3, #112	; 0x70
 8003890:	d018      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0xb0>
 8003892:	d900      	bls.n	8003896 <HAL_TIM_ConfigClockSource+0x82>
 8003894:	e07a      	b.n	800398c <HAL_TIM_ConfigClockSource+0x178>
 8003896:	2b60      	cmp	r3, #96	; 0x60
 8003898:	d04f      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x126>
 800389a:	d900      	bls.n	800389e <HAL_TIM_ConfigClockSource+0x8a>
 800389c:	e076      	b.n	800398c <HAL_TIM_ConfigClockSource+0x178>
 800389e:	2b50      	cmp	r3, #80	; 0x50
 80038a0:	d03b      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x106>
 80038a2:	d900      	bls.n	80038a6 <HAL_TIM_ConfigClockSource+0x92>
 80038a4:	e072      	b.n	800398c <HAL_TIM_ConfigClockSource+0x178>
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d057      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x146>
 80038aa:	d900      	bls.n	80038ae <HAL_TIM_ConfigClockSource+0x9a>
 80038ac:	e06e      	b.n	800398c <HAL_TIM_ConfigClockSource+0x178>
 80038ae:	2b30      	cmp	r3, #48	; 0x30
 80038b0:	d063      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x166>
 80038b2:	d86b      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x178>
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d060      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x166>
 80038b8:	d868      	bhi.n	800398c <HAL_TIM_ConfigClockSource+0x178>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d05d      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x166>
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d05b      	beq.n	800397a <HAL_TIM_ConfigClockSource+0x166>
 80038c2:	e063      	b.n	800398c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	f000 f982 	bl	8003bdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2277      	movs	r2, #119	; 0x77
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	609a      	str	r2, [r3, #8]
      break;
 80038f0:	e052      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003902:	f000 f96b 	bl	8003bdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2180      	movs	r1, #128	; 0x80
 8003912:	01c9      	lsls	r1, r1, #7
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
      break;
 8003918:	e03e      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003926:	001a      	movs	r2, r3
 8003928:	f000 f8de 	bl	8003ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2150      	movs	r1, #80	; 0x50
 8003932:	0018      	movs	r0, r3
 8003934:	f000 f938 	bl	8003ba8 <TIM_ITRx_SetConfig>
      break;
 8003938:	e02e      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003946:	001a      	movs	r2, r3
 8003948:	f000 f8fc 	bl	8003b44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2160      	movs	r1, #96	; 0x60
 8003952:	0018      	movs	r0, r3
 8003954:	f000 f928 	bl	8003ba8 <TIM_ITRx_SetConfig>
      break;
 8003958:	e01e      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	001a      	movs	r2, r3
 8003968:	f000 f8be 	bl	8003ae8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2140      	movs	r1, #64	; 0x40
 8003972:	0018      	movs	r0, r3
 8003974:	f000 f918 	bl	8003ba8 <TIM_ITRx_SetConfig>
      break;
 8003978:	e00e      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	0019      	movs	r1, r3
 8003984:	0010      	movs	r0, r2
 8003986:	f000 f90f 	bl	8003ba8 <TIM_ITRx_SetConfig>
      break;
 800398a:	e005      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800398c:	230f      	movs	r3, #15
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
      break;
 8003994:	e000      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003996:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	223d      	movs	r2, #61	; 0x3d
 800399c:	2101      	movs	r1, #1
 800399e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	223c      	movs	r2, #60	; 0x3c
 80039a4:	2100      	movs	r1, #0
 80039a6:	5499      	strb	r1, [r3, r2]

  return status;
 80039a8:	230f      	movs	r3, #15
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	781b      	ldrb	r3, [r3, #0]
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b004      	add	sp, #16
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	ffff00ff 	.word	0xffff00ff

080039bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b002      	add	sp, #8
 80039fa:	bd80      	pop	{r7, pc}

080039fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a30      	ldr	r2, [pc, #192]	; (8003ad0 <TIM_Base_SetConfig+0xd4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d008      	beq.n	8003a26 <TIM_Base_SetConfig+0x2a>
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	05db      	lsls	r3, r3, #23
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d003      	beq.n	8003a26 <TIM_Base_SetConfig+0x2a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <TIM_Base_SetConfig+0xd8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d108      	bne.n	8003a38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2270      	movs	r2, #112	; 0x70
 8003a2a:	4393      	bics	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <TIM_Base_SetConfig+0xd4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d014      	beq.n	8003a6a <TIM_Base_SetConfig+0x6e>
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	2380      	movs	r3, #128	; 0x80
 8003a44:	05db      	lsls	r3, r3, #23
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d00f      	beq.n	8003a6a <TIM_Base_SetConfig+0x6e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a21      	ldr	r2, [pc, #132]	; (8003ad4 <TIM_Base_SetConfig+0xd8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <TIM_Base_SetConfig+0x6e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <TIM_Base_SetConfig+0xdc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <TIM_Base_SetConfig+0x6e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <TIM_Base_SetConfig+0xe0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d003      	beq.n	8003a6a <TIM_Base_SetConfig+0x6e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <TIM_Base_SetConfig+0xe4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d108      	bne.n	8003a7c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <TIM_Base_SetConfig+0xe8>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2280      	movs	r2, #128	; 0x80
 8003a80:	4393      	bics	r3, r2
 8003a82:	001a      	movs	r2, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <TIM_Base_SetConfig+0xd4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_Base_SetConfig+0xbe>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <TIM_Base_SetConfig+0xe0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0xbe>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <TIM_Base_SetConfig+0xe4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d103      	bne.n	8003ac2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	615a      	str	r2, [r3, #20]
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b004      	add	sp, #16
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40002000 	.word	0x40002000
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800
 8003ae4:	fffffcff 	.word	0xfffffcff

08003ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	2201      	movs	r2, #1
 8003b00:	4393      	bics	r3, r2
 8003b02:	001a      	movs	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	22f0      	movs	r2, #240	; 0xf0
 8003b12:	4393      	bics	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	220a      	movs	r2, #10
 8003b24:	4393      	bics	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	621a      	str	r2, [r3, #32]
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b006      	add	sp, #24
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	2210      	movs	r2, #16
 8003b56:	4393      	bics	r3, r2
 8003b58:	001a      	movs	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <TIM_TI2_ConfigInputStage+0x60>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	031b      	lsls	r3, r3, #12
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	22a0      	movs	r2, #160	; 0xa0
 8003b80:	4393      	bics	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b006      	add	sp, #24
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	ffff0fff 	.word	0xffff0fff

08003ba8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2270      	movs	r2, #112	; 0x70
 8003bbc:	4393      	bics	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	2207      	movs	r2, #7
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	609a      	str	r2, [r3, #8]
}
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b004      	add	sp, #16
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <TIM_ETR_SetConfig+0x3c>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b006      	add	sp, #24
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	ffff00ff 	.word	0xffff00ff

08003c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	223c      	movs	r2, #60	; 0x3c
 8003c2a:	5c9b      	ldrb	r3, [r3, r2]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e042      	b.n	8003cba <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	223c      	movs	r2, #60	; 0x3c
 8003c38:	2101      	movs	r1, #1
 8003c3a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	223d      	movs	r2, #61	; 0x3d
 8003c40:	2102      	movs	r1, #2
 8003c42:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2270      	movs	r2, #112	; 0x70
 8003c58:	4393      	bics	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00a      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	05db      	lsls	r3, r3, #23
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d004      	beq.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0f      	ldr	r2, [pc, #60]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2280      	movs	r2, #128	; 0x80
 8003c92:	4393      	bics	r3, r2
 8003c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	223d      	movs	r2, #61	; 0x3d
 8003cac:	2101      	movs	r1, #1
 8003cae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	223c      	movs	r2, #60	; 0x3c
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b004      	add	sp, #16
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40000400 	.word	0x40000400

08003ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce4:	46c0      	nop			; (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b002      	add	sp, #8
 8003cea:	bd80      	pop	{r7, pc}

08003cec <memset>:
 8003cec:	0003      	movs	r3, r0
 8003cee:	1882      	adds	r2, r0, r2
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	7019      	strb	r1, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>

08003cfc <__libc_init_array>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	2600      	movs	r6, #0
 8003d00:	4c0c      	ldr	r4, [pc, #48]	; (8003d34 <__libc_init_array+0x38>)
 8003d02:	4d0d      	ldr	r5, [pc, #52]	; (8003d38 <__libc_init_array+0x3c>)
 8003d04:	1b64      	subs	r4, r4, r5
 8003d06:	10a4      	asrs	r4, r4, #2
 8003d08:	42a6      	cmp	r6, r4
 8003d0a:	d109      	bne.n	8003d20 <__libc_init_array+0x24>
 8003d0c:	2600      	movs	r6, #0
 8003d0e:	f000 f823 	bl	8003d58 <_init>
 8003d12:	4c0a      	ldr	r4, [pc, #40]	; (8003d3c <__libc_init_array+0x40>)
 8003d14:	4d0a      	ldr	r5, [pc, #40]	; (8003d40 <__libc_init_array+0x44>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	42a6      	cmp	r6, r4
 8003d1c:	d105      	bne.n	8003d2a <__libc_init_array+0x2e>
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
 8003d20:	00b3      	lsls	r3, r6, #2
 8003d22:	58eb      	ldr	r3, [r5, r3]
 8003d24:	4798      	blx	r3
 8003d26:	3601      	adds	r6, #1
 8003d28:	e7ee      	b.n	8003d08 <__libc_init_array+0xc>
 8003d2a:	00b3      	lsls	r3, r6, #2
 8003d2c:	58eb      	ldr	r3, [r5, r3]
 8003d2e:	4798      	blx	r3
 8003d30:	3601      	adds	r6, #1
 8003d32:	e7f2      	b.n	8003d1a <__libc_init_array+0x1e>
 8003d34:	08003da0 	.word	0x08003da0
 8003d38:	08003da0 	.word	0x08003da0
 8003d3c:	08003da4 	.word	0x08003da4
 8003d40:	08003da0 	.word	0x08003da0

08003d44 <memcpy>:
 8003d44:	2300      	movs	r3, #0
 8003d46:	b510      	push	{r4, lr}
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d100      	bne.n	8003d4e <memcpy+0xa>
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	5ccc      	ldrb	r4, [r1, r3]
 8003d50:	54c4      	strb	r4, [r0, r3]
 8003d52:	3301      	adds	r3, #1
 8003d54:	e7f8      	b.n	8003d48 <memcpy+0x4>
	...

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
