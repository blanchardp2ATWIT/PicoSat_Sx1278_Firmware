
Transmission_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc4  08003bc4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc4  08003bc4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000018  08003be4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08003be4  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8d1  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f85  00000000  00000000  0002c954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0002e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fa  00000000  00000000  0002f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012707  00000000  00000000  0002ffb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2de  00000000  00000000  000426b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006f00d  00000000  00000000  00051997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e18  00000000  00000000  000c09a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000c37bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b7c 	.word	0x08003b7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08003b7c 	.word	0x08003b7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800022a:	2108      	movs	r1, #8
 800022c:	0018      	movs	r0, r3
 800022e:	f001 f888 	bl	8001342 <HAL_GPIO_TogglePin>
	sx1278_transmit(&r.radio, &hspi1, data, 12);
 8000232:	4a06      	ldr	r2, [pc, #24]	; (800024c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000234:	4906      	ldr	r1, [pc, #24]	; (8000250 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000236:	4807      	ldr	r0, [pc, #28]	; (8000254 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000238:	230c      	movs	r3, #12
 800023a:	f000 fd17 	bl	8000c6c <sx1278_transmit>
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b002      	add	sp, #8
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	48000400 	.word	0x48000400
 800024c:	20000000 	.word	0x20000000
 8000250:	20000054 	.word	0x20000054
 8000254:	20000100 	.word	0x20000100

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 800025c:	f000 fd64 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000260:	f000 f826 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000264:	f000 f97a 	bl	800055c <MX_GPIO_Init>
  MX_RTC_Init();
 8000268:	f000 f87e 	bl	8000368 <MX_RTC_Init>
  MX_SPI1_Init();
 800026c:	f000 f8de 	bl	800042c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000270:	f000 f91a 	bl	80004a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim1);
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <main+0x48>)
 8000276:	0018      	movs	r0, r3
 8000278:	f003 f836 	bl	80032e8 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <main+0x48>)
 800027e:	0018      	movs	r0, r3
 8000280:	f003 f882 	bl	8003388 <HAL_TIM_Base_Start_IT>
  sx1278_init(&r.radio, &hspi1);
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <main+0x4c>)
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <main+0x50>)
 8000288:	0011      	movs	r1, r2
 800028a:	0018      	movs	r0, r3
 800028c:	f000 fbf5 	bl	8000a7a <sx1278_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  sx1278_transmit(&r.radio, &hspi1, data,12);
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <main+0x54>)
 8000292:	4904      	ldr	r1, [pc, #16]	; (80002a4 <main+0x4c>)
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <main+0x50>)
 8000296:	230c      	movs	r3, #12
 8000298:	f000 fce8 	bl	8000c6c <sx1278_transmit>
 800029c:	e7f8      	b.n	8000290 <main+0x38>
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	200000b8 	.word	0x200000b8
 80002a4:	20000054 	.word	0x20000054
 80002a8:	20000100 	.word	0x20000100
 80002ac:	20000000 	.word	0x20000000

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b095      	sub	sp, #84	; 0x54
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	2420      	movs	r4, #32
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	0018      	movs	r0, r3
 80002bc:	2330      	movs	r3, #48	; 0x30
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f003 fc2f 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	2310      	movs	r3, #16
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	0018      	movs	r0, r3
 80002cc:	2310      	movs	r3, #16
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f003 fc27 	bl	8003b24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	2310      	movs	r3, #16
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f003 fc20 	bl	8003b24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	220a      	movs	r2, #10
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2210      	movs	r2, #16
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2201      	movs	r2, #1
 80002fc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	187b      	adds	r3, r7, r1
 8000306:	0018      	movs	r0, r3
 8000308:	f001 f836 	bl	8001378 <HAL_RCC_OscConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000310:	f000 f986 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	2110      	movs	r1, #16
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2207      	movs	r2, #7
 800031a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2100      	movs	r1, #0
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fb3a 	bl	80019ac <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800033c:	f000 f970 	bl	8000620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000340:	003b      	movs	r3, r7
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	0252      	lsls	r2, r2, #9
 8000346:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000348:	003b      	movs	r3, r7
 800034a:	2280      	movs	r2, #128	; 0x80
 800034c:	0092      	lsls	r2, r2, #2
 800034e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000350:	003b      	movs	r3, r7
 8000352:	0018      	movs	r0, r3
 8000354:	f001 fc4e 	bl	8001bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800035c:	f000 f960 	bl	8000620 <Error_Handler>
  }
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	b015      	add	sp, #84	; 0x54
 8000366:	bd90      	pop	{r4, r7, pc}

08000368 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	0018      	movs	r0, r3
 8000372:	2314      	movs	r3, #20
 8000374:	001a      	movs	r2, r3
 8000376:	2100      	movs	r1, #0
 8000378:	f003 fbd4 	bl	8003b24 <memset>
  RTC_DateTypeDef sDate = {0};
 800037c:	003b      	movs	r3, r7
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000382:	4b28      	ldr	r3, [pc, #160]	; (8000424 <MX_RTC_Init+0xbc>)
 8000384:	4a28      	ldr	r2, [pc, #160]	; (8000428 <MX_RTC_Init+0xc0>)
 8000386:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000388:	4b26      	ldr	r3, [pc, #152]	; (8000424 <MX_RTC_Init+0xbc>)
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800038e:	4b25      	ldr	r3, [pc, #148]	; (8000424 <MX_RTC_Init+0xbc>)
 8000390:	227f      	movs	r2, #127	; 0x7f
 8000392:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <MX_RTC_Init+0xbc>)
 8000396:	22ff      	movs	r2, #255	; 0xff
 8000398:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800039a:	4b22      	ldr	r3, [pc, #136]	; (8000424 <MX_RTC_Init+0xbc>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003a0:	4b20      	ldr	r3, [pc, #128]	; (8000424 <MX_RTC_Init+0xbc>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003a6:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <MX_RTC_Init+0xbc>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <MX_RTC_Init+0xbc>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 fcee 	bl	8001d90 <HAL_RTC_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80003b8:	f000 f932 	bl	8000620 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003da:	1d39      	adds	r1, r7, #4
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_RTC_Init+0xbc>)
 80003de:	2201      	movs	r2, #1
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fd6d 	bl	8001ec0 <HAL_RTC_SetTime>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80003ea:	f000 f919 	bl	8000620 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003ee:	003b      	movs	r3, r7
 80003f0:	2201      	movs	r2, #1
 80003f2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003f4:	003b      	movs	r3, r7
 80003f6:	2201      	movs	r2, #1
 80003f8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80003fa:	003b      	movs	r3, r7
 80003fc:	2201      	movs	r2, #1
 80003fe:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000400:	003b      	movs	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000406:	0039      	movs	r1, r7
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_RTC_Init+0xbc>)
 800040a:	2201      	movs	r2, #1
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fdfd 	bl	800200c <HAL_RTC_SetDate>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8000416:	f000 f903 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b006      	add	sp, #24
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	20000034 	.word	0x20000034
 8000428:	40002800 	.word	0x40002800

0800042c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <MX_SPI1_Init+0x78>)
 8000434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000438:	2282      	movs	r2, #130	; 0x82
 800043a:	0052      	lsls	r2, r2, #1
 800043c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000446:	22e0      	movs	r2, #224	; 0xe0
 8000448:	00d2      	lsls	r2, r2, #3
 800044a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <MX_SPI1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_SPI1_Init+0x74>)
 800045a:	2280      	movs	r2, #128	; 0x80
 800045c:	0092      	lsls	r2, r2, #2
 800045e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000462:	2208      	movs	r2, #8
 8000464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_SPI1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_SPI1_Init+0x74>)
 800047a:	2207      	movs	r2, #7
 800047c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_SPI1_Init+0x74>)
 8000486:	2208      	movs	r2, #8
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <MX_SPI1_Init+0x74>)
 800048c:	0018      	movs	r0, r3
 800048e:	f001 ff03 	bl	8002298 <HAL_SPI_Init>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000496:	f000 f8c3 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000054 	.word	0x20000054
 80004a4:	40013000 	.word	0x40013000

080004a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ae:	2308      	movs	r3, #8
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	0018      	movs	r0, r3
 80004b4:	2310      	movs	r3, #16
 80004b6:	001a      	movs	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f003 fb33 	bl	8003b24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004be:	003b      	movs	r3, r7
 80004c0:	0018      	movs	r0, r3
 80004c2:	2308      	movs	r3, #8
 80004c4:	001a      	movs	r2, r3
 80004c6:	2100      	movs	r1, #0
 80004c8:	f003 fb2c 	bl	8003b24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004cc:	4b20      	ldr	r3, [pc, #128]	; (8000550 <MX_TIM1_Init+0xa8>)
 80004ce:	4a21      	ldr	r2, [pc, #132]	; (8000554 <MX_TIM1_Init+0xac>)
 80004d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 256;
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <MX_TIM1_Init+0xa8>)
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	0052      	lsls	r2, r2, #1
 80004d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_TIM1_Init+0xa8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_TIM1_Init+0xa8>)
 80004e2:	4a1d      	ldr	r2, [pc, #116]	; (8000558 <MX_TIM1_Init+0xb0>)
 80004e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_TIM1_Init+0xa8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_TIM1_Init+0xa8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_TIM1_Init+0xa8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_TIM1_Init+0xa8>)
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 fef4 	bl	80032e8 <HAL_TIM_Base_Init>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000504:	f000 f88c 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000508:	2108      	movs	r1, #8
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	0152      	lsls	r2, r2, #5
 8000510:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000512:	187a      	adds	r2, r7, r1
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_TIM1_Init+0xa8>)
 8000516:	0011      	movs	r1, r2
 8000518:	0018      	movs	r0, r3
 800051a:	f003 f897 	bl	800364c <HAL_TIM_ConfigClockSource>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000522:	f000 f87d 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000526:	003b      	movs	r3, r7
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052c:	003b      	movs	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000532:	003a      	movs	r2, r7
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_TIM1_Init+0xa8>)
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f003 fa8b 	bl	8003a54 <HAL_TIMEx_MasterConfigSynchronization>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000542:	f000 f86d 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b006      	add	sp, #24
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	200000b8 	.word	0x200000b8
 8000554:	40012c00 	.word	0x40012c00
 8000558:	0000ffff 	.word	0x0000ffff

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b089      	sub	sp, #36	; 0x24
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	240c      	movs	r4, #12
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f003 fad9 	bl	8003b24 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b29      	ldr	r3, [pc, #164]	; (8000618 <MX_GPIO_Init+0xbc>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b28      	ldr	r3, [pc, #160]	; (8000618 <MX_GPIO_Init+0xbc>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0289      	lsls	r1, r1, #10
 800057c:	430a      	orrs	r2, r1
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <MX_GPIO_Init+0xbc>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	029b      	lsls	r3, r3, #10
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <MX_GPIO_Init+0xbc>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <MX_GPIO_Init+0xbc>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	02c9      	lsls	r1, r1, #11
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_GPIO_Init+0xbc>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	02db      	lsls	r3, r3, #11
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005aa:	2390      	movs	r3, #144	; 0x90
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2200      	movs	r2, #0
 80005b0:	2110      	movs	r1, #16
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fea8 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_GPIO_Init+0xc0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	2108      	movs	r1, #8
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 fea2 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2210      	movs	r2, #16
 80005c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2201      	movs	r2, #1
 80005ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	193a      	adds	r2, r7, r4
 80005de:	2390      	movs	r3, #144	; 0x90
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f000 fd27 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005ea:	0021      	movs	r1, r4
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2208      	movs	r2, #8
 80005f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	187b      	adds	r3, r7, r1
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <MX_GPIO_Init+0xc0>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f000 fd14 	bl	8001038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b009      	add	sp, #36	; 0x24
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	48000400 	.word	0x48000400

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <HAL_MspInit+0x44>)
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <HAL_MspInit+0x44>)
 8000638:	2101      	movs	r1, #1
 800063a:	430a      	orrs	r2, r1
 800063c:	619a      	str	r2, [r3, #24]
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <HAL_MspInit+0x44>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	2201      	movs	r2, #1
 8000644:	4013      	ands	r3, r2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <HAL_MspInit+0x44>)
 800064c:	69da      	ldr	r2, [r3, #28]
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_MspInit+0x44>)
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	0549      	lsls	r1, r1, #21
 8000654:	430a      	orrs	r2, r1
 8000656:	61da      	str	r2, [r3, #28]
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_MspInit+0x44>)
 800065a:	69da      	ldr	r2, [r3, #28]
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	055b      	lsls	r3, r3, #21
 8000660:	4013      	ands	r3, r2
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_RTC_MspInit+0x28>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d106      	bne.n	8000694 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_RTC_MspInit+0x2c>)
 8000688:	6a1a      	ldr	r2, [r3, #32]
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_RTC_MspInit+0x2c>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	0209      	lsls	r1, r1, #8
 8000690:	430a      	orrs	r2, r1
 8000692:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40002800 	.word	0x40002800
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b08b      	sub	sp, #44	; 0x2c
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	2414      	movs	r4, #20
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	0018      	movs	r0, r3
 80006b2:	2314      	movs	r3, #20
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f003 fa34 	bl	8003b24 <memset>
  if(hspi->Instance==SPI1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a20      	ldr	r2, [pc, #128]	; (8000744 <HAL_SPI_MspInit+0xa0>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d13a      	bne.n	800073c <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <HAL_SPI_MspInit+0xa4>)
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <HAL_SPI_MspInit+0xa4>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	0149      	lsls	r1, r1, #5
 80006d0:	430a      	orrs	r2, r1
 80006d2:	619a      	str	r2, [r3, #24]
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <HAL_SPI_MspInit+0xa4>)
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	015b      	lsls	r3, r3, #5
 80006dc:	4013      	ands	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <HAL_SPI_MspInit+0xa4>)
 80006e4:	695a      	ldr	r2, [r3, #20]
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_SPI_MspInit+0xa4>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	0289      	lsls	r1, r1, #10
 80006ec:	430a      	orrs	r2, r1
 80006ee:	615a      	str	r2, [r3, #20]
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_SPI_MspInit+0xa4>)
 80006f2:	695a      	ldr	r2, [r3, #20]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	029b      	lsls	r3, r3, #10
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006fe:	0021      	movs	r1, r4
 8000700:	187b      	adds	r3, r7, r1
 8000702:	22e0      	movs	r2, #224	; 0xe0
 8000704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2202      	movs	r2, #2
 800070a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2203      	movs	r2, #3
 8000716:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	187a      	adds	r2, r7, r1
 8000720:	2390      	movs	r3, #144	; 0x90
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	0011      	movs	r1, r2
 8000726:	0018      	movs	r0, r3
 8000728:	f000 fc86 	bl	8001038 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2019      	movs	r0, #25
 8000732:	f000 fc09 	bl	8000f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000736:	2019      	movs	r0, #25
 8000738:	f000 fc1b 	bl	8000f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b00b      	add	sp, #44	; 0x2c
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	40013000 	.word	0x40013000
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <HAL_TIM_Base_MspInit+0x58>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d11d      	bne.n	800079a <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_TIM_Base_MspInit+0x5c>)
 8000760:	699a      	ldr	r2, [r3, #24]
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_TIM_Base_MspInit+0x5c>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0109      	lsls	r1, r1, #4
 8000768:	430a      	orrs	r2, r1
 800076a:	619a      	str	r2, [r3, #24]
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_TIM_Base_MspInit+0x5c>)
 800076e:	699a      	ldr	r2, [r3, #24]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	4013      	ands	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200d      	movs	r0, #13
 8000780:	f000 fbe2 	bl	8000f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000784:	200d      	movs	r0, #13
 8000786:	f000 fbf4 	bl	8000f72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	200e      	movs	r0, #14
 8000790:	f000 fbda 	bl	8000f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000794:	200e      	movs	r0, #14
 8000796:	f000 fbec 	bl	8000f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b004      	add	sp, #16
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40012c00 	.word	0x40012c00
 80007a8:	40021000 	.word	0x40021000

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 faf2 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f002 fe1c 	bl	8003420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	200000b8 	.word	0x200000b8

080007f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <TIM1_CC_IRQHandler+0x14>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 fe10 	bl	8003420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	200000b8 	.word	0x200000b8

0800080c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <SPI1_IRQHandler+0x14>)
 8000812:	0018      	movs	r0, r3
 8000814:	f002 fa8c 	bl	8002d30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000054 	.word	0x20000054

08000824 <get_irq2_register>:
}


//Gets the IRQ2 Register Status
uint8_t get_irq2_register(SPI_HandleTypeDef *hspi)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	return spi_single_read(hspi, REG_IRQFLAGS2);;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	213f      	movs	r1, #63	; 0x3f
 8000830:	0018      	movs	r0, r3
 8000832:	f000 f837 	bl	80008a4 <spi_single_read>
 8000836:	0003      	movs	r3, r0
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}

08000840 <spi_single_write>:


//This Writes to a single register
void spi_single_write(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t data)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	0008      	movs	r0, r1
 800084a:	0011      	movs	r1, r2
 800084c:	1cfb      	adds	r3, r7, #3
 800084e:	1c02      	adds	r2, r0, #0
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	1cbb      	adds	r3, r7, #2
 8000854:	1c0a      	adds	r2, r1, #0
 8000856:	701a      	strb	r2, [r3, #0]
	address |= WRITE_MASK;
 8000858:	1cfb      	adds	r3, r7, #3
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	4252      	negs	r2, r2
 8000860:	4313      	orrs	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	1cfb      	adds	r3, r7, #3
 8000866:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 8000868:	2390      	movs	r3, #144	; 0x90
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	2200      	movs	r2, #0
 800086e:	2110      	movs	r1, #16
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fd49 	bl	8001308 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 8000876:	1cf9      	adds	r1, r7, #3
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	2364      	movs	r3, #100	; 0x64
 800087c:	2201      	movs	r2, #1
 800087e:	f001 fdc3 	bl	8002408 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &data, sizeof(data), 100);
 8000882:	1cb9      	adds	r1, r7, #2
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	2364      	movs	r3, #100	; 0x64
 8000888:	2201      	movs	r2, #1
 800088a:	f001 fdbd 	bl	8002408 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 800088e:	2390      	movs	r3, #144	; 0x90
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	2201      	movs	r2, #1
 8000894:	2110      	movs	r1, #16
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fd36 	bl	8001308 <HAL_GPIO_WritePin>
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <spi_single_read>:

//This reads a single register
uint8_t spi_single_read(SPI_HandleTypeDef *hspi, uint8_t address)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	000a      	movs	r2, r1
 80008ae:	1cfb      	adds	r3, r7, #3
 80008b0:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;
	address &= READ_MASK;
 80008b2:	1cfb      	adds	r3, r7, #3
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	227f      	movs	r2, #127	; 0x7f
 80008b8:	4013      	ands	r3, r2
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	1cfb      	adds	r3, r7, #3
 80008be:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 80008c0:	2390      	movs	r3, #144	; 0x90
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	2200      	movs	r2, #0
 80008c6:	2110      	movs	r1, #16
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fd1d 	bl	8001308 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 80008ce:	1cf9      	adds	r1, r7, #3
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	2364      	movs	r3, #100	; 0x64
 80008d4:	2201      	movs	r2, #1
 80008d6:	f001 fd97 	bl	8002408 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, sizeof(rx_data), 100);
 80008da:	240f      	movs	r4, #15
 80008dc:	1939      	adds	r1, r7, r4
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	2364      	movs	r3, #100	; 0x64
 80008e2:	2201      	movs	r2, #1
 80008e4:	f001 fef0 	bl	80026c8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 80008e8:	2390      	movs	r3, #144	; 0x90
 80008ea:	05db      	lsls	r3, r3, #23
 80008ec:	2201      	movs	r2, #1
 80008ee:	2110      	movs	r1, #16
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fd09 	bl	8001308 <HAL_GPIO_WritePin>
	return rx_data;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	781b      	ldrb	r3, [r3, #0]
}
 80008fa:	0018      	movs	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b005      	add	sp, #20
 8000900:	bd90      	pop	{r4, r7, pc}

08000902 <sx1278_struct_init>:

//Only Change Below if the Value is different
//From the default setting in Datasheet
void sx1278_struct_init(SX1278 *radio)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
	//Common Settings
	radio->RegOpMode |= RF_OPMODE_SLEEP | RF_OPMODE_FREQMODE_ACCESS_LF;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	785b      	ldrb	r3, [r3, #1]
 800090e:	2208      	movs	r2, #8
 8000910:	4313      	orrs	r3, r2
 8000912:	b2da      	uxtb	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	705a      	strb	r2, [r3, #1]
	radio->RegBitrateMsb |= RF_BITRATEMSB_250000_BPS;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	789a      	ldrb	r2, [r3, #2]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	709a      	strb	r2, [r3, #2]
	radio->RegBitrateLsb |= RF_BITRATELSB_250000_BPS;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	78db      	ldrb	r3, [r3, #3]
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	4252      	negs	r2, r2
 8000928:	4313      	orrs	r3, r2
 800092a:	b2da      	uxtb	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	70da      	strb	r2, [r3, #3]
	//You Have to Calculate with Eqs on Datasheet
	radio->RegFrfMsb = 0x6c;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	226c      	movs	r2, #108	; 0x6c
 8000934:	719a      	strb	r2, [r3, #6]
	radio->RegFrfMid = 0x80;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	71da      	strb	r2, [r3, #7]
	radio->RegFrfLsb = 0x00;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	721a      	strb	r2, [r3, #8]
	//TX/RX Settings
	radio->RegPaConfig |= RF_PACONFIG_PASELECT_RFO | 0x04 | 0x0f;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7a5b      	ldrb	r3, [r3, #9]
 8000946:	220f      	movs	r2, #15
 8000948:	4313      	orrs	r3, r2
 800094a:	b2da      	uxtb	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	725a      	strb	r2, [r3, #9]
	radio->RegPaRamp |= 0x00;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	7a9a      	ldrb	r2, [r3, #10]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	729a      	strb	r2, [r3, #10]
	radio->RegLna |= RF_LNA_GAIN_G6;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7b1b      	ldrb	r3, [r3, #12]
 800095c:	2240      	movs	r2, #64	; 0x40
 800095e:	4252      	negs	r2, r2
 8000960:	4313      	orrs	r3, r2
 8000962:	b2da      	uxtb	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	731a      	strb	r2, [r3, #12]
	//TCXO Settings:
	radio->RegTcxo = RF_TCXO_TCXOINPUT_ON;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2258      	movs	r2, #88	; 0x58
 800096c:	2110      	movs	r1, #16
 800096e:	5499      	strb	r1, [r3, r2]
	radio->RegFifoThresh |=  0x0b00111111;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2235      	movs	r2, #53	; 0x35
 8000974:	5c9b      	ldrb	r3, [r3, r2]
 8000976:	b25b      	sxtb	r3, r3
 8000978:	2211      	movs	r2, #17
 800097a:	4313      	orrs	r3, r2
 800097c:	b25b      	sxtb	r3, r3
 800097e:	b2d9      	uxtb	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2235      	movs	r2, #53	; 0x35
 8000984:	5499      	strb	r1, [r3, r2]
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}

0800098e <sx1278_read_all_registers>:

//This gets the status of all registers.
//Mainly for init purposes
uint8_t sx1278_read_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 800098e:	b5b0      	push	{r4, r5, r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3301      	adds	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 800099e:	2317      	movs	r3, #23
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	2201      	movs	r2, #1
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	e013      	b.n	80009d0 <sx1278_read_all_registers+0x42>
	{
		*(struct_ptr + ((reg-1))) = spi_single_read(hspi, reg);
 80009a8:	2517      	movs	r5, #23
 80009aa:	197b      	adds	r3, r7, r5
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	18d4      	adds	r4, r2, r3
 80009b4:	197b      	adds	r3, r7, r5
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff ff71 	bl	80008a4 <spi_single_read>
 80009c2:	0003      	movs	r3, r0
 80009c4:	7023      	strb	r3, [r4, #0]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 80009c6:	197b      	adds	r3, r7, r5
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	197b      	adds	r3, r7, r5
 80009cc:	3201      	adds	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	2317      	movs	r3, #23
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b70      	cmp	r3, #112	; 0x70
 80009d8:	d9e6      	bls.n	80009a8 <sx1278_read_all_registers+0x1a>
	}
	uint8_t temp = spi_single_read(hspi, REG_VERSION);
 80009da:	250f      	movs	r5, #15
 80009dc:	197c      	adds	r4, r7, r5
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	2142      	movs	r1, #66	; 0x42
 80009e2:	0018      	movs	r0, r3
 80009e4:	f7ff ff5e 	bl	80008a4 <spi_single_read>
 80009e8:	0003      	movs	r3, r0
 80009ea:	7023      	strb	r3, [r4, #0]
	if(temp == CHIP_VERSION)
 80009ec:	197b      	adds	r3, r7, r5
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b12      	cmp	r3, #18
 80009f2:	d101      	bne.n	80009f8 <sx1278_read_all_registers+0x6a>
	{
		return 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <sx1278_read_all_registers+0x6c>
	}
	return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	0018      	movs	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b006      	add	sp, #24
 8000a00:	bdb0      	pop	{r4, r5, r7, pc}

08000a02 <sx1278_write_all_registers>:

//This Function updates all registers with the desired configuration
//Probably will be only used for init and major function changes.
uint8_t sx1278_write_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 8000a02:	b5b0      	push	{r4, r5, r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000a12:	2317      	movs	r3, #23
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e013      	b.n	8000a44 <sx1278_write_all_registers+0x42>
		{
			spi_single_write(hspi, reg, *(struct_ptr + ((reg-1))));
 8000a1c:	2117      	movs	r1, #23
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	18d3      	adds	r3, r2, r3
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	7819      	ldrb	r1, [r3, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff ff04 	bl	8000840 <spi_single_write>
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000a38:	0021      	movs	r1, r4
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	3201      	adds	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	2317      	movs	r3, #23
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b70      	cmp	r3, #112	; 0x70
 8000a4c:	d9e6      	bls.n	8000a1c <sx1278_write_all_registers+0x1a>
		}
	uint8_t temp = spi_single_read(hspi, REG_OPMODE);
 8000a4e:	250f      	movs	r5, #15
 8000a50:	197c      	adds	r4, r7, r5
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff ff24 	bl	80008a4 <spi_single_read>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	7023      	strb	r3, [r4, #0]
	if(radio->RegOpMode == temp)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	197a      	adds	r2, r7, r5
 8000a66:	7812      	ldrb	r2, [r2, #0]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d101      	bne.n	8000a70 <sx1278_write_all_registers+0x6e>
	{
		return 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e000      	b.n	8000a72 <sx1278_write_all_registers+0x70>
	}
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b006      	add	sp, #24
 8000a78:	bdb0      	pop	{r4, r5, r7, pc}

08000a7a <sx1278_init>:

//General Init Function for the Module.
uint8_t sx1278_init(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 8000a7a:	b5b0      	push	{r4, r5, r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
	uint8_t timeout_counter = 0;
 8000a84:	230f      	movs	r3, #15
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000a8c:	230e      	movs	r3, #14
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000a94:	e015      	b.n	8000ac2 <sx1278_init+0x48>
	{
		stat = sx1278_read_all_registers(radio, hspi);
 8000a96:	230e      	movs	r3, #14
 8000a98:	18fc      	adds	r4, r7, r3
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff ff74 	bl	800098e <sx1278_read_all_registers>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000aaa:	210f      	movs	r1, #15
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	3201      	adds	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b64      	cmp	r3, #100	; 0x64
 8000abc:	d101      	bne.n	8000ac2 <sx1278_init+0x48>
		{
			return 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e037      	b.n	8000b32 <sx1278_init+0xb8>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000ac2:	230e      	movs	r3, #14
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d104      	bne.n	8000ad6 <sx1278_init+0x5c>
 8000acc:	230f      	movs	r3, #15
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b64      	cmp	r3, #100	; 0x64
 8000ad4:	d9df      	bls.n	8000a96 <sx1278_init+0x1c>
		}
	}
	timeout_counter = 0;
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
	stat = 0;
 8000ade:	230e      	movs	r3, #14
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	sx1278_struct_init(radio);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ff0a 	bl	8000902 <sx1278_struct_init>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000aee:	e015      	b.n	8000b1c <sx1278_init+0xa2>
	{
		timeout_counter++;
 8000af0:	250f      	movs	r5, #15
 8000af2:	197b      	adds	r3, r7, r5
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	197b      	adds	r3, r7, r5
 8000af8:	3201      	adds	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
		stat = sx1278_write_all_registers(radio, hspi);
 8000afc:	230e      	movs	r3, #14
 8000afe:	18fc      	adds	r4, r7, r3
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff ff7b 	bl	8000a02 <sx1278_write_all_registers>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	7023      	strb	r3, [r4, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000b10:	197b      	adds	r3, r7, r5
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b64      	cmp	r3, #100	; 0x64
 8000b16:	d101      	bne.n	8000b1c <sx1278_init+0xa2>
		{
			return 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e00a      	b.n	8000b32 <sx1278_init+0xb8>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000b1c:	230e      	movs	r3, #14
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d104      	bne.n	8000b30 <sx1278_init+0xb6>
 8000b26:	230f      	movs	r3, #15
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b64      	cmp	r3, #100	; 0x64
 8000b2e:	d9df      	bls.n	8000af0 <sx1278_init+0x76>
		}
	}
	return 1;
 8000b30:	2301      	movs	r3, #1
}
 8000b32:	0018      	movs	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bdb0      	pop	{r4, r5, r7, pc}

08000b3a <sx1278_fifo_fill>:


uint8_t sx1278_fifo_fill(SPI_HandleTypeDef *hspi, uint8_t* data, uint8_t data_length)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	701a      	strb	r2, [r3, #0]
	uint8_t address_packet = WRITE_MASK | REG_FIFO;
 8000b48:	2315      	movs	r3, #21
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	701a      	strb	r2, [r3, #0]
	uint8_t fill_char = 0;
 8000b50:	2314      	movs	r3, #20
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
	uint8_t temp_counter = 0;
 8000b58:	2317      	movs	r3, #23
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
 	for(uint8_t packet_part = 0; packet_part < PACKET_LENGTH; packet_part++)
 8000b60:	2316      	movs	r3, #22
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e02f      	b.n	8000bca <sx1278_fifo_fill+0x90>
	{
		if(packet_part < data_length)
 8000b6a:	2116      	movs	r1, #22
 8000b6c:	187a      	adds	r2, r7, r1
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	7812      	ldrb	r2, [r2, #0]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d212      	bcs.n	8000b9e <sx1278_fifo_fill+0x64>
		{
			spi_single_write(hspi, address_packet, data[packet_part]);
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	18d3      	adds	r3, r2, r3
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	2315      	movs	r3, #21
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	7819      	ldrb	r1, [r3, #0]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fe58 	bl	8000840 <spi_single_write>
			temp_counter++;
 8000b90:	2117      	movs	r1, #23
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	3201      	adds	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e00f      	b.n	8000bbe <sx1278_fifo_fill+0x84>
		}
		else
		{
			spi_single_write(hspi, address_packet, fill_char);
 8000b9e:	2314      	movs	r3, #20
 8000ba0:	18fb      	adds	r3, r7, r3
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	2315      	movs	r3, #21
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	7819      	ldrb	r1, [r3, #0]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fe47 	bl	8000840 <spi_single_write>
			temp_counter++;
 8000bb2:	2117      	movs	r1, #23
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	3201      	adds	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
 	for(uint8_t packet_part = 0; packet_part < PACKET_LENGTH; packet_part++)
 8000bbe:	2116      	movs	r1, #22
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	3201      	adds	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	2316      	movs	r3, #22
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b3f      	cmp	r3, #63	; 0x3f
 8000bd2:	d9ca      	bls.n	8000b6a <sx1278_fifo_fill+0x30>
		}
	}
	return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b006      	add	sp, #24
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <change_opmode>:

uint8_t change_opmode(SX1278 *radio, SPI_HandleTypeDef *hspi, radio_state new_mode)
{
 8000bde:	b590      	push	{r4, r7, lr}
 8000be0:	b087      	sub	sp, #28
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	701a      	strb	r2, [r3, #0]
	uint8_t timeout_counter = 0;
 8000bec:	2317      	movs	r3, #23
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000bf4:	2316      	movs	r3, #22
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000bfc:	e015      	b.n	8000c2a <change_opmode+0x4c>
	{
		stat = sx1278_read_all_registers(radio, hspi);
 8000bfe:	2316      	movs	r3, #22
 8000c00:	18fc      	adds	r4, r7, r3
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff fec0 	bl	800098e <sx1278_read_all_registers>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000c12:	2117      	movs	r1, #23
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	3201      	adds	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b64      	cmp	r3, #100	; 0x64
 8000c24:	d101      	bne.n	8000c2a <change_opmode+0x4c>
		{
			return 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e01c      	b.n	8000c64 <change_opmode+0x86>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000c2a:	2316      	movs	r3, #22
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d104      	bne.n	8000c3e <change_opmode+0x60>
 8000c34:	2317      	movs	r3, #23
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b64      	cmp	r3, #100	; 0x64
 8000c3c:	d9df      	bls.n	8000bfe <change_opmode+0x20>
		}
	}
	uint8_t temp_mode = RF_OPMODE_MODULATIONTYPE_FSK |
 8000c3e:	2015      	movs	r0, #21
 8000c40:	183b      	adds	r3, r7, r0
 8000c42:	1dfa      	adds	r2, r7, #7
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	2108      	movs	r1, #8
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
			RF_OPMODE_FREQMODE_ACCESS_LF |new_mode;
	radio->RegOpMode = temp_mode;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	183a      	adds	r2, r7, r0
 8000c50:	7812      	ldrb	r2, [r2, #0]
 8000c52:	705a      	strb	r2, [r3, #1]
	spi_single_write(hspi, REG_OPMODE, (radio->RegOpMode));
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	785a      	ldrb	r2, [r3, #1]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff fdef 	bl	8000840 <spi_single_write>
	return 1;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b007      	add	sp, #28
 8000c6a:	bd90      	pop	{r4, r7, pc}

08000c6c <sx1278_transmit>:

//This Function fills the FIFO with the input data and sets the opmode to transmit.
//It will be up to the app to check when the tx is done.

uint8_t sx1278_transmit(SX1278 *radio, SPI_HandleTypeDef *hspi, uint8_t  *data, uint8_t datalength)
{
 8000c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	001a      	movs	r2, r3
 8000c7a:	1cfb      	adds	r3, r7, #3
 8000c7c:	701a      	strb	r2, [r3, #0]
	__attribute__((unused))
	uint8_t fifo_status;
	uint8_t fifod = 0;
 8000c7e:	2517      	movs	r5, #23
 8000c80:	197b      	adds	r3, r7, r5
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
	sx1278_fifo_fill(hspi, data, datalength);
 8000c86:	1cfb      	adds	r3, r7, #3
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff ff53 	bl	8000b3a <sx1278_fifo_fill>
	fifo_status = get_irq2_register(hspi);
 8000c94:	2616      	movs	r6, #22
 8000c96:	19bc      	adds	r4, r7, r6
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fdc2 	bl	8000824 <get_irq2_register>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	7023      	strb	r3, [r4, #0]
	if(fifo_status >= 0x20)
 8000ca4:	19bb      	adds	r3, r7, r6
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b1f      	cmp	r3, #31
 8000caa:	d908      	bls.n	8000cbe <sx1278_transmit+0x52>
	{
		change_opmode(radio, hspi, TRANSMITTER);
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff ff93 	bl	8000bde <change_opmode>
		fifod = 1;
 8000cb8:	197b      	adds	r3, r7, r5
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8000cbe:	2300      	movs	r3, #0
 }
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b007      	add	sp, #28
 8000cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd8:	f7ff fff6 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d02:	f002 ff17 	bl	8003b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d06:	f7ff faa7 	bl	8000258 <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   r0, =_estack
 8000d0c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d18:	08003bcc 	.word	0x08003bcc
  ldr r2, =_sbss
 8000d1c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d20:	200001f8 	.word	0x200001f8

08000d24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_IRQHandler>
	...

08000d28 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_Init+0x24>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_Init+0x24>)
 8000d32:	2110      	movs	r1, #16
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f809 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3e:	f7ff fc75 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x5c>)
 8000d5a:	681c      	ldr	r4, [r3, #0]
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_InitTick+0x60>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	0019      	movs	r1, r3
 8000d62:	23fa      	movs	r3, #250	; 0xfa
 8000d64:	0098      	lsls	r0, r3, #2
 8000d66:	f7ff f9cf 	bl	8000108 <__udivsi3>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	0020      	movs	r0, r4
 8000d70:	f7ff f9ca 	bl	8000108 <__udivsi3>
 8000d74:	0003      	movs	r3, r0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f000 f90b 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e00f      	b.n	8000da4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d80b      	bhi.n	8000da2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	425b      	negs	r3, r3
 8000d90:	2200      	movs	r2, #0
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 f8d8 	bl	8000f48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_InitTick+0x64>)
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b003      	add	sp, #12
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	2000000c 	.word	0x2000000c
 8000db0:	20000014 	.word	0x20000014
 8000db4:	20000010 	.word	0x20000010

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x1c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	18d2      	adds	r2, r2, r3
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	20000014 	.word	0x20000014
 8000dd8:	200001f4 	.word	0x200001f4

08000ddc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <HAL_GetTick+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	200001f4 	.word	0x200001f4

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	0002      	movs	r2, r0
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b7f      	cmp	r3, #127	; 0x7f
 8000e02:	d809      	bhi.n	8000e18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	231f      	movs	r3, #31
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_EnableIRQ+0x30>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	4091      	lsls	r1, r2
 8000e14:	000a      	movs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b7f      	cmp	r3, #127	; 0x7f
 8000e38:	d828      	bhi.n	8000e8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <__NVIC_SetPriority+0xd4>)
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	33c0      	adds	r3, #192	; 0xc0
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	589b      	ldr	r3, [r3, r2]
 8000e4a:	1dfa      	adds	r2, r7, #7
 8000e4c:	7812      	ldrb	r2, [r2, #0]
 8000e4e:	0011      	movs	r1, r2
 8000e50:	2203      	movs	r2, #3
 8000e52:	400a      	ands	r2, r1
 8000e54:	00d2      	lsls	r2, r2, #3
 8000e56:	21ff      	movs	r1, #255	; 0xff
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	22ff      	movs	r2, #255	; 0xff
 8000e68:	401a      	ands	r2, r3
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2303      	movs	r3, #3
 8000e72:	4003      	ands	r3, r0
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <__NVIC_SetPriority+0xd4>)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	430a      	orrs	r2, r1
 8000e84:	33c0      	adds	r3, #192	; 0xc0
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e8a:	e031      	b.n	8000ef0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	0019      	movs	r1, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	400b      	ands	r3, r1
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	3306      	adds	r3, #6
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1dfa      	adds	r2, r7, #7
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	0011      	movs	r1, r2
 8000eac:	2203      	movs	r2, #3
 8000eae:	400a      	ands	r2, r1
 8000eb0:	00d2      	lsls	r2, r2, #3
 8000eb2:	21ff      	movs	r1, #255	; 0xff
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	019b      	lsls	r3, r3, #6
 8000ec2:	22ff      	movs	r2, #255	; 0xff
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0018      	movs	r0, r3
 8000ecc:	2303      	movs	r3, #3
 8000ece:	4003      	ands	r3, r0
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <__NVIC_SetPriority+0xd8>)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	001c      	movs	r4, r3
 8000edc:	230f      	movs	r3, #15
 8000ede:	4023      	ands	r3, r4
 8000ee0:	3b08      	subs	r3, #8
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	3306      	adds	r3, #6
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	18c3      	adds	r3, r0, r3
 8000eec:	3304      	adds	r3, #4
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b003      	add	sp, #12
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	045b      	lsls	r3, r3, #17
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d301      	bcc.n	8000f18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f14:	2301      	movs	r3, #1
 8000f16:	e010      	b.n	8000f3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <SysTick_Config+0x44>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	3a01      	subs	r2, #1
 8000f1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f20:	2301      	movs	r3, #1
 8000f22:	425b      	negs	r3, r3
 8000f24:	2103      	movs	r1, #3
 8000f26:	0018      	movs	r0, r3
 8000f28:	f7ff ff7c 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x44>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x44>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	210f      	movs	r1, #15
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	1c02      	adds	r2, r0, #0
 8000f58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ff5d 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	0002      	movs	r2, r0
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ff33 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ffaf 	bl	8000f00 <SysTick_Config>
 8000fa2:	0003      	movs	r3, r0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb4:	210f      	movs	r1, #15
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2221      	movs	r2, #33	; 0x21
 8000fc0:	5c9b      	ldrb	r3, [r3, r2]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d006      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e028      	b.n	8001028 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	210e      	movs	r1, #14
 8000fe2:	438a      	bics	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffe:	2101      	movs	r1, #1
 8001000:	4091      	lsls	r1, r2
 8001002:	000a      	movs	r2, r1
 8001004:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2221      	movs	r2, #33	; 0x21
 800100a:	2101      	movs	r1, #1
 800100c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	0010      	movs	r0, r2
 8001026:	4798      	blx	r3
    }
  }
  return status;
 8001028:	230f      	movs	r3, #15
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	781b      	ldrb	r3, [r3, #0]
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	e149      	b.n	80012dc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2101      	movs	r1, #1
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4091      	lsls	r1, r2
 8001052:	000a      	movs	r2, r1
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d100      	bne.n	8001060 <HAL_GPIO_Init+0x28>
 800105e:	e13a      	b.n	80012d6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2203      	movs	r2, #3
 8001066:	4013      	ands	r3, r2
 8001068:	2b01      	cmp	r3, #1
 800106a:	d005      	beq.n	8001078 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2203      	movs	r2, #3
 8001072:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001074:	2b02      	cmp	r3, #2
 8001076:	d130      	bne.n	80010da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	409a      	lsls	r2, r3
 8001086:	0013      	movs	r3, r2
 8001088:	43da      	mvns	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	409a      	lsls	r2, r3
 800109a:	0013      	movs	r3, r2
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ae:	2201      	movs	r2, #1
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
 80010b4:	0013      	movs	r3, r2
 80010b6:	43da      	mvns	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	2201      	movs	r2, #1
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2203      	movs	r2, #3
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d017      	beq.n	8001116 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	4013      	ands	r3, r2
 800111e:	2b02      	cmp	r3, #2
 8001120:	d123      	bne.n	800116a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	58d3      	ldr	r3, [r2, r3]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2207      	movs	r2, #7
 8001134:	4013      	ands	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2107      	movs	r1, #7
 800114e:	400b      	ands	r3, r1
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	6939      	ldr	r1, [r7, #16]
 8001168:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2203      	movs	r2, #3
 8001188:	401a      	ands	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	23c0      	movs	r3, #192	; 0xc0
 80011a4:	029b      	lsls	r3, r3, #10
 80011a6:	4013      	ands	r3, r2
 80011a8:	d100      	bne.n	80011ac <HAL_GPIO_Init+0x174>
 80011aa:	e094      	b.n	80012d6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ac:	4b51      	ldr	r3, [pc, #324]	; (80012f4 <HAL_GPIO_Init+0x2bc>)
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <HAL_GPIO_Init+0x2bc>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	430a      	orrs	r2, r1
 80011b6:	619a      	str	r2, [r3, #24]
 80011b8:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x2bc>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	2201      	movs	r2, #1
 80011be:	4013      	ands	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c4:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x2c0>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	589b      	ldr	r3, [r3, r2]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2203      	movs	r2, #3
 80011d6:	4013      	ands	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	409a      	lsls	r2, r3
 80011de:	0013      	movs	r3, r2
 80011e0:	43da      	mvns	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	2390      	movs	r3, #144	; 0x90
 80011ec:	05db      	lsls	r3, r3, #23
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x1d6>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a41      	ldr	r2, [pc, #260]	; (80012fc <HAL_GPIO_Init+0x2c4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x1d2>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a40      	ldr	r2, [pc, #256]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x1ce>
 8001202:	2302      	movs	r3, #2
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x1d8>
 8001206:	2305      	movs	r3, #5
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x1d8>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x1d8>
 800120e:	2300      	movs	r3, #0
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	2103      	movs	r1, #3
 8001214:	400a      	ands	r2, r1
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	; (80012f8 <HAL_GPIO_Init+0x2c0>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122e:	4b35      	ldr	r3, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	035b      	lsls	r3, r3, #13
 8001246:	4013      	ands	r3, r2
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	039b      	lsls	r3, r3, #14
 8001270:	4013      	ands	r3, r2
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43da      	mvns	r2, r3
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	025b      	lsls	r3, r3, #9
 80012c4:	4013      	ands	r3, r2
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	40da      	lsrs	r2, r3
 80012e4:	1e13      	subs	r3, r2, #0
 80012e6:	d000      	beq.n	80012ea <HAL_GPIO_Init+0x2b2>
 80012e8:	e6ae      	b.n	8001048 <HAL_GPIO_Init+0x10>
  } 
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b006      	add	sp, #24
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	48000400 	.word	0x48000400
 8001300:	48000800 	.word	0x48000800
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	0008      	movs	r0, r1
 8001312:	0011      	movs	r1, r2
 8001314:	1cbb      	adds	r3, r7, #2
 8001316:	1c02      	adds	r2, r0, #0
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	1c7b      	adds	r3, r7, #1
 800131c:	1c0a      	adds	r2, r1, #0
 800131e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001320:	1c7b      	adds	r3, r7, #1
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d004      	beq.n	8001332 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	881a      	ldrh	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001332:	1cbb      	adds	r3, r7, #2
 8001334:	881a      	ldrh	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	000a      	movs	r2, r1
 800134c:	1cbb      	adds	r3, r7, #2
 800134e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001356:	1cbb      	adds	r3, r7, #2
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	4013      	ands	r3, r2
 800135e:	041a      	lsls	r2, r3, #16
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	1cb9      	adds	r1, r7, #2
 8001366:	8809      	ldrh	r1, [r1, #0]
 8001368:	400b      	ands	r3, r1
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e301      	b.n	800198e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x1e>
 8001394:	e08d      	b.n	80014b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001396:	4bc3      	ldr	r3, [pc, #780]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	220c      	movs	r2, #12
 800139c:	4013      	ands	r3, r2
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d00e      	beq.n	80013c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a2:	4bc0      	ldr	r3, [pc, #768]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	220c      	movs	r2, #12
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x64>
 80013ae:	4bbd      	ldr	r3, [pc, #756]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	025b      	lsls	r3, r3, #9
 80013b6:	401a      	ands	r2, r3
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	025b      	lsls	r3, r3, #9
 80013bc:	429a      	cmp	r2, r3
 80013be:	d10d      	bne.n	80013dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4bb8      	ldr	r3, [pc, #736]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x56>
 80013cc:	e070      	b.n	80014b0 <HAL_RCC_OscConfig+0x138>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d000      	beq.n	80013d8 <HAL_RCC_OscConfig+0x60>
 80013d6:	e06b      	b.n	80014b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e2d8      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_OscConfig+0x7c>
 80013e4:	4baf      	ldr	r3, [pc, #700]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4bae      	ldr	r3, [pc, #696]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	0249      	lsls	r1, r1, #9
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e02f      	b.n	8001454 <HAL_RCC_OscConfig+0xdc>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10c      	bne.n	8001416 <HAL_RCC_OscConfig+0x9e>
 80013fc:	4ba9      	ldr	r3, [pc, #676]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4ba8      	ldr	r3, [pc, #672]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001402:	49a9      	ldr	r1, [pc, #676]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001404:	400a      	ands	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	4ba6      	ldr	r3, [pc, #664]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4ba5      	ldr	r3, [pc, #660]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800140e:	49a7      	ldr	r1, [pc, #668]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001410:	400a      	ands	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e01e      	b.n	8001454 <HAL_RCC_OscConfig+0xdc>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d10e      	bne.n	800143c <HAL_RCC_OscConfig+0xc4>
 800141e:	4ba1      	ldr	r3, [pc, #644]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4ba0      	ldr	r3, [pc, #640]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	02c9      	lsls	r1, r1, #11
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	4b9d      	ldr	r3, [pc, #628]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b9c      	ldr	r3, [pc, #624]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	0249      	lsls	r1, r1, #9
 8001436:	430a      	orrs	r2, r1
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xdc>
 800143c:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b98      	ldr	r3, [pc, #608]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001442:	4999      	ldr	r1, [pc, #612]	; (80016a8 <HAL_RCC_OscConfig+0x330>)
 8001444:	400a      	ands	r2, r1
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	4b96      	ldr	r3, [pc, #600]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b95      	ldr	r3, [pc, #596]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800144e:	4997      	ldr	r1, [pc, #604]	; (80016ac <HAL_RCC_OscConfig+0x334>)
 8001450:	400a      	ands	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d014      	beq.n	8001486 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fcbe 	bl	8000ddc <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001466:	f7ff fcb9 	bl	8000ddc <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b64      	cmp	r3, #100	; 0x64
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e28a      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001478:	4b8a      	ldr	r3, [pc, #552]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0xee>
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fca9 	bl	8000ddc <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fca4 	bl	8000ddc <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e275      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	029b      	lsls	r3, r3, #10
 80014aa:	4013      	ands	r3, r2
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x118>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d100      	bne.n	80014be <HAL_RCC_OscConfig+0x146>
 80014bc:	e069      	b.n	8001592 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014be:	4b79      	ldr	r3, [pc, #484]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	220c      	movs	r2, #12
 80014c4:	4013      	ands	r3, r2
 80014c6:	d00b      	beq.n	80014e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014c8:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	220c      	movs	r2, #12
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d11c      	bne.n	800150e <HAL_RCC_OscConfig+0x196>
 80014d4:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	4013      	ands	r3, r2
 80014de:	d116      	bne.n	800150e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e0:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2202      	movs	r2, #2
 80014e6:	4013      	ands	r3, r2
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x17e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e24b      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b6b      	ldr	r3, [pc, #428]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	22f8      	movs	r2, #248	; 0xf8
 80014fc:	4393      	bics	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	00da      	lsls	r2, r3, #3
 8001506:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150c:	e041      	b.n	8001592 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d024      	beq.n	8001560 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fc5b 	bl	8000ddc <HAL_GetTick>
 8001526:	0003      	movs	r3, r0
 8001528:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fc56 	bl	8000ddc <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e227      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	4b59      	ldr	r3, [pc, #356]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d0f1      	beq.n	800152c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b56      	ldr	r3, [pc, #344]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	22f8      	movs	r2, #248	; 0xf8
 800154e:	4393      	bics	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00da      	lsls	r2, r3, #3
 8001558:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e018      	b.n	8001592 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001560:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001566:	2101      	movs	r1, #1
 8001568:	438a      	bics	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fc36 	bl	8000ddc <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fc31 	bl	8000ddc <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e202      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001588:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2202      	movs	r2, #2
 800158e:	4013      	ands	r3, r2
 8001590:	d1f1      	bne.n	8001576 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2208      	movs	r2, #8
 8001598:	4013      	ands	r3, r2
 800159a:	d036      	beq.n	800160a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d019      	beq.n	80015d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a4:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a8:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	430a      	orrs	r2, r1
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b0:	f7ff fc14 	bl	8000ddc <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fc0f 	bl	8000ddc <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1e0      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d0:	2202      	movs	r2, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	d0f1      	beq.n	80015ba <HAL_RCC_OscConfig+0x242>
 80015d6:	e018      	b.n	800160a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 80015de:	2101      	movs	r1, #1
 80015e0:	438a      	bics	r2, r1
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fbfa 	bl	8000ddc <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fbf5 	bl	8000ddc <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1c6      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d1f1      	bne.n	80015ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2204      	movs	r2, #4
 8001610:	4013      	ands	r3, r2
 8001612:	d100      	bne.n	8001616 <HAL_RCC_OscConfig+0x29e>
 8001614:	e0b4      	b.n	8001780 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	201f      	movs	r0, #31
 8001618:	183b      	adds	r3, r7, r0
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	055b      	lsls	r3, r3, #21
 8001626:	4013      	ands	r3, r2
 8001628:	d110      	bne.n	800164c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	0549      	lsls	r1, r1, #21
 8001634:	430a      	orrs	r2, r1
 8001636:	61da      	str	r2, [r3, #28]
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800163a:	69da      	ldr	r2, [r3, #28]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	055b      	lsls	r3, r3, #21
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001646:	183b      	adds	r3, r7, r0
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d11a      	bne.n	800168e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	0049      	lsls	r1, r1, #1
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001666:	f7ff fbb9 	bl	8000ddc <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001670:	f7ff fbb4 	bl	8000ddc <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e185      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x338>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4013      	ands	r3, r2
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10e      	bne.n	80016b4 <HAL_RCC_OscConfig+0x33c>
 8001696:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 8001698:	6a1a      	ldr	r2, [r3, #32]
 800169a:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <HAL_RCC_OscConfig+0x32c>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	621a      	str	r2, [r3, #32]
 80016a2:	e035      	b.n	8001710 <HAL_RCC_OscConfig+0x398>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	fffeffff 	.word	0xfffeffff
 80016ac:	fffbffff 	.word	0xfffbffff
 80016b0:	40007000 	.word	0x40007000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x35e>
 80016bc:	4bb6      	ldr	r3, [pc, #728]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016be:	6a1a      	ldr	r2, [r3, #32]
 80016c0:	4bb5      	ldr	r3, [pc, #724]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	438a      	bics	r2, r1
 80016c6:	621a      	str	r2, [r3, #32]
 80016c8:	4bb3      	ldr	r3, [pc, #716]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016ca:	6a1a      	ldr	r2, [r3, #32]
 80016cc:	4bb2      	ldr	r3, [pc, #712]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016ce:	2104      	movs	r1, #4
 80016d0:	438a      	bics	r2, r1
 80016d2:	621a      	str	r2, [r3, #32]
 80016d4:	e01c      	b.n	8001710 <HAL_RCC_OscConfig+0x398>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x380>
 80016de:	4bae      	ldr	r3, [pc, #696]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	4bad      	ldr	r3, [pc, #692]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016e4:	2104      	movs	r1, #4
 80016e6:	430a      	orrs	r2, r1
 80016e8:	621a      	str	r2, [r3, #32]
 80016ea:	4bab      	ldr	r3, [pc, #684]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016ec:	6a1a      	ldr	r2, [r3, #32]
 80016ee:	4baa      	ldr	r3, [pc, #680]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	430a      	orrs	r2, r1
 80016f4:	621a      	str	r2, [r3, #32]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0x398>
 80016f8:	4ba7      	ldr	r3, [pc, #668]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	4ba6      	ldr	r3, [pc, #664]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80016fe:	2101      	movs	r1, #1
 8001700:	438a      	bics	r2, r1
 8001702:	621a      	str	r2, [r3, #32]
 8001704:	4ba4      	ldr	r3, [pc, #656]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001706:	6a1a      	ldr	r2, [r3, #32]
 8001708:	4ba3      	ldr	r3, [pc, #652]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800170a:	2104      	movs	r1, #4
 800170c:	438a      	bics	r2, r1
 800170e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d014      	beq.n	8001742 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff fb60 	bl	8000ddc <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	e009      	b.n	8001736 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff fb5b 	bl	8000ddc <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a9b      	ldr	r2, [pc, #620]	; (800199c <HAL_RCC_OscConfig+0x624>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e12b      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	4b98      	ldr	r3, [pc, #608]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x3aa>
 8001740:	e013      	b.n	800176a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fb4b 	bl	8000ddc <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174a:	e009      	b.n	8001760 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff fb46 	bl	8000ddc <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4a91      	ldr	r2, [pc, #580]	; (800199c <HAL_RCC_OscConfig+0x624>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e116      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001760:	4b8d      	ldr	r3, [pc, #564]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	2202      	movs	r2, #2
 8001766:	4013      	ands	r3, r2
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800176a:	231f      	movs	r3, #31
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001774:	4b88      	ldr	r3, [pc, #544]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	4b87      	ldr	r3, [pc, #540]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800177a:	4989      	ldr	r1, [pc, #548]	; (80019a0 <HAL_RCC_OscConfig+0x628>)
 800177c:	400a      	ands	r2, r1
 800177e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2210      	movs	r2, #16
 8001786:	4013      	ands	r3, r2
 8001788:	d063      	beq.n	8001852 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d12a      	bne.n	80017e8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001792:	4b81      	ldr	r3, [pc, #516]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001796:	4b80      	ldr	r3, [pc, #512]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001798:	2104      	movs	r1, #4
 800179a:	430a      	orrs	r2, r1
 800179c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800179e:	4b7e      	ldr	r3, [pc, #504]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a2:	4b7d      	ldr	r3, [pc, #500]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb17 	bl	8000ddc <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017b4:	f7ff fb12 	bl	8000ddc <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0e3      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017c6:	4b74      	ldr	r3, [pc, #464]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0f1      	beq.n	80017b4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017d0:	4b71      	ldr	r3, [pc, #452]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	22f8      	movs	r2, #248	; 0xf8
 80017d6:	4393      	bics	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	00da      	lsls	r2, r3, #3
 80017e0:	4b6d      	ldr	r3, [pc, #436]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
 80017e6:	e034      	b.n	8001852 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	3305      	adds	r3, #5
 80017ee:	d111      	bne.n	8001814 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017f0:	4b69      	ldr	r3, [pc, #420]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f4:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017f6:	2104      	movs	r1, #4
 80017f8:	438a      	bics	r2, r1
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017fc:	4b66      	ldr	r3, [pc, #408]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80017fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001800:	22f8      	movs	r2, #248	; 0xf8
 8001802:	4393      	bics	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	00da      	lsls	r2, r3, #3
 800180c:	4b62      	ldr	r3, [pc, #392]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800180e:	430a      	orrs	r2, r1
 8001810:	635a      	str	r2, [r3, #52]	; 0x34
 8001812:	e01e      	b.n	8001852 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001814:	4b60      	ldr	r3, [pc, #384]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001818:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800181a:	2104      	movs	r1, #4
 800181c:	430a      	orrs	r2, r1
 800181e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001820:	4b5d      	ldr	r3, [pc, #372]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001824:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001826:	2101      	movs	r1, #1
 8001828:	438a      	bics	r2, r1
 800182a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fad6 	bl	8000ddc <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001836:	f7ff fad1 	bl	8000ddc <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0a2      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d1f1      	bne.n	8001836 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d100      	bne.n	800185c <HAL_RCC_OscConfig+0x4e4>
 800185a:	e097      	b.n	800198c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185c:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	220c      	movs	r2, #12
 8001862:	4013      	ands	r3, r2
 8001864:	2b08      	cmp	r3, #8
 8001866:	d100      	bne.n	800186a <HAL_RCC_OscConfig+0x4f2>
 8001868:	e06b      	b.n	8001942 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d14c      	bne.n	800190c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b48      	ldr	r3, [pc, #288]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001878:	494a      	ldr	r1, [pc, #296]	; (80019a4 <HAL_RCC_OscConfig+0x62c>)
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff faad 	bl	8000ddc <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff faa8 	bl	8000ddc <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e079      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	049b      	lsls	r3, r3, #18
 80018a2:	4013      	ands	r3, r2
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a6:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	220f      	movs	r2, #15
 80018ac:	4393      	bics	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <HAL_RCC_OscConfig+0x630>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	431a      	orrs	r2, r3
 80018ce:	4b32      	ldr	r3, [pc, #200]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	0449      	lsls	r1, r1, #17
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fa7b 	bl	8000ddc <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff fa76 	bl	8000ddc <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e047      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	049b      	lsls	r3, r3, #18
 8001906:	4013      	ands	r3, r2
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x574>
 800190a:	e03f      	b.n	800198c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001912:	4924      	ldr	r1, [pc, #144]	; (80019a4 <HAL_RCC_OscConfig+0x62c>)
 8001914:	400a      	ands	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fa60 	bl	8000ddc <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fa5b 	bl	8000ddc <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e02c      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	049b      	lsls	r3, r3, #18
 800193c:	4013      	ands	r3, r2
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x5aa>
 8001940:	e024      	b.n	800198c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e01f      	b.n	800198e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_RCC_OscConfig+0x620>)
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	401a      	ands	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	429a      	cmp	r2, r3
 8001968:	d10e      	bne.n	8001988 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	220f      	movs	r2, #15
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d107      	bne.n	8001988 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	23f0      	movs	r3, #240	; 0xf0
 800197c:	039b      	lsls	r3, r3, #14
 800197e:	401a      	ands	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	0018      	movs	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	b008      	add	sp, #32
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	40021000 	.word	0x40021000
 800199c:	00001388 	.word	0x00001388
 80019a0:	efffffff 	.word	0xefffffff
 80019a4:	feffffff 	.word	0xfeffffff
 80019a8:	ffc2ffff 	.word	0xffc2ffff

080019ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0b3      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d911      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4393      	bics	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	4b55      	ldr	r3, [pc, #340]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e09a      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d015      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2204      	movs	r2, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	d006      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a06:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a0c:	21e0      	movs	r1, #224	; 0xe0
 8001a0e:	00c9      	lsls	r1, r1, #3
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	22f0      	movs	r2, #240	; 0xf0
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d040      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d114      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06e      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	049b      	lsls	r3, r3, #18
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d108      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e062      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2202      	movs	r2, #2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e05b      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	4393      	bics	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff f9aa 	bl	8000ddc <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8e:	f7ff f9a5 	bl	8000ddc <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <HAL_RCC_ClockConfig+0x18c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e042      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1ec      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4013      	ands	r3, r2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d211      	bcs.n	8001ae6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4393      	bics	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad4:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_RCC_ClockConfig+0x184>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e020      	b.n	8001b28 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	d009      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_RCC_ClockConfig+0x190>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b04:	f000 f820 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001b08:	0001      	movs	r1, r0
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x188>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	220f      	movs	r2, #15
 8001b12:	4013      	ands	r3, r2
 8001b14:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x194>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	000a      	movs	r2, r1
 8001b1a:	40da      	lsrs	r2, r3
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x198>)
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f7ff f915 	bl	8000d50 <HAL_InitTick>
  
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	00001388 	.word	0x00001388
 8001b3c:	fffff8ff 	.word	0xfffff8ff
 8001b40:	08003b94 	.word	0x08003b94
 8001b44:	2000000c 	.word	0x2000000c

08001b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x30>
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x36>
 8001b76:	e02c      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b7a:	613b      	str	r3, [r7, #16]
      break;
 8001b7c:	e02c      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	220f      	movs	r2, #15
 8001b84:	4013      	ands	r3, r2
 8001b86:	4a19      	ldr	r2, [pc, #100]	; (8001bec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b88:	5cd3      	ldrb	r3, [r2, r3]
 8001b8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	220f      	movs	r2, #15
 8001b92:	4013      	ands	r3, r2
 8001b94:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b96:	5cd3      	ldrb	r3, [r2, r3]
 8001b98:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	025b      	lsls	r3, r3, #9
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	4810      	ldr	r0, [pc, #64]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ba8:	f7fe faae 	bl	8000108 <__udivsi3>
 8001bac:	0003      	movs	r3, r0
 8001bae:	001a      	movs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4353      	muls	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e009      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	000a      	movs	r2, r1
 8001bbc:	0152      	lsls	r2, r2, #5
 8001bbe:	1a52      	subs	r2, r2, r1
 8001bc0:	0193      	lsls	r3, r2, #6
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	185b      	adds	r3, r3, r1
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
      break;
 8001bd0:	e002      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bd4:	613b      	str	r3, [r7, #16]
      break;
 8001bd6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bd8:	693b      	ldr	r3, [r7, #16]
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b006      	add	sp, #24
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	40021000 	.word	0x40021000
 8001be8:	007a1200 	.word	0x007a1200
 8001bec:	08003ba4 	.word	0x08003ba4
 8001bf0:	08003bb4 	.word	0x08003bb4

08001bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	025b      	lsls	r3, r3, #9
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d100      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c10:	e08e      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2017      	movs	r0, #23
 8001c14:	183b      	adds	r3, r7, r0
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	055b      	lsls	r3, r3, #21
 8001c22:	4013      	ands	r3, r2
 8001c24:	d110      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b54      	ldr	r3, [pc, #336]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0549      	lsls	r1, r1, #21
 8001c30:	430a      	orrs	r2, r1
 8001c32:	61da      	str	r2, [r3, #28]
 8001c34:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c36:	69da      	ldr	r2, [r3, #28]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	055b      	lsls	r3, r3, #21
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	183b      	adds	r3, r7, r0
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	d11a      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c54:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c5a:	2180      	movs	r1, #128	; 0x80
 8001c5c:	0049      	lsls	r1, r1, #1
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff f8bb 	bl	8000ddc <HAL_GetTick>
 8001c66:	0003      	movs	r3, r0
 8001c68:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	e008      	b.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6c:	f7ff f8b6 	bl	8000ddc <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e077      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4013      	ands	r3, r2
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c8c:	6a1a      	ldr	r2, [r3, #32]
 8001c8e:	23c0      	movs	r3, #192	; 0xc0
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d034      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	23c0      	movs	r3, #192	; 0xc0
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d02c      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cac:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cb6:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	0249      	lsls	r1, r1, #9
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cca:	492e      	ldr	r1, [pc, #184]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff f87d 	bl	8000ddc <HAL_GetTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce6:	e009      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f878 	bl	8000ddc <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e038      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d1a:	2317      	movs	r3, #23
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d26:	69da      	ldr	r2, [r3, #28]
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d2a:	4918      	ldr	r1, [pc, #96]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001d2c:	400a      	ands	r2, r1
 8001d2e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	2203      	movs	r2, #3
 8001d40:	4393      	bics	r3, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2220      	movs	r2, #32
 8001d54:	4013      	ands	r3, r2
 8001d56:	d009      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d58:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	4393      	bics	r3, r2
 8001d60:	0019      	movs	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b006      	add	sp, #24
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	fffffcff 	.word	0xfffffcff
 8001d84:	fffeffff 	.word	0xfffeffff
 8001d88:	00001388 	.word	0x00001388
 8001d8c:	efffffff 	.word	0xefffffff

08001d90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d98:	230f      	movs	r3, #15
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e081      	b.n	8001eae <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7f5b      	ldrb	r3, [r3, #29]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d106      	bne.n	8001dc2 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7fe fc59 	bl	8000674 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2210      	movs	r2, #16
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d05c      	beq.n	8001e90 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	22ca      	movs	r2, #202	; 0xca
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2253      	movs	r2, #83	; 0x53
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001de6:	250f      	movs	r5, #15
 8001de8:	197c      	adds	r4, r7, r5
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f9c5 	bl	800217c <RTC_EnterInitMode>
 8001df2:	0003      	movs	r3, r0
 8001df4:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8001df6:	0028      	movs	r0, r5
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d12c      	bne.n	8001e5a <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	492b      	ldr	r1, [pc, #172]	; (8001eb8 <HAL_RTC_Init+0x128>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68d2      	ldr	r2, [r2, #12]
 8001e36:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6919      	ldr	r1, [r3, #16]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	041a      	lsls	r2, r3, #16
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001e4c:	183c      	adds	r4, r7, r0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 f9d6 	bl	8002202 <RTC_ExitInitMode>
 8001e56:	0003      	movs	r3, r0
 8001e58:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d110      	bne.n	8001e86 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4913      	ldr	r1, [pc, #76]	; (8001ebc <HAL_RTC_Init+0x12c>)
 8001e70:	400a      	ands	r2, r1
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	22ff      	movs	r2, #255	; 0xff
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8001e8e:	e003      	b.n	8001e98 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001e90:	230f      	movs	r3, #15
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8001e98:	230f      	movs	r3, #15
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	781b      	ldrb	r3, [r3, #0]
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b004      	add	sp, #16
 8001eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	ff8fffbf 	.word	0xff8fffbf
 8001ebc:	fffbffff 	.word	0xfffbffff

08001ec0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	7f1b      	ldrb	r3, [r3, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_RTC_SetTime+0x1c>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e08e      	b.n	8001ffa <HAL_RTC_SetTime+0x13a>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d125      	bne.n	8001f3a <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2240      	movs	r2, #64	; 0x40
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d102      	bne.n	8001f00 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f000 f9a5 	bl	8002254 <RTC_ByteToBcd2>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f99e 	bl	8002254 <RTC_ByteToBcd2>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f1c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	789b      	ldrb	r3, [r3, #2]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 f996 	bl	8002254 <RTC_ByteToBcd2>
 8001f28:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f2a:	0022      	movs	r2, r4
 8001f2c:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	78db      	ldrb	r3, [r3, #3]
 8001f32:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e017      	b.n	8001f6a <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2240      	movs	r2, #64	; 0x40
 8001f42:	4013      	ands	r3, r2
 8001f44:	d102      	bne.n	8001f4c <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f58:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	78db      	ldrb	r3, [r3, #3]
 8001f64:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	22ca      	movs	r2, #202	; 0xca
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2253      	movs	r2, #83	; 0x53
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001f7a:	2513      	movs	r5, #19
 8001f7c:	197c      	adds	r4, r7, r5
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 f8fb 	bl	800217c <RTC_EnterInitMode>
 8001f86:	0003      	movs	r3, r0
 8001f88:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001f8a:	0028      	movs	r0, r5
 8001f8c:	183b      	adds	r3, r7, r0
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d120      	bne.n	8001fd6 <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	491a      	ldr	r1, [pc, #104]	; (8002004 <HAL_RTC_SetTime+0x144>)
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4917      	ldr	r1, [pc, #92]	; (8002008 <HAL_RTC_SetTime+0x148>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6899      	ldr	r1, [r3, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001fc8:	183c      	adds	r4, r7, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f918 	bl	8002202 <RTC_ExitInitMode>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8001fd6:	2313      	movs	r3, #19
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	22ff      	movs	r2, #255	; 0xff
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]

  return status;
 8001ff4:	2313      	movs	r3, #19
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	781b      	ldrb	r3, [r3, #0]
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b006      	add	sp, #24
 8002000:	bdb0      	pop	{r4, r5, r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	007f7f7f 	.word	0x007f7f7f
 8002008:	fffbffff 	.word	0xfffbffff

0800200c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	7f1b      	ldrb	r3, [r3, #28]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_RTC_SetDate+0x1c>
 8002024:	2302      	movs	r3, #2
 8002026:	e07a      	b.n	800211e <HAL_RTC_SetDate+0x112>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2202      	movs	r2, #2
 8002032:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10e      	bne.n	8002058 <HAL_RTC_SetDate+0x4c>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	785b      	ldrb	r3, [r3, #1]
 800203e:	001a      	movs	r2, r3
 8002040:	2310      	movs	r3, #16
 8002042:	4013      	ands	r3, r2
 8002044:	d008      	beq.n	8002058 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	785b      	ldrb	r3, [r3, #1]
 800204a:	2210      	movs	r2, #16
 800204c:	4393      	bics	r3, r2
 800204e:	b2db      	uxtb	r3, r3
 8002050:	330a      	adds	r3, #10
 8002052:	b2da      	uxtb	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d11c      	bne.n	8002098 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	78db      	ldrb	r3, [r3, #3]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f8f6 	bl	8002254 <RTC_ByteToBcd2>
 8002068:	0003      	movs	r3, r0
 800206a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f8ef 	bl	8002254 <RTC_ByteToBcd2>
 8002076:	0003      	movs	r3, r0
 8002078:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800207a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	789b      	ldrb	r3, [r3, #2]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f8e7 	bl	8002254 <RTC_ByteToBcd2>
 8002086:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002088:	0022      	movs	r2, r4
 800208a:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e00e      	b.n	80020b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	78db      	ldrb	r3, [r3, #3]
 800209c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80020a4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80020aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80020b2:	4313      	orrs	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	22ca      	movs	r2, #202	; 0xca
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2253      	movs	r2, #83	; 0x53
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020c6:	2513      	movs	r5, #19
 80020c8:	197c      	adds	r4, r7, r5
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f855 	bl	800217c <RTC_EnterInitMode>
 80020d2:	0003      	movs	r3, r0
 80020d4:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80020d6:	0028      	movs	r0, r5
 80020d8:	183b      	adds	r3, r7, r0
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10c      	bne.n	80020fa <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4910      	ldr	r1, [pc, #64]	; (8002128 <HAL_RTC_SetDate+0x11c>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020ec:	183c      	adds	r4, r7, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0018      	movs	r0, r3
 80020f2:	f000 f886 	bl	8002202 <RTC_ExitInitMode>
 80020f6:	0003      	movs	r3, r0
 80020f8:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80020fa:	2313      	movs	r3, #19
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	22ff      	movs	r2, #255	; 0xff
 8002110:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]

  return status;
 8002118:	2313      	movs	r3, #19
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	781b      	ldrb	r3, [r3, #0]
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b006      	add	sp, #24
 8002124:	bdb0      	pop	{r4, r5, r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	00ffff3f 	.word	0x00ffff3f

0800212c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_RTC_WaitForSynchro+0x4c>)
 800213e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002140:	f7fe fe4c 	bl	8000ddc <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002148:	e00a      	b.n	8002160 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800214a:	f7fe fe47 	bl	8000ddc <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	23fa      	movs	r3, #250	; 0xfa
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d901      	bls.n	8002160 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e006      	b.n	800216e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	4013      	ands	r3, r2
 800216a:	d0ee      	beq.n	800214a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	00017959 	.word	0x00017959

0800217c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	230f      	movs	r3, #15
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	4013      	ands	r3, r2
 800219a:	d12b      	bne.n	80021f4 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	430a      	orrs	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fe16 	bl	8000ddc <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80021b4:	e013      	b.n	80021de <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021b6:	f7fe fe11 	bl	8000ddc <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	200f      	movs	r0, #15
 80021c2:	183b      	adds	r3, r7, r0
 80021c4:	1839      	adds	r1, r7, r0
 80021c6:	7809      	ldrb	r1, [r1, #0]
 80021c8:	7019      	strb	r1, [r3, #0]
 80021ca:	23fa      	movs	r3, #250	; 0xfa
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d905      	bls.n	80021de <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2240      	movs	r2, #64	; 0x40
 80021e6:	4013      	ands	r3, r2
 80021e8:	d104      	bne.n	80021f4 <RTC_EnterInitMode+0x78>
 80021ea:	230f      	movs	r3, #15
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d1e0      	bne.n	80021b6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80021f4:	230f      	movs	r3, #15
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	781b      	ldrb	r3, [r3, #0]
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b004      	add	sp, #16
 8002200:	bd80      	pop	{r7, pc}

08002202 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002202:	b590      	push	{r4, r7, lr}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800220a:	240f      	movs	r4, #15
 800220c:	193b      	adds	r3, r7, r4
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	438a      	bics	r2, r1
 8002220:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2220      	movs	r2, #32
 800222a:	4013      	ands	r3, r2
 800222c:	d10b      	bne.n	8002246 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff ff7b 	bl	800212c <HAL_RTC_WaitForSynchro>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d005      	beq.n	8002246 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2204      	movs	r2, #4
 800223e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002240:	193b      	adds	r3, r7, r4
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002246:	230f      	movs	r3, #15
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	781b      	ldrb	r3, [r3, #0]
}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	b005      	add	sp, #20
 8002252:	bd90      	pop	{r4, r7, pc}

08002254 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	0002      	movs	r2, r0
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002264:	e007      	b.n	8002276 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800226c:	1dfb      	adds	r3, r7, #7
 800226e:	1dfa      	adds	r2, r7, #7
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	3a0a      	subs	r2, #10
 8002274:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b09      	cmp	r3, #9
 800227c:	d8f3      	bhi.n	8002266 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	b2da      	uxtb	r2, r3
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	b2db      	uxtb	r3, r3
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b004      	add	sp, #16
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0a8      	b.n	80023fc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2382      	movs	r3, #130	; 0x82
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d009      	beq.n	80022d2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	61da      	str	r2, [r3, #28]
 80022c4:	e005      	b.n	80022d2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	225d      	movs	r2, #93	; 0x5d
 80022dc:	5c9b      	ldrb	r3, [r3, r2]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	225c      	movs	r2, #92	; 0x5c
 80022e8:	2100      	movs	r1, #0
 80022ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7fe f9d8 	bl	80006a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	225d      	movs	r2, #93	; 0x5d
 80022f8:	2102      	movs	r1, #2
 80022fa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2140      	movs	r1, #64	; 0x40
 8002308:	438a      	bics	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	23e0      	movs	r3, #224	; 0xe0
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	429a      	cmp	r2, r3
 8002316:	d902      	bls.n	800231e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e002      	b.n	8002324 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	015b      	lsls	r3, r3, #5
 8002322:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	23f0      	movs	r3, #240	; 0xf0
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	429a      	cmp	r2, r3
 800232e:	d008      	beq.n	8002342 <HAL_SPI_Init+0xaa>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	23e0      	movs	r3, #224	; 0xe0
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	429a      	cmp	r2, r3
 800233a:	d002      	beq.n	8002342 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	2382      	movs	r3, #130	; 0x82
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	401a      	ands	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	2384      	movs	r3, #132	; 0x84
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	400b      	ands	r3, r1
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2102      	movs	r1, #2
 800235e:	400b      	ands	r3, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2101      	movs	r1, #1
 8002368:	400b      	ands	r3, r1
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6999      	ldr	r1, [r3, #24]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	400b      	ands	r3, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2138      	movs	r1, #56	; 0x38
 800237e:	400b      	ands	r3, r1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	400b      	ands	r3, r1
 800238a:	431a      	orrs	r2, r3
 800238c:	0011      	movs	r1, r2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	401a      	ands	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	2204      	movs	r2, #4
 80023a8:	401a      	ands	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	2110      	movs	r1, #16
 80023b0:	400b      	ands	r3, r1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	2108      	movs	r1, #8
 80023ba:	400b      	ands	r3, r1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68d9      	ldr	r1, [r3, #12]
 80023c2:	23f0      	movs	r3, #240	; 0xf0
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	400b      	ands	r3, r1
 80023c8:	431a      	orrs	r2, r3
 80023ca:	0011      	movs	r1, r2
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	401a      	ands	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4907      	ldr	r1, [pc, #28]	; (8002404 <HAL_SPI_Init+0x16c>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	225d      	movs	r2, #93	; 0x5d
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b004      	add	sp, #16
 8002402:	bd80      	pop	{r7, pc}
 8002404:	fffff7ff 	.word	0xfffff7ff

08002408 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	1dbb      	adds	r3, r7, #6
 8002416:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002418:	231f      	movs	r3, #31
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	225c      	movs	r2, #92	; 0x5c
 8002424:	5c9b      	ldrb	r3, [r3, r2]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_SPI_Transmit+0x26>
 800242a:	2302      	movs	r3, #2
 800242c:	e147      	b.n	80026be <HAL_SPI_Transmit+0x2b6>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	225c      	movs	r2, #92	; 0x5c
 8002432:	2101      	movs	r1, #1
 8002434:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002436:	f7fe fcd1 	bl	8000ddc <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800243e:	2316      	movs	r3, #22
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	1dba      	adds	r2, r7, #6
 8002444:	8812      	ldrh	r2, [r2, #0]
 8002446:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	225d      	movs	r2, #93	; 0x5d
 800244c:	5c9b      	ldrb	r3, [r3, r2]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d004      	beq.n	800245e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002454:	231f      	movs	r3, #31
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2202      	movs	r2, #2
 800245a:	701a      	strb	r2, [r3, #0]
    goto error;
 800245c:	e128      	b.n	80026b0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_SPI_Transmit+0x64>
 8002464:	1dbb      	adds	r3, r7, #6
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800246c:	231f      	movs	r3, #31
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
    goto error;
 8002474:	e11c      	b.n	80026b0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	225d      	movs	r2, #93	; 0x5d
 800247a:	2103      	movs	r1, #3
 800247c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1dba      	adds	r2, r7, #6
 800248e:	8812      	ldrh	r2, [r2, #0]
 8002490:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1dba      	adds	r2, r7, #6
 8002496:	8812      	ldrh	r2, [r2, #0]
 8002498:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2244      	movs	r2, #68	; 0x44
 80024a4:	2100      	movs	r1, #0
 80024a6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2246      	movs	r2, #70	; 0x46
 80024ac:	2100      	movs	r1, #0
 80024ae:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d110      	bne.n	80024ea <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2140      	movs	r1, #64	; 0x40
 80024d4:	438a      	bics	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2180      	movs	r1, #128	; 0x80
 80024e4:	01c9      	lsls	r1, r1, #7
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2240      	movs	r2, #64	; 0x40
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d007      	beq.n	8002508 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	23e0      	movs	r3, #224	; 0xe0
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	429a      	cmp	r2, r3
 8002512:	d952      	bls.n	80025ba <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <HAL_SPI_Transmit+0x11e>
 800251c:	2316      	movs	r3, #22
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d143      	bne.n	80025ae <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	881a      	ldrh	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	1c9a      	adds	r2, r3, #2
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800254a:	e030      	b.n	80025ae <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2202      	movs	r2, #2
 8002554:	4013      	ands	r3, r2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d112      	bne.n	8002580 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255e:	881a      	ldrh	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	1c9a      	adds	r2, r3, #2
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800257e:	e016      	b.n	80025ae <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002580:	f7fe fc2c 	bl	8000ddc <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d802      	bhi.n	8002596 <HAL_SPI_Transmit+0x18e>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_SPI_Transmit+0x194>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d108      	bne.n	80025ae <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800259c:	231f      	movs	r3, #31
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2203      	movs	r2, #3
 80025a2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	225d      	movs	r2, #93	; 0x5d
 80025a8:	2101      	movs	r1, #1
 80025aa:	5499      	strb	r1, [r3, r2]
          goto error;
 80025ac:	e080      	b.n	80026b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1c9      	bne.n	800254c <HAL_SPI_Transmit+0x144>
 80025b8:	e053      	b.n	8002662 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <HAL_SPI_Transmit+0x1c4>
 80025c2:	2316      	movs	r3, #22
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d145      	bne.n	8002658 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80025f2:	e031      	b.n	8002658 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d113      	bne.n	800262a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29a      	uxth	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002628:	e016      	b.n	8002658 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262a:	f7fe fbd7 	bl	8000ddc <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d802      	bhi.n	8002640 <HAL_SPI_Transmit+0x238>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	d102      	bne.n	8002646 <HAL_SPI_Transmit+0x23e>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d108      	bne.n	8002658 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002646:	231f      	movs	r3, #31
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2203      	movs	r2, #3
 800264c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	225d      	movs	r2, #93	; 0x5d
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]
          goto error;
 8002656:	e02b      	b.n	80026b0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1c8      	bne.n	80025f4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fdf7 	bl	800325c <SPI_EndRxTxTransaction>
 800266e:	1e03      	subs	r3, r0, #0
 8002670:	d002      	beq.n	8002678 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800269e:	231f      	movs	r3, #31
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e003      	b.n	80026b0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	225d      	movs	r2, #93	; 0x5d
 80026ac:	2101      	movs	r1, #1
 80026ae:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	225c      	movs	r2, #92	; 0x5c
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026b8:	231f      	movs	r3, #31
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	781b      	ldrb	r3, [r3, #0]
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b008      	add	sp, #32
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	1dbb      	adds	r3, r7, #6
 80026d6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026d8:	2117      	movs	r1, #23
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	225d      	movs	r2, #93	; 0x5d
 80026e4:	5c9b      	ldrb	r3, [r3, r2]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d003      	beq.n	80026f4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80026f2:	e12b      	b.n	800294c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	2382      	movs	r3, #130	; 0x82
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d113      	bne.n	8002728 <HAL_SPI_Receive+0x60>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10f      	bne.n	8002728 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	225d      	movs	r2, #93	; 0x5d
 800270c:	2104      	movs	r1, #4
 800270e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002710:	1dbb      	adds	r3, r7, #6
 8002712:	881c      	ldrh	r4, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	0023      	movs	r3, r4
 8002720:	f000 f924 	bl	800296c <HAL_SPI_TransmitReceive>
 8002724:	0003      	movs	r3, r0
 8002726:	e118      	b.n	800295a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	225c      	movs	r2, #92	; 0x5c
 800272c:	5c9b      	ldrb	r3, [r3, r2]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_SPI_Receive+0x6e>
 8002732:	2302      	movs	r3, #2
 8002734:	e111      	b.n	800295a <HAL_SPI_Receive+0x292>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	225c      	movs	r2, #92	; 0x5c
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800273e:	f7fe fb4d 	bl	8000ddc <HAL_GetTick>
 8002742:	0003      	movs	r3, r0
 8002744:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_SPI_Receive+0x8c>
 800274c:	1dbb      	adds	r3, r7, #6
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d104      	bne.n	800275e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002754:	2317      	movs	r3, #23
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
    goto error;
 800275c:	e0f6      	b.n	800294c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	225d      	movs	r2, #93	; 0x5d
 8002762:	2104      	movs	r1, #4
 8002764:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1dba      	adds	r2, r7, #6
 8002776:	2144      	movs	r1, #68	; 0x44
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1dba      	adds	r2, r7, #6
 8002780:	2146      	movs	r1, #70	; 0x46
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	23e0      	movs	r3, #224	; 0xe0
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d908      	bls.n	80027c2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	496a      	ldr	r1, [pc, #424]	; (8002964 <HAL_SPI_Receive+0x29c>)
 80027bc:	400a      	ands	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	e008      	b.n	80027d4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	0149      	lsls	r1, r1, #5
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	429a      	cmp	r2, r3
 80027de:	d10f      	bne.n	8002800 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2140      	movs	r1, #64	; 0x40
 80027ec:	438a      	bics	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	495b      	ldr	r1, [pc, #364]	; (8002968 <HAL_SPI_Receive+0x2a0>)
 80027fc:	400a      	ands	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2240      	movs	r2, #64	; 0x40
 8002808:	4013      	ands	r3, r2
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d007      	beq.n	800281e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2140      	movs	r1, #64	; 0x40
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	23e0      	movs	r3, #224	; 0xe0
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	429a      	cmp	r2, r3
 8002828:	d900      	bls.n	800282c <HAL_SPI_Receive+0x164>
 800282a:	e071      	b.n	8002910 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800282c:	e035      	b.n	800289a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2201      	movs	r2, #1
 8002836:	4013      	ands	r3, r2
 8002838:	2b01      	cmp	r3, #1
 800283a:	d117      	bne.n	800286c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	001a      	movs	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2246      	movs	r2, #70	; 0x46
 800285c:	5a9b      	ldrh	r3, [r3, r2]
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b299      	uxth	r1, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2246      	movs	r2, #70	; 0x46
 8002868:	5299      	strh	r1, [r3, r2]
 800286a:	e016      	b.n	800289a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800286c:	f7fe fab6 	bl	8000ddc <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d802      	bhi.n	8002882 <HAL_SPI_Receive+0x1ba>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	3301      	adds	r3, #1
 8002880:	d102      	bne.n	8002888 <HAL_SPI_Receive+0x1c0>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d108      	bne.n	800289a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002888:	2317      	movs	r3, #23
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2203      	movs	r2, #3
 800288e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	225d      	movs	r2, #93	; 0x5d
 8002894:	2101      	movs	r1, #1
 8002896:	5499      	strb	r1, [r3, r2]
          goto error;
 8002898:	e058      	b.n	800294c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2246      	movs	r2, #70	; 0x46
 800289e:	5a9b      	ldrh	r3, [r3, r2]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1c3      	bne.n	800282e <HAL_SPI_Receive+0x166>
 80028a6:	e039      	b.n	800291c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d115      	bne.n	80028e2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	b292      	uxth	r2, r2
 80028c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	1c9a      	adds	r2, r3, #2
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2246      	movs	r2, #70	; 0x46
 80028d2:	5a9b      	ldrh	r3, [r3, r2]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b299      	uxth	r1, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2246      	movs	r2, #70	; 0x46
 80028de:	5299      	strh	r1, [r3, r2]
 80028e0:	e016      	b.n	8002910 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028e2:	f7fe fa7b 	bl	8000ddc <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d802      	bhi.n	80028f8 <HAL_SPI_Receive+0x230>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	3301      	adds	r3, #1
 80028f6:	d102      	bne.n	80028fe <HAL_SPI_Receive+0x236>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d108      	bne.n	8002910 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80028fe:	2317      	movs	r3, #23
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2203      	movs	r2, #3
 8002904:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	225d      	movs	r2, #93	; 0x5d
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]
          goto error;
 800290e:	e01d      	b.n	800294c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2246      	movs	r2, #70	; 0x46
 8002914:	5a9b      	ldrh	r3, [r3, r2]
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1c5      	bne.n	80028a8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	6839      	ldr	r1, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 fc3c 	bl	80031a0 <SPI_EndRxTransaction>
 8002928:	1e03      	subs	r3, r0, #0
 800292a:	d002      	beq.n	8002932 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800293a:	2317      	movs	r3, #23
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e003      	b.n	800294c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	225d      	movs	r2, #93	; 0x5d
 8002948:	2101      	movs	r1, #1
 800294a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	225c      	movs	r2, #92	; 0x5c
 8002950:	2100      	movs	r1, #0
 8002952:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002954:	2317      	movs	r3, #23
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	781b      	ldrb	r3, [r3, #0]
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b007      	add	sp, #28
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	ffffefff 	.word	0xffffefff
 8002968:	ffffbfff 	.word	0xffffbfff

0800296c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	001a      	movs	r2, r3
 800297a:	1cbb      	adds	r3, r7, #2
 800297c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800297e:	2301      	movs	r3, #1
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002982:	2323      	movs	r3, #35	; 0x23
 8002984:	18fb      	adds	r3, r7, r3
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	225c      	movs	r2, #92	; 0x5c
 800298e:	5c9b      	ldrb	r3, [r3, r2]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x2c>
 8002994:	2302      	movs	r3, #2
 8002996:	e1c4      	b.n	8002d22 <HAL_SPI_TransmitReceive+0x3b6>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	225c      	movs	r2, #92	; 0x5c
 800299c:	2101      	movs	r1, #1
 800299e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029a0:	f7fe fa1c 	bl	8000ddc <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029a8:	201b      	movs	r0, #27
 80029aa:	183b      	adds	r3, r7, r0
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	215d      	movs	r1, #93	; 0x5d
 80029b0:	5c52      	ldrb	r2, [r2, r1]
 80029b2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80029ba:	2312      	movs	r3, #18
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	1cba      	adds	r2, r7, #2
 80029c0:	8812      	ldrh	r2, [r2, #0]
 80029c2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029c4:	183b      	adds	r3, r7, r0
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d011      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x84>
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	2382      	movs	r3, #130	; 0x82
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d107      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x7a>
 80029de:	183b      	adds	r3, r7, r0
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d004      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80029e6:	2323      	movs	r3, #35	; 0x23
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	2202      	movs	r2, #2
 80029ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80029ee:	e191      	b.n	8002d14 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <HAL_SPI_TransmitReceive+0x98>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_SPI_TransmitReceive+0x98>
 80029fc:	1cbb      	adds	r3, r7, #2
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002a04:	2323      	movs	r3, #35	; 0x23
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a0c:	e182      	b.n	8002d14 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	225d      	movs	r2, #93	; 0x5d
 8002a12:	5c9b      	ldrb	r3, [r3, r2]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d003      	beq.n	8002a22 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	225d      	movs	r2, #93	; 0x5d
 8002a1e:	2105      	movs	r1, #5
 8002a20:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1cba      	adds	r2, r7, #2
 8002a32:	2146      	movs	r1, #70	; 0x46
 8002a34:	8812      	ldrh	r2, [r2, #0]
 8002a36:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1cba      	adds	r2, r7, #2
 8002a3c:	2144      	movs	r1, #68	; 0x44
 8002a3e:	8812      	ldrh	r2, [r2, #0]
 8002a40:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1cba      	adds	r2, r7, #2
 8002a4c:	8812      	ldrh	r2, [r2, #0]
 8002a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1cba      	adds	r2, r7, #2
 8002a54:	8812      	ldrh	r2, [r2, #0]
 8002a56:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	23e0      	movs	r3, #224	; 0xe0
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d908      	bls.n	8002a82 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	49ac      	ldr	r1, [pc, #688]	; (8002d2c <HAL_SPI_TransmitReceive+0x3c0>)
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	e008      	b.n	8002a94 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	0149      	lsls	r1, r1, #5
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2240      	movs	r2, #64	; 0x40
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d007      	beq.n	8002ab2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2140      	movs	r1, #64	; 0x40
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	23e0      	movs	r3, #224	; 0xe0
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d800      	bhi.n	8002ac0 <HAL_SPI_TransmitReceive+0x154>
 8002abe:	e083      	b.n	8002bc8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_SPI_TransmitReceive+0x168>
 8002ac8:	2312      	movs	r3, #18
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d000      	beq.n	8002ad4 <HAL_SPI_TransmitReceive+0x168>
 8002ad2:	e06d      	b.n	8002bb0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	1c9a      	adds	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002af8:	e05a      	b.n	8002bb0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2202      	movs	r2, #2
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d11b      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x1d4>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x1d4>
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d113      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2201      	movs	r2, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d11c      	bne.n	8002b88 <HAL_SPI_TransmitReceive+0x21c>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2246      	movs	r2, #70	; 0x46
 8002b52:	5a9b      	ldrh	r3, [r3, r2]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	b292      	uxth	r2, r2
 8002b66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2246      	movs	r2, #70	; 0x46
 8002b76:	5a9b      	ldrh	r3, [r3, r2]
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	b299      	uxth	r1, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2246      	movs	r2, #70	; 0x46
 8002b82:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b84:	2301      	movs	r3, #1
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b88:	f7fe f928 	bl	8000ddc <HAL_GetTick>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d80b      	bhi.n	8002bb0 <HAL_SPI_TransmitReceive+0x244>
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	d008      	beq.n	8002bb0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002b9e:	2323      	movs	r3, #35	; 0x23
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	225d      	movs	r2, #93	; 0x5d
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]
        goto error;
 8002bae:	e0b1      	b.n	8002d14 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d19f      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x18e>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2246      	movs	r2, #70	; 0x46
 8002bbe:	5a9b      	ldrh	r3, [r3, r2]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d199      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x18e>
 8002bc6:	e089      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x270>
 8002bd0:	2312      	movs	r3, #18
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d000      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x270>
 8002bda:	e074      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c02:	e060      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d11c      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x2e0>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d017      	beq.n	8002c4c <HAL_SPI_TransmitReceive+0x2e0>
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d114      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	7812      	ldrb	r2, [r2, #0]
 8002c2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d11e      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x32c>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2246      	movs	r2, #70	; 0x46
 8002c5e:	5a9b      	ldrh	r3, [r3, r2]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d018      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	330c      	adds	r3, #12
 8002c6c:	001a      	movs	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	7812      	ldrb	r2, [r2, #0]
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2246      	movs	r2, #70	; 0x46
 8002c86:	5a9b      	ldrh	r3, [r3, r2]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b299      	uxth	r1, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2246      	movs	r2, #70	; 0x46
 8002c92:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c94:	2301      	movs	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c98:	f7fe f8a0 	bl	8000ddc <HAL_GetTick>
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d802      	bhi.n	8002cae <HAL_SPI_TransmitReceive+0x342>
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	3301      	adds	r3, #1
 8002cac:	d102      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x348>
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d108      	bne.n	8002cc6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002cb4:	2323      	movs	r3, #35	; 0x23
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2203      	movs	r2, #3
 8002cba:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	225d      	movs	r2, #93	; 0x5d
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	5499      	strb	r1, [r3, r2]
        goto error;
 8002cc4:	e026      	b.n	8002d14 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d199      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0x298>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2246      	movs	r2, #70	; 0x46
 8002cd4:	5a9b      	ldrh	r3, [r3, r2]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d193      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 faba 	bl	800325c <SPI_EndRxTxTransaction>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d006      	beq.n	8002cfa <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002cec:	2323      	movs	r3, #35	; 0x23
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002d02:	2323      	movs	r3, #35	; 0x23
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e003      	b.n	8002d14 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	225d      	movs	r2, #93	; 0x5d
 8002d10:	2101      	movs	r1, #1
 8002d12:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	225c      	movs	r2, #92	; 0x5c
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d1c:	2323      	movs	r3, #35	; 0x23
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	781b      	ldrb	r3, [r3, #0]
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b00a      	add	sp, #40	; 0x28
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	ffffefff 	.word	0xffffefff

08002d30 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2240      	movs	r2, #64	; 0x40
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d10d      	bne.n	8002d6c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d56:	d009      	beq.n	8002d6c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2240      	movs	r2, #64	; 0x40
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d005      	beq.n	8002d6c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	0010      	movs	r0, r2
 8002d68:	4798      	blx	r3
    return;
 8002d6a:	e0c5      	b.n	8002ef8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	4013      	ands	r3, r2
 8002d72:	d009      	beq.n	8002d88 <HAL_SPI_IRQHandler+0x58>
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d005      	beq.n	8002d88 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	0010      	movs	r0, r2
 8002d84:	4798      	blx	r3
    return;
 8002d86:	e0b7      	b.n	8002ef8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d109      	bne.n	8002da4 <HAL_SPI_IRQHandler+0x74>
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2240      	movs	r2, #64	; 0x40
 8002d94:	4013      	ands	r3, r2
 8002d96:	d105      	bne.n	8002da4 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d100      	bne.n	8002da4 <HAL_SPI_IRQHandler+0x74>
 8002da2:	e0a9      	b.n	8002ef8 <HAL_SPI_IRQHandler+0x1c8>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2220      	movs	r2, #32
 8002da8:	4013      	ands	r3, r2
 8002daa:	d100      	bne.n	8002dae <HAL_SPI_IRQHandler+0x7e>
 8002dac:	e0a4      	b.n	8002ef8 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2240      	movs	r2, #64	; 0x40
 8002db2:	4013      	ands	r3, r2
 8002db4:	d023      	beq.n	8002dfe <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	225d      	movs	r2, #93	; 0x5d
 8002dba:	5c9b      	ldrb	r3, [r3, r2]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d011      	beq.n	8002de6 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	e00b      	b.n	8002dfe <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
        return;
 8002dfc:	e07c      	b.n	8002ef8 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2220      	movs	r2, #32
 8002e02:	4013      	ands	r3, r2
 8002e04:	d014      	beq.n	8002e30 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	d00c      	beq.n	8002e54 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	2208      	movs	r2, #8
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d04c      	beq.n	8002ef6 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	21e0      	movs	r1, #224	; 0xe0
 8002e68:	438a      	bics	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	225d      	movs	r2, #93	; 0x5d
 8002e70:	2101      	movs	r1, #1
 8002e72:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2202      	movs	r2, #2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d103      	bne.n	8002e84 <HAL_SPI_IRQHandler+0x154>
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	d032      	beq.n	8002eea <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2103      	movs	r1, #3
 8002e90:	438a      	bics	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <HAL_SPI_IRQHandler+0x1d0>)
 8002ea2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f7fe f87f 	bl	8000fac <HAL_DMA_Abort_IT>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	2240      	movs	r2, #64	; 0x40
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <HAL_SPI_IRQHandler+0x1d0>)
 8002ecc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7fe f86a 	bl	8000fac <HAL_DMA_Abort_IT>
 8002ed8:	1e03      	subs	r3, r0, #0
 8002eda:	d00b      	beq.n	8002ef4 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	2240      	movs	r2, #64	; 0x40
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002ee8:	e004      	b.n	8002ef4 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 f809 	bl	8002f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ef2:	e000      	b.n	8002ef6 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002ef4:	46c0      	nop			; (mov r8, r8)
    return;
 8002ef6:	46c0      	nop			; (mov r8, r8)
  }
}
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b008      	add	sp, #32
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	08002f15 	.word	0x08002f15

08002f04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2246      	movs	r2, #70	; 0x46
 8002f26:	2100      	movs	r1, #0
 8002f28:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7ff ffe6 	bl	8002f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b004      	add	sp, #16
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f50:	f7fd ff44 	bl	8000ddc <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	18d3      	adds	r3, r2, r3
 8002f5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f60:	f7fd ff3c 	bl	8000ddc <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f68:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	015b      	lsls	r3, r3, #5
 8002f6e:	0d1b      	lsrs	r3, r3, #20
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	4353      	muls	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f76:	e058      	b.n	800302a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	d055      	beq.n	800302a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f7e:	f7fd ff2d 	bl	8000ddc <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d902      	bls.n	8002f94 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d142      	bne.n	800301a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	21e0      	movs	r1, #224	; 0xe0
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	2382      	movs	r3, #130	; 0x82
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d113      	bne.n	8002fd8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d005      	beq.n	8002fc8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d107      	bne.n	8002fd8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2140      	movs	r1, #64	; 0x40
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	019b      	lsls	r3, r3, #6
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d110      	bne.n	8003006 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	491a      	ldr	r1, [pc, #104]	; (8003058 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2180      	movs	r1, #128	; 0x80
 8003000:	0189      	lsls	r1, r1, #6
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	225d      	movs	r2, #93	; 0x5d
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	225c      	movs	r2, #92	; 0x5c
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e017      	b.n	800304a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	3b01      	subs	r3, #1
 8003028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	425a      	negs	r2, r3
 800303a:	4153      	adcs	r3, r2
 800303c:	b2db      	uxtb	r3, r3
 800303e:	001a      	movs	r2, r3
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d197      	bne.n	8002f78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b008      	add	sp, #32
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	2000000c 	.word	0x2000000c
 8003058:	ffffdfff 	.word	0xffffdfff

0800305c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800306a:	2317      	movs	r3, #23
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003072:	f7fd feb3 	bl	8000ddc <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	18d3      	adds	r3, r2, r3
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003082:	f7fd feab 	bl	8000ddc <HAL_GetTick>
 8003086:	0003      	movs	r3, r0
 8003088:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	0013      	movs	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	189b      	adds	r3, r3, r2
 800309c:	00da      	lsls	r2, r3, #3
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	0d1b      	lsrs	r3, r3, #20
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	4353      	muls	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030a8:	e068      	b.n	800317c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	23c0      	movs	r3, #192	; 0xc0
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d10a      	bne.n	80030ca <SPI_WaitFifoStateUntilTimeout+0x6e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	2117      	movs	r1, #23
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	d055      	beq.n	800317c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030d0:	f7fd fe84 	bl	8000ddc <HAL_GetTick>
 80030d4:	0002      	movs	r2, r0
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	429a      	cmp	r2, r3
 80030de:	d902      	bls.n	80030e6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d142      	bne.n	800316c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	21e0      	movs	r1, #224	; 0xe0
 80030f2:	438a      	bics	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	2382      	movs	r3, #130	; 0x82
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	429a      	cmp	r2, r3
 8003100:	d113      	bne.n	800312a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	429a      	cmp	r2, r3
 800310c:	d005      	beq.n	800311a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	429a      	cmp	r2, r3
 8003118:	d107      	bne.n	800312a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	438a      	bics	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	429a      	cmp	r2, r3
 8003134:	d110      	bne.n	8003158 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4916      	ldr	r1, [pc, #88]	; (800319c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003142:	400a      	ands	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2180      	movs	r1, #128	; 0x80
 8003152:	0189      	lsls	r1, r1, #6
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	225d      	movs	r2, #93	; 0x5d
 800315c:	2101      	movs	r1, #1
 800315e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	225c      	movs	r2, #92	; 0x5c
 8003164:	2100      	movs	r1, #0
 8003166:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e010      	b.n	800318e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	3b01      	subs	r3, #1
 800317a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	d18e      	bne.n	80030aa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b00a      	add	sp, #40	; 0x28
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	2000000c 	.word	0x2000000c
 800319c:	ffffdfff 	.word	0xffffdfff

080031a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	2382      	movs	r3, #130	; 0x82
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d113      	bne.n	80031e0 <SPI_EndRxTransaction+0x40>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d005      	beq.n	80031d0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d107      	bne.n	80031e0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	438a      	bics	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	0013      	movs	r3, r2
 80031ea:	2200      	movs	r2, #0
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	f7ff fea7 	bl	8002f40 <SPI_WaitFlagStateUntilTimeout>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d007      	beq.n	8003206 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fa:	2220      	movs	r2, #32
 80031fc:	431a      	orrs	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e026      	b.n	8003254 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	2382      	movs	r3, #130	; 0x82
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	429a      	cmp	r2, r3
 8003210:	d11f      	bne.n	8003252 <SPI_EndRxTransaction+0xb2>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	429a      	cmp	r2, r3
 800321c:	d005      	beq.n	800322a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	429a      	cmp	r2, r3
 8003228:	d113      	bne.n	8003252 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	23c0      	movs	r3, #192	; 0xc0
 800322e:	00d9      	lsls	r1, r3, #3
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	0013      	movs	r3, r2
 8003238:	2200      	movs	r2, #0
 800323a:	f7ff ff0f 	bl	800305c <SPI_WaitFifoStateUntilTimeout>
 800323e:	1e03      	subs	r3, r0, #0
 8003240:	d007      	beq.n	8003252 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003246:	2220      	movs	r2, #32
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e000      	b.n	8003254 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	0018      	movs	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	b004      	add	sp, #16
 800325a:	bd80      	pop	{r7, pc}

0800325c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	23c0      	movs	r3, #192	; 0xc0
 800326c:	0159      	lsls	r1, r3, #5
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	0013      	movs	r3, r2
 8003276:	2200      	movs	r2, #0
 8003278:	f7ff fef0 	bl	800305c <SPI_WaitFifoStateUntilTimeout>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d007      	beq.n	8003290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003284:	2220      	movs	r2, #32
 8003286:	431a      	orrs	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e027      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	0013      	movs	r3, r2
 800329a:	2200      	movs	r2, #0
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	f7ff fe4f 	bl	8002f40 <SPI_WaitFlagStateUntilTimeout>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d007      	beq.n	80032b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	2220      	movs	r2, #32
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e014      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	23c0      	movs	r3, #192	; 0xc0
 80032ba:	00d9      	lsls	r1, r3, #3
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	0013      	movs	r3, r2
 80032c4:	2200      	movs	r2, #0
 80032c6:	f7ff fec9 	bl	800305c <SPI_WaitFifoStateUntilTimeout>
 80032ca:	1e03      	subs	r3, r0, #0
 80032cc:	d007      	beq.n	80032de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	2220      	movs	r2, #32
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e000      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b004      	add	sp, #16
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e042      	b.n	8003380 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223d      	movs	r2, #61	; 0x3d
 80032fe:	5c9b      	ldrb	r3, [r3, r2]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d107      	bne.n	8003316 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	223c      	movs	r2, #60	; 0x3c
 800330a:	2100      	movs	r1, #0
 800330c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0018      	movs	r0, r3
 8003312:	f7fd fa1b 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	223d      	movs	r2, #61	; 0x3d
 800331a:	2102      	movs	r1, #2
 800331c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	0019      	movs	r1, r3
 8003328:	0010      	movs	r0, r2
 800332a:	f000 fa83 	bl	8003834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2246      	movs	r2, #70	; 0x46
 8003332:	2101      	movs	r1, #1
 8003334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	223e      	movs	r2, #62	; 0x3e
 800333a:	2101      	movs	r1, #1
 800333c:	5499      	strb	r1, [r3, r2]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	223f      	movs	r2, #63	; 0x3f
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2240      	movs	r2, #64	; 0x40
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2241      	movs	r2, #65	; 0x41
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2242      	movs	r2, #66	; 0x42
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2243      	movs	r2, #67	; 0x43
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2244      	movs	r2, #68	; 0x44
 800336a:	2101      	movs	r1, #1
 800336c:	5499      	strb	r1, [r3, r2]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2245      	movs	r2, #69	; 0x45
 8003372:	2101      	movs	r1, #1
 8003374:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	223d      	movs	r2, #61	; 0x3d
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	0018      	movs	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	223d      	movs	r2, #61	; 0x3d
 8003394:	5c9b      	ldrb	r3, [r3, r2]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d001      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e036      	b.n	800340e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	223d      	movs	r2, #61	; 0x3d
 80033a4:	2102      	movs	r1, #2
 80033a6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2101      	movs	r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a16      	ldr	r2, [pc, #88]	; (8003418 <HAL_TIM_Base_Start_IT+0x90>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00a      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x50>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	05db      	lsls	r3, r3, #23
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d004      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x50>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a12      	ldr	r2, [pc, #72]	; (800341c <HAL_TIM_Base_Start_IT+0x94>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d111      	bne.n	80033fc <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2207      	movs	r2, #7
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d010      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fa:	e007      	b.n	800340c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2101      	movs	r1, #1
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400

08003420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2202      	movs	r2, #2
 8003430:	4013      	ands	r3, r2
 8003432:	2b02      	cmp	r3, #2
 8003434:	d124      	bne.n	8003480 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2202      	movs	r2, #2
 800343e:	4013      	ands	r3, r2
 8003440:	2b02      	cmp	r3, #2
 8003442:	d11d      	bne.n	8003480 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2203      	movs	r2, #3
 800344a:	4252      	negs	r2, r2
 800344c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2203      	movs	r2, #3
 800345c:	4013      	ands	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f9ce 	bl	8003804 <HAL_TIM_IC_CaptureCallback>
 8003468:	e007      	b.n	800347a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f000 f9c1 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 f9cd 	bl	8003814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2204      	movs	r2, #4
 8003488:	4013      	ands	r3, r2
 800348a:	2b04      	cmp	r3, #4
 800348c:	d125      	bne.n	80034da <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2204      	movs	r2, #4
 8003496:	4013      	ands	r3, r2
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11e      	bne.n	80034da <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2205      	movs	r2, #5
 80034a2:	4252      	negs	r2, r2
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	23c0      	movs	r3, #192	; 0xc0
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4013      	ands	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 f9a1 	bl	8003804 <HAL_TIM_IC_CaptureCallback>
 80034c2:	e007      	b.n	80034d4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 f994 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f9a0 	bl	8003814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2208      	movs	r2, #8
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d124      	bne.n	8003532 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2208      	movs	r2, #8
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d11d      	bne.n	8003532 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2209      	movs	r2, #9
 80034fc:	4252      	negs	r2, r2
 80034fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2204      	movs	r2, #4
 8003504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	2203      	movs	r2, #3
 800350e:	4013      	ands	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f000 f975 	bl	8003804 <HAL_TIM_IC_CaptureCallback>
 800351a:	e007      	b.n	800352c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0018      	movs	r0, r3
 8003520:	f000 f968 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0018      	movs	r0, r3
 8003528:	f000 f974 	bl	8003814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2210      	movs	r2, #16
 800353a:	4013      	ands	r3, r2
 800353c:	2b10      	cmp	r3, #16
 800353e:	d125      	bne.n	800358c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2210      	movs	r2, #16
 8003548:	4013      	ands	r3, r2
 800354a:	2b10      	cmp	r3, #16
 800354c:	d11e      	bne.n	800358c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2211      	movs	r2, #17
 8003554:	4252      	negs	r2, r2
 8003556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2208      	movs	r2, #8
 800355c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	23c0      	movs	r3, #192	; 0xc0
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4013      	ands	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f948 	bl	8003804 <HAL_TIM_IC_CaptureCallback>
 8003574:	e007      	b.n	8003586 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 f93b 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f000 f947 	bl	8003814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2201      	movs	r2, #1
 8003594:	4013      	ands	r3, r2
 8003596:	2b01      	cmp	r3, #1
 8003598:	d10f      	bne.n	80035ba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d108      	bne.n	80035ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2202      	movs	r2, #2
 80035ae:	4252      	negs	r2, r2
 80035b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7fc fe33 	bl	8000220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d10f      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d108      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2281      	movs	r2, #129	; 0x81
 80035dc:	4252      	negs	r2, r2
 80035de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 fa96 	bl	8003b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2240      	movs	r2, #64	; 0x40
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d10f      	bne.n	8003616 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2240      	movs	r2, #64	; 0x40
 80035fe:	4013      	ands	r3, r2
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d108      	bne.n	8003616 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2241      	movs	r2, #65	; 0x41
 800360a:	4252      	negs	r2, r2
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0018      	movs	r0, r3
 8003612:	f000 f907 	bl	8003824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2220      	movs	r2, #32
 800361e:	4013      	ands	r3, r2
 8003620:	2b20      	cmp	r3, #32
 8003622:	d10f      	bne.n	8003644 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	4013      	ands	r3, r2
 800362e:	2b20      	cmp	r3, #32
 8003630:	d108      	bne.n	8003644 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2221      	movs	r2, #33	; 0x21
 8003638:	4252      	negs	r2, r2
 800363a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	0018      	movs	r0, r3
 8003640:	f000 fa60 	bl	8003b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	230f      	movs	r3, #15
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	223c      	movs	r2, #60	; 0x3c
 8003662:	5c9b      	ldrb	r3, [r3, r2]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIM_ConfigClockSource+0x20>
 8003668:	2302      	movs	r3, #2
 800366a:	e0bc      	b.n	80037e6 <HAL_TIM_ConfigClockSource+0x19a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	223c      	movs	r2, #60	; 0x3c
 8003670:	2101      	movs	r1, #1
 8003672:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	223d      	movs	r2, #61	; 0x3d
 8003678:	2102      	movs	r1, #2
 800367a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2277      	movs	r2, #119	; 0x77
 8003688:	4393      	bics	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003690:	4013      	ands	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2280      	movs	r2, #128	; 0x80
 80036a2:	0192      	lsls	r2, r2, #6
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d040      	beq.n	800372a <HAL_TIM_ConfigClockSource+0xde>
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	0192      	lsls	r2, r2, #6
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d900      	bls.n	80036b2 <HAL_TIM_ConfigClockSource+0x66>
 80036b0:	e088      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	0152      	lsls	r2, r2, #5
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d100      	bne.n	80036bc <HAL_TIM_ConfigClockSource+0x70>
 80036ba:	e088      	b.n	80037ce <HAL_TIM_ConfigClockSource+0x182>
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	0152      	lsls	r2, r2, #5
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d900      	bls.n	80036c6 <HAL_TIM_ConfigClockSource+0x7a>
 80036c4:	e07e      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
 80036c6:	2b70      	cmp	r3, #112	; 0x70
 80036c8:	d018      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0xb0>
 80036ca:	d900      	bls.n	80036ce <HAL_TIM_ConfigClockSource+0x82>
 80036cc:	e07a      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
 80036ce:	2b60      	cmp	r3, #96	; 0x60
 80036d0:	d04f      	beq.n	8003772 <HAL_TIM_ConfigClockSource+0x126>
 80036d2:	d900      	bls.n	80036d6 <HAL_TIM_ConfigClockSource+0x8a>
 80036d4:	e076      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
 80036d6:	2b50      	cmp	r3, #80	; 0x50
 80036d8:	d03b      	beq.n	8003752 <HAL_TIM_ConfigClockSource+0x106>
 80036da:	d900      	bls.n	80036de <HAL_TIM_ConfigClockSource+0x92>
 80036dc:	e072      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d057      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0x146>
 80036e2:	d900      	bls.n	80036e6 <HAL_TIM_ConfigClockSource+0x9a>
 80036e4:	e06e      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
 80036e6:	2b30      	cmp	r3, #48	; 0x30
 80036e8:	d063      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x166>
 80036ea:	d86b      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d060      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x166>
 80036f0:	d868      	bhi.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d05d      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x166>
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d05b      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x166>
 80036fa:	e063      	b.n	80037c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800370c:	f000 f982 	bl	8003a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2277      	movs	r2, #119	; 0x77
 800371c:	4313      	orrs	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	609a      	str	r2, [r3, #8]
      break;
 8003728:	e052      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800373a:	f000 f96b 	bl	8003a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	01c9      	lsls	r1, r1, #7
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
      break;
 8003750:	e03e      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800375e:	001a      	movs	r2, r3
 8003760:	f000 f8de 	bl	8003920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2150      	movs	r1, #80	; 0x50
 800376a:	0018      	movs	r0, r3
 800376c:	f000 f938 	bl	80039e0 <TIM_ITRx_SetConfig>
      break;
 8003770:	e02e      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800377e:	001a      	movs	r2, r3
 8003780:	f000 f8fc 	bl	800397c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2160      	movs	r1, #96	; 0x60
 800378a:	0018      	movs	r0, r3
 800378c:	f000 f928 	bl	80039e0 <TIM_ITRx_SetConfig>
      break;
 8003790:	e01e      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	001a      	movs	r2, r3
 80037a0:	f000 f8be 	bl	8003920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2140      	movs	r1, #64	; 0x40
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 f918 	bl	80039e0 <TIM_ITRx_SetConfig>
      break;
 80037b0:	e00e      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	0019      	movs	r1, r3
 80037bc:	0010      	movs	r0, r2
 80037be:	f000 f90f 	bl	80039e0 <TIM_ITRx_SetConfig>
      break;
 80037c2:	e005      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80037c4:	230f      	movs	r3, #15
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
      break;
 80037cc:	e000      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80037ce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	223d      	movs	r2, #61	; 0x3d
 80037d4:	2101      	movs	r1, #1
 80037d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	223c      	movs	r2, #60	; 0x3c
 80037dc:	2100      	movs	r1, #0
 80037de:	5499      	strb	r1, [r3, r2]

  return status;
 80037e0:	230f      	movs	r3, #15
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	781b      	ldrb	r3, [r3, #0]
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b004      	add	sp, #16
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	ffff00ff 	.word	0xffff00ff

080037f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}

08003834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a30      	ldr	r2, [pc, #192]	; (8003908 <TIM_Base_SetConfig+0xd4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d008      	beq.n	800385e <TIM_Base_SetConfig+0x2a>
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	05db      	lsls	r3, r3, #23
 8003852:	429a      	cmp	r2, r3
 8003854:	d003      	beq.n	800385e <TIM_Base_SetConfig+0x2a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2c      	ldr	r2, [pc, #176]	; (800390c <TIM_Base_SetConfig+0xd8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d108      	bne.n	8003870 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2270      	movs	r2, #112	; 0x70
 8003862:	4393      	bics	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a25      	ldr	r2, [pc, #148]	; (8003908 <TIM_Base_SetConfig+0xd4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d014      	beq.n	80038a2 <TIM_Base_SetConfig+0x6e>
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	05db      	lsls	r3, r3, #23
 800387e:	429a      	cmp	r2, r3
 8003880:	d00f      	beq.n	80038a2 <TIM_Base_SetConfig+0x6e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a21      	ldr	r2, [pc, #132]	; (800390c <TIM_Base_SetConfig+0xd8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00b      	beq.n	80038a2 <TIM_Base_SetConfig+0x6e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a20      	ldr	r2, [pc, #128]	; (8003910 <TIM_Base_SetConfig+0xdc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d007      	beq.n	80038a2 <TIM_Base_SetConfig+0x6e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <TIM_Base_SetConfig+0xe0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_Base_SetConfig+0x6e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <TIM_Base_SetConfig+0xe4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d108      	bne.n	80038b4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <TIM_Base_SetConfig+0xe8>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	4393      	bics	r3, r2
 80038ba:	001a      	movs	r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <TIM_Base_SetConfig+0xd4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0xbe>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <TIM_Base_SetConfig+0xe0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0xbe>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <TIM_Base_SetConfig+0xe4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d103      	bne.n	80038fa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	615a      	str	r2, [r3, #20]
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b004      	add	sp, #16
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40000400 	.word	0x40000400
 8003910:	40002000 	.word	0x40002000
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800
 800391c:	fffffcff 	.word	0xfffffcff

08003920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	2201      	movs	r2, #1
 8003938:	4393      	bics	r3, r2
 800393a:	001a      	movs	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	22f0      	movs	r2, #240	; 0xf0
 800394a:	4393      	bics	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	220a      	movs	r2, #10
 800395c:	4393      	bics	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b006      	add	sp, #24
 800397a:	bd80      	pop	{r7, pc}

0800397c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	2210      	movs	r2, #16
 800398e:	4393      	bics	r3, r2
 8003990:	001a      	movs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <TIM_TI2_ConfigInputStage+0x60>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	031b      	lsls	r3, r3, #12
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	22a0      	movs	r2, #160	; 0xa0
 80039b8:	4393      	bics	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b006      	add	sp, #24
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	ffff0fff 	.word	0xffff0fff

080039e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2270      	movs	r2, #112	; 0x70
 80039f4:	4393      	bics	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	2207      	movs	r2, #7
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	609a      	str	r2, [r3, #8]
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <TIM_ETR_SetConfig+0x3c>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	021a      	lsls	r2, r3, #8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	609a      	str	r2, [r3, #8]
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b006      	add	sp, #24
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	ffff00ff 	.word	0xffff00ff

08003a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	223c      	movs	r2, #60	; 0x3c
 8003a62:	5c9b      	ldrb	r3, [r3, r2]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e042      	b.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	223c      	movs	r2, #60	; 0x3c
 8003a70:	2101      	movs	r1, #1
 8003a72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	223d      	movs	r2, #61	; 0x3d
 8003a78:	2102      	movs	r1, #2
 8003a7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2270      	movs	r2, #112	; 0x70
 8003a90:	4393      	bics	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a14      	ldr	r2, [pc, #80]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00a      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	05db      	lsls	r3, r3, #23
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d004      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0f      	ldr	r2, [pc, #60]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2280      	movs	r2, #128	; 0x80
 8003aca:	4393      	bics	r3, r2
 8003acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	223d      	movs	r2, #61	; 0x3d
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	223c      	movs	r2, #60	; 0x3c
 8003aec:	2100      	movs	r1, #0
 8003aee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b004      	add	sp, #16
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40000400 	.word	0x40000400

08003b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <memset>:
 8003b24:	0003      	movs	r3, r0
 8003b26:	1882      	adds	r2, r0, r2
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	7019      	strb	r1, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <__libc_init_array>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	2600      	movs	r6, #0
 8003b38:	4c0c      	ldr	r4, [pc, #48]	; (8003b6c <__libc_init_array+0x38>)
 8003b3a:	4d0d      	ldr	r5, [pc, #52]	; (8003b70 <__libc_init_array+0x3c>)
 8003b3c:	1b64      	subs	r4, r4, r5
 8003b3e:	10a4      	asrs	r4, r4, #2
 8003b40:	42a6      	cmp	r6, r4
 8003b42:	d109      	bne.n	8003b58 <__libc_init_array+0x24>
 8003b44:	2600      	movs	r6, #0
 8003b46:	f000 f819 	bl	8003b7c <_init>
 8003b4a:	4c0a      	ldr	r4, [pc, #40]	; (8003b74 <__libc_init_array+0x40>)
 8003b4c:	4d0a      	ldr	r5, [pc, #40]	; (8003b78 <__libc_init_array+0x44>)
 8003b4e:	1b64      	subs	r4, r4, r5
 8003b50:	10a4      	asrs	r4, r4, #2
 8003b52:	42a6      	cmp	r6, r4
 8003b54:	d105      	bne.n	8003b62 <__libc_init_array+0x2e>
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	00b3      	lsls	r3, r6, #2
 8003b5a:	58eb      	ldr	r3, [r5, r3]
 8003b5c:	4798      	blx	r3
 8003b5e:	3601      	adds	r6, #1
 8003b60:	e7ee      	b.n	8003b40 <__libc_init_array+0xc>
 8003b62:	00b3      	lsls	r3, r6, #2
 8003b64:	58eb      	ldr	r3, [r5, r3]
 8003b66:	4798      	blx	r3
 8003b68:	3601      	adds	r6, #1
 8003b6a:	e7f2      	b.n	8003b52 <__libc_init_array+0x1e>
 8003b6c:	08003bc4 	.word	0x08003bc4
 8003b70:	08003bc4 	.word	0x08003bc4
 8003b74:	08003bc8 	.word	0x08003bc8
 8003b78:	08003bc4 	.word	0x08003bc4

08003b7c <_init>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr

08003b88 <_fini>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr
