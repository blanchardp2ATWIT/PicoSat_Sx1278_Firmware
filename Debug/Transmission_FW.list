
Transmission_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d8  080048d8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080048d8  080048d8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048d8  080048d8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080048e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000060  08004940  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004940  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010df2  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000234f  00000000  00000000  00030ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00033210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c07  00000000  00000000  00034150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013178  00000000  00000000  00034d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012698  00000000  00000000  00047ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000736f5  00000000  00000000  0005a567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003788  00000000  00000000  000cdc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d13e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004888 	.word	0x08004888

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08004888 	.word	0x08004888

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <tmp_tx>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tmp_tx(radio *r, SPI_HandleTypeDef *hspi, uint8_t *data, uint8_t data_size)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	001a      	movs	r2, r3
 800022e:	1cfb      	adds	r3, r7, #3
 8000230:	701a      	strb	r2, [r3, #0]
	r->sx_state = TRANSMITTER;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2270      	movs	r2, #112	; 0x70
 8000236:	2103      	movs	r1, #3
 8000238:	5499      	strb	r1, [r3, r2]
	memcpy(r->tx_buffer, data, data_size);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	3374      	adds	r3, #116	; 0x74
 800023e:	0018      	movs	r0, r3
 8000240:	1cfb      	adds	r3, r7, #3
 8000242:	781a      	ldrb	r2, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	0019      	movs	r1, r3
 8000248:	f004 fb14 	bl	8004874 <memcpy>
	r->tx_buffer_size = data_size;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	1cfa      	adds	r2, r7, #3
 8000250:	21b4      	movs	r1, #180	; 0xb4
 8000252:	7812      	ldrb	r2, [r2, #0]
 8000254:	545a      	strb	r2, [r3, r1]
	HAL_UART_Transmit_IT(&huart1, tx_mesg, sizeof(tx_mesg));
 8000256:	4905      	ldr	r1, [pc, #20]	; (800026c <tmp_tx+0x4c>)
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <tmp_tx+0x50>)
 800025a:	2210      	movs	r2, #16
 800025c:	0018      	movs	r0, r3
 800025e:	f003 fe63 	bl	8003f28 <HAL_UART_Transmit_IT>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	b004      	add	sp, #16
 8000268:	bd80      	pop	{r7, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	20000044 	.word	0x20000044
 8000270:	20000148 	.word	0x20000148

08000274 <tmp_rx>:

void tmp_rx(radio *r, SPI_HandleTypeDef *hspi)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	r->sx_state = RECEIVER;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2270      	movs	r2, #112	; 0x70
 8000282:	2105      	movs	r1, #5
 8000284:	5499      	strb	r1, [r3, r2]
}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	46bd      	mov	sp, r7
 800028a:	b002      	add	sp, #8
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	tmp_tx(&r, &hspi1, data, sizeof(data));
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800029a:	4905      	ldr	r1, [pc, #20]	; (80002b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800029c:	4805      	ldr	r0, [pc, #20]	; (80002b4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800029e:	2341      	movs	r3, #65	; 0x41
 80002a0:	f7ff ffbe 	bl	8000220 <tmp_tx>
}
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b002      	add	sp, #8
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000000 	.word	0x20000000
 80002b0:	2000009c 	.word	0x2000009c
 80002b4:	200001d0 	.word	0x200001d0

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002bc:	f000 ff28 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c0:	f000 f828 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c4:	f000 f9ae 	bl	8000624 <MX_GPIO_Init>
  MX_RTC_Init();
 80002c8:	f000 f884 	bl	80003d4 <MX_RTC_Init>
  MX_SPI1_Init();
 80002cc:	f000 f8e4 	bl	8000498 <MX_SPI1_Init>
  MX_TIM1_Init();
 80002d0:	f000 f920 	bl	8000514 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80002d4:	f000 f976 	bl	80005c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim1);
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <main+0x50>)
 80002da:	0018      	movs	r0, r3
 80002dc:	f003 f9fe 	bl	80036dc <HAL_TIM_Base_Init>
//  HAL_TIM_Base_Start_IT(&htim1);
  sx1278_init(&r, &hspi1);
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <main+0x54>)
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <main+0x58>)
 80002e4:	0011      	movs	r1, r2
 80002e6:	0018      	movs	r0, r3
 80002e8:	f000 fcc3 	bl	8000c72 <sx1278_init>
  tmp_rx(&r, &hspi1);
 80002ec:	4a07      	ldr	r2, [pc, #28]	; (800030c <main+0x54>)
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <main+0x58>)
 80002f0:	0011      	movs	r1, r2
 80002f2:	0018      	movs	r0, r3
 80002f4:	f7ff ffbe 	bl	8000274 <tmp_rx>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SX1278_APP(&r, &hspi1);
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <main+0x54>)
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <main+0x58>)
 80002fc:	0011      	movs	r1, r2
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fddc 	bl	8000ebc <SX1278_APP>
 8000304:	e7f8      	b.n	80002f8 <main+0x40>
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	20000100 	.word	0x20000100
 800030c:	2000009c 	.word	0x2000009c
 8000310:	200001d0 	.word	0x200001d0

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b095      	sub	sp, #84	; 0x54
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	2420      	movs	r4, #32
 800031c:	193b      	adds	r3, r7, r4
 800031e:	0018      	movs	r0, r3
 8000320:	2330      	movs	r3, #48	; 0x30
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f004 fa79 	bl	800481c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032a:	2310      	movs	r3, #16
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2310      	movs	r3, #16
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f004 fa71 	bl	800481c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033a:	003b      	movs	r3, r7
 800033c:	0018      	movs	r0, r3
 800033e:	2310      	movs	r3, #16
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f004 fa6a 	bl	800481c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000348:	0021      	movs	r1, r4
 800034a:	187b      	adds	r3, r7, r1
 800034c:	220a      	movs	r2, #10
 800034e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2201      	movs	r2, #1
 8000354:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2210      	movs	r2, #16
 800035a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2201      	movs	r2, #1
 8000360:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	187b      	adds	r3, r7, r1
 800036a:	0018      	movs	r0, r3
 800036c:	f001 f9de 	bl	800172c <HAL_RCC_OscConfig>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000374:	f000 f9b8 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000378:	2110      	movs	r1, #16
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2207      	movs	r2, #7
 800037e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2100      	movs	r1, #0
 8000396:	0018      	movs	r0, r3
 8000398:	f001 fce2 	bl	8001d60 <HAL_RCC_ClockConfig>
 800039c:	1e03      	subs	r3, r0, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003a0:	f000 f9a2 	bl	80006e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 80003a4:	003b      	movs	r3, r7
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <SystemClock_Config+0xbc>)
 80003a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003aa:	003b      	movs	r3, r7
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003b0:	003b      	movs	r3, r7
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	0092      	lsls	r2, r2, #2
 80003b6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b8:	003b      	movs	r3, r7
 80003ba:	0018      	movs	r0, r3
 80003bc:	f001 fe14 	bl	8001fe8 <HAL_RCCEx_PeriphCLKConfig>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003c4:	f000 f990 	bl	80006e8 <Error_Handler>
  }
}
 80003c8:	46c0      	nop			; (mov r8, r8)
 80003ca:	46bd      	mov	sp, r7
 80003cc:	b015      	add	sp, #84	; 0x54
 80003ce:	bd90      	pop	{r4, r7, pc}
 80003d0:	00010001 	.word	0x00010001

080003d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	0018      	movs	r0, r3
 80003de:	2314      	movs	r3, #20
 80003e0:	001a      	movs	r2, r3
 80003e2:	2100      	movs	r1, #0
 80003e4:	f004 fa1a 	bl	800481c <memset>
  RTC_DateTypeDef sDate = {0};
 80003e8:	003b      	movs	r3, r7
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003ee:	4b28      	ldr	r3, [pc, #160]	; (8000490 <MX_RTC_Init+0xbc>)
 80003f0:	4a28      	ldr	r2, [pc, #160]	; (8000494 <MX_RTC_Init+0xc0>)
 80003f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003f4:	4b26      	ldr	r3, [pc, #152]	; (8000490 <MX_RTC_Init+0xbc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003fa:	4b25      	ldr	r3, [pc, #148]	; (8000490 <MX_RTC_Init+0xbc>)
 80003fc:	227f      	movs	r2, #127	; 0x7f
 80003fe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000400:	4b23      	ldr	r3, [pc, #140]	; (8000490 <MX_RTC_Init+0xbc>)
 8000402:	22ff      	movs	r2, #255	; 0xff
 8000404:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000406:	4b22      	ldr	r3, [pc, #136]	; (8000490 <MX_RTC_Init+0xbc>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800040c:	4b20      	ldr	r3, [pc, #128]	; (8000490 <MX_RTC_Init+0xbc>)
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <MX_RTC_Init+0xbc>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_RTC_Init+0xbc>)
 800041a:	0018      	movs	r0, r3
 800041c:	f001 feb2 	bl	8002184 <HAL_RTC_Init>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000424:	f000 f960 	bl	80006e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000446:	1d39      	adds	r1, r7, #4
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_RTC_Init+0xbc>)
 800044a:	2201      	movs	r2, #1
 800044c:	0018      	movs	r0, r3
 800044e:	f001 ff31 	bl	80022b4 <HAL_RTC_SetTime>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000456:	f000 f947 	bl	80006e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800045a:	003b      	movs	r3, r7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000460:	003b      	movs	r3, r7
 8000462:	2201      	movs	r2, #1
 8000464:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000466:	003b      	movs	r3, r7
 8000468:	2201      	movs	r2, #1
 800046a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800046c:	003b      	movs	r3, r7
 800046e:	2200      	movs	r2, #0
 8000470:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000472:	0039      	movs	r1, r7
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_RTC_Init+0xbc>)
 8000476:	2201      	movs	r2, #1
 8000478:	0018      	movs	r0, r3
 800047a:	f001 ffc1 	bl	8002400 <HAL_RTC_SetDate>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8000482:	f000 f931 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b006      	add	sp, #24
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	2000007c 	.word	0x2000007c
 8000494:	40002800 	.word	0x40002800

08000498 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_SPI1_Init+0x74>)
 800049e:	4a1c      	ldr	r2, [pc, #112]	; (8000510 <MX_SPI1_Init+0x78>)
 80004a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004a2:	4b1a      	ldr	r3, [pc, #104]	; (800050c <MX_SPI1_Init+0x74>)
 80004a4:	2282      	movs	r2, #130	; 0x82
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004aa:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_SPI1_Init+0x74>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <MX_SPI1_Init+0x74>)
 80004b2:	22e0      	movs	r2, #224	; 0xe0
 80004b4:	00d2      	lsls	r2, r2, #3
 80004b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_SPI1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_SPI1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_SPI1_Init+0x74>)
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	0092      	lsls	r2, r2, #2
 80004ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_SPI1_Init+0x74>)
 80004ce:	2208      	movs	r2, #8
 80004d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_SPI1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_SPI1_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_SPI1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_SPI1_Init+0x74>)
 80004e6:	2207      	movs	r2, #7
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_SPI1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_SPI1_Init+0x74>)
 80004f2:	2208      	movs	r2, #8
 80004f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_SPI1_Init+0x74>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 f8c7 	bl	800268c <HAL_SPI_Init>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000502:	f000 f8f1 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000009c 	.word	0x2000009c
 8000510:	40013000 	.word	0x40013000

08000514 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	2308      	movs	r3, #8
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	0018      	movs	r0, r3
 8000520:	2310      	movs	r3, #16
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f004 f979 	bl	800481c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052a:	003b      	movs	r3, r7
 800052c:	0018      	movs	r0, r3
 800052e:	2308      	movs	r3, #8
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f004 f972 	bl	800481c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_TIM1_Init+0xa4>)
 800053a:	4a20      	ldr	r2, [pc, #128]	; (80005bc <MX_TIM1_Init+0xa8>)
 800053c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <MX_TIM1_Init+0xa4>)
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_TIM1_Init+0xa4>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_TIM1_Init+0xa4>)
 800054c:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <MX_TIM1_Init+0xac>)
 800054e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_TIM1_Init+0xa4>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_TIM1_Init+0xa4>)
 8000558:	2200      	movs	r2, #0
 800055a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_TIM1_Init+0xa4>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_TIM1_Init+0xa4>)
 8000564:	0018      	movs	r0, r3
 8000566:	f003 f8b9 	bl	80036dc <HAL_TIM_Base_Init>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800056e:	f000 f8bb 	bl	80006e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000572:	2108      	movs	r1, #8
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	0152      	lsls	r2, r2, #5
 800057a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800057c:	187a      	adds	r2, r7, r1
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_TIM1_Init+0xa4>)
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f003 fa10 	bl	80039a8 <HAL_TIM_ConfigClockSource>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800058c:	f000 f8ac 	bl	80006e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000590:	003b      	movs	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000596:	003b      	movs	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800059c:	003a      	movs	r2, r7
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_TIM1_Init+0xa4>)
 80005a0:	0011      	movs	r1, r2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f003 fc04 	bl	8003db0 <HAL_TIMEx_MasterConfigSynchronization>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005ac:	f000 f89c 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b006      	add	sp, #24
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000100 	.word	0x20000100
 80005bc:	40012c00 	.word	0x40012c00
 80005c0:	0000ffff 	.word	0x0000ffff

080005c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005ca:	4a15      	ldr	r2, [pc, #84]	; (8000620 <MX_USART1_UART_Init+0x5c>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005d0:	2296      	movs	r2, #150	; 0x96
 80005d2:	0192      	lsls	r2, r2, #6
 80005d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_USART1_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_USART1_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <MX_USART1_UART_Init+0x58>)
 8000608:	0018      	movs	r0, r3
 800060a:	f003 fc39 	bl	8003e80 <HAL_UART_Init>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000612:	f000 f869 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000148 	.word	0x20000148
 8000620:	40013800 	.word	0x40013800

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b089      	sub	sp, #36	; 0x24
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	240c      	movs	r4, #12
 800062c:	193b      	adds	r3, r7, r4
 800062e:	0018      	movs	r0, r3
 8000630:	2314      	movs	r3, #20
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f004 f8f1 	bl	800481c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <MX_GPIO_Init+0xbc>)
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_GPIO_Init+0xbc>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0289      	lsls	r1, r1, #10
 8000644:	430a      	orrs	r2, r1
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <MX_GPIO_Init+0xbc>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	029b      	lsls	r3, r3, #10
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <MX_GPIO_Init+0xbc>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0xbc>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	02c9      	lsls	r1, r1, #11
 8000660:	430a      	orrs	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_GPIO_Init+0xbc>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	02db      	lsls	r3, r3, #11
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000672:	2390      	movs	r3, #144	; 0x90
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	0018      	movs	r0, r3
 800067c:	f001 f838 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_GPIO_Init+0xc0>)
 8000682:	2200      	movs	r2, #0
 8000684:	2108      	movs	r1, #8
 8000686:	0018      	movs	r0, r3
 8000688:	f001 f832 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2210      	movs	r2, #16
 8000690:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	193a      	adds	r2, r7, r4
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 feb7 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b2:	0021      	movs	r1, r4
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2208      	movs	r2, #8
 80006b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2201      	movs	r2, #1
 80006be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <MX_GPIO_Init+0xc0>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f000 fea4 	bl	8001420 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b009      	add	sp, #36	; 0x24
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x44>)
 80006fc:	699a      	ldr	r2, [r3, #24]
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x44>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	619a      	str	r2, [r3, #24]
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x44>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x44>)
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_MspInit+0x44>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0549      	lsls	r1, r1, #21
 800071c:	430a      	orrs	r2, r1
 800071e:	61da      	str	r2, [r3, #28]
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_MspInit+0x44>)
 8000722:	69da      	ldr	r2, [r3, #28]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	055b      	lsls	r3, r3, #21
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_RTC_MspInit+0x28>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d106      	bne.n	800075c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_RTC_MspInit+0x2c>)
 8000750:	6a1a      	ldr	r2, [r3, #32]
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_RTC_MspInit+0x2c>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0209      	lsls	r1, r1, #8
 8000758:	430a      	orrs	r2, r1
 800075a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b002      	add	sp, #8
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40002800 	.word	0x40002800
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b08b      	sub	sp, #44	; 0x2c
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	2414      	movs	r4, #20
 8000776:	193b      	adds	r3, r7, r4
 8000778:	0018      	movs	r0, r3
 800077a:	2314      	movs	r3, #20
 800077c:	001a      	movs	r2, r3
 800077e:	2100      	movs	r1, #0
 8000780:	f004 f84c 	bl	800481c <memset>
  if(hspi->Instance==SPI1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <HAL_SPI_MspInit+0xa0>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d13a      	bne.n	8000804 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <HAL_SPI_MspInit+0xa4>)
 8000790:	699a      	ldr	r2, [r3, #24]
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_SPI_MspInit+0xa4>)
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0149      	lsls	r1, r1, #5
 8000798:	430a      	orrs	r2, r1
 800079a:	619a      	str	r2, [r3, #24]
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_SPI_MspInit+0xa4>)
 800079e:	699a      	ldr	r2, [r3, #24]
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	015b      	lsls	r3, r3, #5
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <HAL_SPI_MspInit+0xa4>)
 80007ac:	695a      	ldr	r2, [r3, #20]
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_SPI_MspInit+0xa4>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0289      	lsls	r1, r1, #10
 80007b4:	430a      	orrs	r2, r1
 80007b6:	615a      	str	r2, [r3, #20]
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_SPI_MspInit+0xa4>)
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	029b      	lsls	r3, r3, #10
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	22e0      	movs	r2, #224	; 0xe0
 80007cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2202      	movs	r2, #2
 80007d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2203      	movs	r2, #3
 80007de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	187a      	adds	r2, r7, r1
 80007e8:	2390      	movs	r3, #144	; 0x90
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fe16 	bl	8001420 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2019      	movs	r0, #25
 80007fa:	f000 fd99 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007fe:	2019      	movs	r0, #25
 8000800:	f000 fdab 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b00b      	add	sp, #44	; 0x2c
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	40013000 	.word	0x40013000
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <HAL_TIM_Base_MspInit+0x58>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d11d      	bne.n	8000862 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_TIM_Base_MspInit+0x5c>)
 8000828:	699a      	ldr	r2, [r3, #24]
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_TIM_Base_MspInit+0x5c>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0109      	lsls	r1, r1, #4
 8000830:	430a      	orrs	r2, r1
 8000832:	619a      	str	r2, [r3, #24]
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_TIM_Base_MspInit+0x5c>)
 8000836:	699a      	ldr	r2, [r3, #24]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	200d      	movs	r0, #13
 8000848:	f000 fd72 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800084c:	200d      	movs	r0, #13
 800084e:	f000 fd84 	bl	800135a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	200e      	movs	r0, #14
 8000858:	f000 fd6a 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800085c:	200e      	movs	r0, #14
 800085e:	f000 fd7c 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b004      	add	sp, #16
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40012c00 	.word	0x40012c00
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b08b      	sub	sp, #44	; 0x2c
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	2414      	movs	r4, #20
 800087e:	193b      	adds	r3, r7, r4
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f003 ffc8 	bl	800481c <memset>
  if(huart->Instance==USART1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <HAL_UART_MspInit+0x94>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d133      	bne.n	80008fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <HAL_UART_MspInit+0x98>)
 8000898:	699a      	ldr	r2, [r3, #24]
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_UART_MspInit+0x98>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	01c9      	lsls	r1, r1, #7
 80008a0:	430a      	orrs	r2, r1
 80008a2:	619a      	str	r2, [r3, #24]
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_UART_MspInit+0x98>)
 80008a6:	699a      	ldr	r2, [r3, #24]
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	01db      	lsls	r3, r3, #7
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_UART_MspInit+0x98>)
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x98>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0289      	lsls	r1, r1, #10
 80008bc:	430a      	orrs	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_UART_MspInit+0x98>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	029b      	lsls	r3, r3, #10
 80008c8:	4013      	ands	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	22c0      	movs	r2, #192	; 0xc0
 80008d2:	00d2      	lsls	r2, r2, #3
 80008d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2202      	movs	r2, #2
 80008dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2203      	movs	r2, #3
 80008e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2201      	movs	r2, #1
 80008ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	187a      	adds	r2, r7, r1
 80008f2:	2390      	movs	r3, #144	; 0x90
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f000 fd91 	bl	8001420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b00b      	add	sp, #44	; 0x2c
 8000904:	bd90      	pop	{r4, r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	40013800 	.word	0x40013800
 800090c:	40021000 	.word	0x40021000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 fc34 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000946:	0018      	movs	r0, r3
 8000948:	f002 ff18 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	20000100 	.word	0x20000100

08000958 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <TIM1_CC_IRQHandler+0x14>)
 800095e:	0018      	movs	r0, r3
 8000960:	f002 ff0c 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	20000100 	.word	0x20000100

08000970 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <SPI1_IRQHandler+0x14>)
 8000976:	0018      	movs	r0, r3
 8000978:	f002 fbd4 	bl	8003124 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	2000009c 	.word	0x2000009c

08000988 <get_irq1_register>:
#define PREAMBLE_SIZE_MSB 	0x00
#define PREAMBLE_SIZE_LSB	0x02

//Gets the IRQ1 Register Status
uint8_t get_irq1_register(SPI_HandleTypeDef *hspi)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	return spi_single_read(hspi, REG_IRQFLAGS1);;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	213e      	movs	r1, #62	; 0x3e
 8000994:	0018      	movs	r0, r3
 8000996:	f000 f845 	bl	8000a24 <spi_single_read>
 800099a:	0003      	movs	r3, r0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <get_irq2_register>:
//Gets the IRQ2 Register Status
uint8_t get_irq2_register(SPI_HandleTypeDef *hspi)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	return spi_single_read(hspi, REG_IRQFLAGS2);;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	213f      	movs	r1, #63	; 0x3f
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 f837 	bl	8000a24 <spi_single_read>
 80009b6:	0003      	movs	r3, r0
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}

080009c0 <spi_single_write>:
//This Writes to a single register
void spi_single_write(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t data)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	0008      	movs	r0, r1
 80009ca:	0011      	movs	r1, r2
 80009cc:	1cfb      	adds	r3, r7, #3
 80009ce:	1c02      	adds	r2, r0, #0
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	1cbb      	adds	r3, r7, #2
 80009d4:	1c0a      	adds	r2, r1, #0
 80009d6:	701a      	strb	r2, [r3, #0]
	address |= WRITE_MASK;
 80009d8:	1cfb      	adds	r3, r7, #3
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	4252      	negs	r2, r2
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	1cfb      	adds	r3, r7, #3
 80009e6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 80009e8:	2390      	movs	r3, #144	; 0x90
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	2200      	movs	r2, #0
 80009ee:	2110      	movs	r1, #16
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fe7d 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 80009f6:	1cf9      	adds	r1, r7, #3
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	2201      	movs	r2, #1
 80009fe:	f001 fefd 	bl	80027fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &data, sizeof(data), 100);
 8000a02:	1cb9      	adds	r1, r7, #2
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	2364      	movs	r3, #100	; 0x64
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f001 fef7 	bl	80027fc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 8000a0e:	2390      	movs	r3, #144	; 0x90
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	2201      	movs	r2, #1
 8000a14:	2110      	movs	r1, #16
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fe6a 	bl	80016f0 <HAL_GPIO_WritePin>
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <spi_single_read>:
//This reads a single register
uint8_t spi_single_read(SPI_HandleTypeDef *hspi, uint8_t address)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	000a      	movs	r2, r1
 8000a2e:	1cfb      	adds	r3, r7, #3
 8000a30:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;
	address &= READ_MASK;
 8000a32:	1cfb      	adds	r3, r7, #3
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	227f      	movs	r2, #127	; 0x7f
 8000a38:	4013      	ands	r3, r2
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	1cfb      	adds	r3, r7, #3
 8000a3e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 8000a40:	2390      	movs	r3, #144	; 0x90
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	2200      	movs	r2, #0
 8000a46:	2110      	movs	r1, #16
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 fe51 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 8000a4e:	1cf9      	adds	r1, r7, #3
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	2364      	movs	r3, #100	; 0x64
 8000a54:	2201      	movs	r2, #1
 8000a56:	f001 fed1 	bl	80027fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, sizeof(rx_data), 100);
 8000a5a:	240f      	movs	r4, #15
 8000a5c:	1939      	adds	r1, r7, r4
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	2364      	movs	r3, #100	; 0x64
 8000a62:	2201      	movs	r2, #1
 8000a64:	f002 f82a 	bl	8002abc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 8000a68:	2390      	movs	r3, #144	; 0x90
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2110      	movs	r1, #16
 8000a70:	0018      	movs	r0, r3
 8000a72:	f000 fe3d 	bl	80016f0 <HAL_GPIO_WritePin>
	return rx_data;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	781b      	ldrb	r3, [r3, #0]
}
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b005      	add	sp, #20
 8000a80:	bd90      	pop	{r4, r7, pc}

08000a82 <sx1278_struct_init>:
//Only Change Below if the Value is different
//From the default setting in Datasheet
void sx1278_struct_init(SX1278 *radio)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	//Common Settings
	radio->RegOpMode |= RF_OPMODE_STANDBY | RF_OPMODE_FREQMODE_ACCESS_LF;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	2209      	movs	r2, #9
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	705a      	strb	r2, [r3, #1]
	radio->RegBitrateMsb |= RF_BITRATEMSB_250000_BPS;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	789a      	ldrb	r2, [r3, #2]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	709a      	strb	r2, [r3, #2]
	radio->RegBitrateLsb |= RF_BITRATELSB_250000_BPS;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	78db      	ldrb	r3, [r3, #3]
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	4252      	negs	r2, r2
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	70da      	strb	r2, [r3, #3]

	//You Have to Calculate with Eqs on Datasheet
	radio->RegFrfMsb = 0x6c;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	226c      	movs	r2, #108	; 0x6c
 8000ab4:	719a      	strb	r2, [r3, #6]
	radio->RegFrfMid = 0x80;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	71da      	strb	r2, [r3, #7]
	radio->RegFrfLsb = 0x00;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	721a      	strb	r2, [r3, #8]

	//TX Settings:
	radio->RegPaConfig = 0b01110011;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2273      	movs	r2, #115	; 0x73
 8000ac6:	725a      	strb	r2, [r3, #9]
	radio->RegPaRamp = 0b00000101;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2205      	movs	r2, #5
 8000acc:	729a      	strb	r2, [r3, #10]
	radio->RegOcp = 0b0001011;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	220b      	movs	r2, #11
 8000ad2:	72da      	strb	r2, [r3, #11]

	//RX Settings:
	radio->RegLna = 0b11100000;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	22e0      	movs	r2, #224	; 0xe0
 8000ad8:	731a      	strb	r2, [r3, #12]
	radio->RegRxConfig = 0b10000100;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2284      	movs	r2, #132	; 0x84
 8000ade:	735a      	strb	r2, [r3, #13]
	radio->RegRssiConfig = 0b00000000;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	739a      	strb	r2, [r3, #14]

	//There is an Rssi Threshold Reg
	//Have to change pre-amble detect when changing preamble
	radio->RegPreambleDetect = 0b10101010;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	22aa      	movs	r2, #170	; 0xaa
 8000aea:	77da      	strb	r2, [r3, #31]
	radio->RegPreambleMsb = PREAMBLE_SIZE_MSB;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2225      	movs	r2, #37	; 0x25
 8000af0:	2100      	movs	r1, #0
 8000af2:	5499      	strb	r1, [r3, r2]
	radio->RegPreambleLsb = PREAMBLE_SIZE_LSB;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2226      	movs	r2, #38	; 0x26
 8000af8:	2102      	movs	r1, #2
 8000afa:	5499      	strb	r1, [r3, r2]
	//Turning Sync Word Off //PREAMBLE POLARITY
	radio->RegSyncConfig = 0b01010001;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2227      	movs	r2, #39	; 0x27
 8000b00:	2151      	movs	r1, #81	; 0x51
 8000b02:	5499      	strb	r1, [r3, r2]
	radio->RegSyncValue1 = 0xAF;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2228      	movs	r2, #40	; 0x28
 8000b08:	21af      	movs	r1, #175	; 0xaf
 8000b0a:	5499      	strb	r1, [r3, r2]
	radio->RegSyncValue2 = 0xFA;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2229      	movs	r2, #41	; 0x29
 8000b10:	21fa      	movs	r1, #250	; 0xfa
 8000b12:	5499      	strb	r1, [r3, r2]

	//TCXO Settings:
	radio->RegTcxo = RF_TCXO_TCXOINPUT_ON;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2258      	movs	r2, #88	; 0x58
 8000b18:	2110      	movs	r1, #16
 8000b1a:	5499      	strb	r1, [r3, r2]

	//Packet Settings
	//Fixed Packet Length of 32 Bytes.
	//CRC ON
	radio->RegPacketConfig1 = 0b00011000;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2230      	movs	r2, #48	; 0x30
 8000b20:	2118      	movs	r1, #24
 8000b22:	5499      	strb	r1, [r3, r2]
	radio->RegPacketConfig2 = 0b01000000;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2231      	movs	r2, #49	; 0x31
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	5499      	strb	r1, [r3, r2]
	radio->RegPayloadLength = 0b01000000;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2232      	movs	r2, #50	; 0x32
 8000b30:	2140      	movs	r1, #64	; 0x40
 8000b32:	5499      	strb	r1, [r3, r2]
	radio->RegFifoThresh = RF_FIFOTHRESH_TXSTARTCONDITION_FIFOTHRESH | (DATA_SIZE-1);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2235      	movs	r2, #53	; 0x35
 8000b38:	213f      	movs	r1, #63	; 0x3f
 8000b3a:	5499      	strb	r1, [r3, r2]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <sx1278_read_all_registers>:
//This gets the status of all registers.
//Mainly for init purposes
uint8_t sx1278_read_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3301      	adds	r3, #1
 8000b52:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000b54:	2317      	movs	r3, #23
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e013      	b.n	8000b86 <sx1278_read_all_registers+0x42>
	{
		*(struct_ptr + ((reg-1))) = spi_single_read(hspi, reg);
 8000b5e:	2517      	movs	r5, #23
 8000b60:	197b      	adds	r3, r7, r5
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	18d4      	adds	r4, r2, r3
 8000b6a:	197b      	adds	r3, r7, r5
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	0011      	movs	r1, r2
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff ff56 	bl	8000a24 <spi_single_read>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	7023      	strb	r3, [r4, #0]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000b7c:	197b      	adds	r3, r7, r5
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	197b      	adds	r3, r7, r5
 8000b82:	3201      	adds	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	2317      	movs	r3, #23
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b70      	cmp	r3, #112	; 0x70
 8000b8e:	d9e6      	bls.n	8000b5e <sx1278_read_all_registers+0x1a>
	}
	uint8_t temp = spi_single_read(hspi, REG_VERSION);
 8000b90:	250f      	movs	r5, #15
 8000b92:	197c      	adds	r4, r7, r5
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2142      	movs	r1, #66	; 0x42
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ff43 	bl	8000a24 <spi_single_read>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	7023      	strb	r3, [r4, #0]
	if(temp == CHIP_VERSION)
 8000ba2:	197b      	adds	r3, r7, r5
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b12      	cmp	r3, #18
 8000ba8:	d101      	bne.n	8000bae <sx1278_read_all_registers+0x6a>
	{
		return 1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e000      	b.n	8000bb0 <sx1278_read_all_registers+0x6c>
	}
	return 0;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b006      	add	sp, #24
 8000bb6:	bdb0      	pop	{r4, r5, r7, pc}

08000bb8 <sx1278_write_all_registers>:
//This function takes the input sx1278 struct and programs the chip with the configurations
//Used for initialization purposes.
uint8_t sx1278_write_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000bc8:	2317      	movs	r3, #23
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	e013      	b.n	8000bfa <sx1278_write_all_registers+0x42>
		{
			spi_single_write(hspi, reg, *(struct_ptr + ((reg-1))));
 8000bd2:	2117      	movs	r1, #23
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	000c      	movs	r4, r1
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	7819      	ldrb	r1, [r3, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fee9 	bl	80009c0 <spi_single_write>
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000bee:	0021      	movs	r1, r4
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	3201      	adds	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	2317      	movs	r3, #23
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b70      	cmp	r3, #112	; 0x70
 8000c02:	d9e6      	bls.n	8000bd2 <sx1278_write_all_registers+0x1a>
		}
	uint8_t temp = spi_single_read(hspi, REG_OPMODE);
 8000c04:	250f      	movs	r5, #15
 8000c06:	197c      	adds	r4, r7, r5
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ff09 	bl	8000a24 <spi_single_read>
 8000c12:	0003      	movs	r3, r0
 8000c14:	7023      	strb	r3, [r4, #0]
	if(radio->RegOpMode == temp)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	785b      	ldrb	r3, [r3, #1]
 8000c1a:	197a      	adds	r2, r7, r5
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d101      	bne.n	8000c26 <sx1278_write_all_registers+0x6e>
	{
		return 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <sx1278_write_all_registers+0x70>
	}
	return 0;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b006      	add	sp, #24
 8000c2e:	bdb0      	pop	{r4, r5, r7, pc}

08000c30 <sx1278_mem_init>:
//Initialize the Radio Object
void sx1278_mem_init(SPI_HandleTypeDef *hspi, radio *radio)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
	// Set for the SX App
	radio->tx_state_flags.tx_init = 0;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2271      	movs	r2, #113	; 0x71
 8000c3e:	2100      	movs	r1, #0
 8000c40:	5499      	strb	r1, [r3, r2]
	radio->tx_state_flags.tx_inp= 0;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2272      	movs	r2, #114	; 0x72
 8000c46:	2100      	movs	r1, #0
 8000c48:	5499      	strb	r1, [r3, r2]
	radio->tx_buffer_prog = 0;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	22b5      	movs	r2, #181	; 0xb5
 8000c4e:	2100      	movs	r1, #0
 8000c50:	5499      	strb	r1, [r3, r2]
	radio->rx_flags.rx_init = 0;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	22b6      	movs	r2, #182	; 0xb6
 8000c56:	2100      	movs	r1, #0
 8000c58:	5499      	strb	r1, [r3, r2]
	radio->rx_flags.rx_running = 0;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	22b7      	movs	r2, #183	; 0xb7
 8000c5e:	2100      	movs	r1, #0
 8000c60:	5499      	strb	r1, [r3, r2]
	radio->rx_flags.rx_stay = 1;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	22b8      	movs	r2, #184	; 0xb8
 8000c66:	2101      	movs	r1, #1
 8000c68:	5499      	strb	r1, [r3, r2]
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <sx1278_init>:
//General Init Function for the Module.
uint8_t sx1278_init(radio *radio, SPI_HandleTypeDef *hspi)
{
 8000c72:	b5b0      	push	{r4, r5, r7, lr}
 8000c74:	b084      	sub	sp, #16
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
	uint8_t timeout_counter = 0;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000c84:	230e      	movs	r3, #14
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000c8c:	e015      	b.n	8000cba <sx1278_init+0x48>
	{
		stat = sx1278_read_all_registers(&(radio->radio), hspi);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	220e      	movs	r2, #14
 8000c92:	18bc      	adds	r4, r7, r2
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f7ff ff53 	bl	8000b44 <sx1278_read_all_registers>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	3201      	adds	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b64      	cmp	r3, #100	; 0x64
 8000cb4:	d101      	bne.n	8000cba <sx1278_init+0x48>
		{
			return 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e041      	b.n	8000d3e <sx1278_init+0xcc>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000cba:	230e      	movs	r3, #14
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d104      	bne.n	8000cce <sx1278_init+0x5c>
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b64      	cmp	r3, #100	; 0x64
 8000ccc:	d9df      	bls.n	8000c8e <sx1278_init+0x1c>
		}
	}
	timeout_counter = 0;
 8000cce:	230f      	movs	r3, #15
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
	stat = 0;
 8000cd6:	230e      	movs	r3, #14
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
	sx1278_struct_init(&(radio->radio));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff fece 	bl	8000a82 <sx1278_struct_init>
	radio->sx_state = STANDBY;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2270      	movs	r2, #112	; 0x70
 8000cea:	2101      	movs	r1, #1
 8000cec:	5499      	strb	r1, [r3, r2]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000cee:	e015      	b.n	8000d1c <sx1278_init+0xaa>
	{
		timeout_counter++;
 8000cf0:	250f      	movs	r5, #15
 8000cf2:	197b      	adds	r3, r7, r5
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	197b      	adds	r3, r7, r5
 8000cf8:	3201      	adds	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
		stat = sx1278_write_all_registers(&(radio->radio), hspi);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	220e      	movs	r2, #14
 8000d00:	18bc      	adds	r4, r7, r2
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	0011      	movs	r1, r2
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff ff56 	bl	8000bb8 <sx1278_write_all_registers>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	7023      	strb	r3, [r4, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000d10:	197b      	adds	r3, r7, r5
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b64      	cmp	r3, #100	; 0x64
 8000d16:	d101      	bne.n	8000d1c <sx1278_init+0xaa>
		{
			return 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e010      	b.n	8000d3e <sx1278_init+0xcc>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000d1c:	230e      	movs	r3, #14
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d104      	bne.n	8000d30 <sx1278_init+0xbe>
 8000d26:	230f      	movs	r3, #15
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b64      	cmp	r3, #100	; 0x64
 8000d2e:	d9df      	bls.n	8000cf0 <sx1278_init+0x7e>
		}
	}
	sx1278_mem_init(hspi, radio);
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff ff7a 	bl	8000c30 <sx1278_mem_init>
	return 1;
 8000d3c:	2301      	movs	r3, #1
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b004      	add	sp, #16
 8000d44:	bdb0      	pop	{r4, r5, r7, pc}

08000d46 <sx1278_fifo_fill>:
//Usually used to fill the fifo for tx
uint8_t sx1278_fifo_fill(SPI_HandleTypeDef *hspi, uint8_t* data)
{
 8000d46:	b590      	push	{r4, r7, lr}
 8000d48:	b085      	sub	sp, #20
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
	uint8_t address_packet = WRITE_MASK | REG_FIFO;
 8000d50:	230e      	movs	r3, #14
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	701a      	strb	r2, [r3, #0]
 	for(uint8_t i = 0; i < DATA_SIZE; i++)
 8000d58:	230f      	movs	r3, #15
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e011      	b.n	8000d86 <sx1278_fifo_fill+0x40>
	{
 		spi_single_write(hspi, address_packet, data[i]);
 8000d62:	240f      	movs	r4, #15
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	18d3      	adds	r3, r2, r3
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	230e      	movs	r3, #14
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	7819      	ldrb	r1, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fe22 	bl	80009c0 <spi_single_write>
 	for(uint8_t i = 0; i < DATA_SIZE; i++)
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	3201      	adds	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	230f      	movs	r3, #15
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d8e:	d9e8      	bls.n	8000d62 <sx1278_fifo_fill+0x1c>
	}
 	if((get_irq2_register(hspi) & 0x00100000 )== 0x00100000)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	0018      	movs	r0, r3
 8000d94:	f7ff fe06 	bl	80009a4 <get_irq2_register>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	035b      	lsls	r3, r3, #13
 8000da0:	401a      	ands	r2, r3
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	035b      	lsls	r3, r3, #13
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d101      	bne.n	8000dae <sx1278_fifo_fill+0x68>
	{
 		//If Fifo is filled tell the higher level and adjust the tx_buffer.
 		return 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <sx1278_fifo_fill+0x6a>
	}
	return 0;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b005      	add	sp, #20
 8000db6:	bd90      	pop	{r4, r7, pc}

08000db8 <sx1278_fifo_dump>:
//Used to dump the contents of the FiFo into the RX_BUFFER
void sx1278_fifo_dump(SPI_HandleTypeDef *hspi, radio *radio)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
	if(get_irq2_register(hspi) & FIFO_EMPTY)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff fded 	bl	80009a4 <get_irq2_register>
 8000dca:	0003      	movs	r3, r0
 8000dcc:	001a      	movs	r2, r3
 8000dce:	2340      	movs	r3, #64	; 0x40
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d123      	bne.n	8000e1c <sx1278_fifo_dump+0x64>
	{
		//if fifo is empty return from function
		return;
	}
	while(!(get_irq2_register(hspi) & FIFO_EMPTY))
 8000dd4:	e018      	b.n	8000e08 <sx1278_fifo_dump+0x50>
	{
		radio->rx_buffer[radio->rx_buffer_size] = spi_single_read(hspi, REG_FIFO);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	22f9      	movs	r2, #249	; 0xf9
 8000dda:	5c9b      	ldrb	r3, [r3, r2]
 8000ddc:	001c      	movs	r4, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2100      	movs	r1, #0
 8000de2:	0018      	movs	r0, r3
 8000de4:	f7ff fe1e 	bl	8000a24 <spi_single_read>
 8000de8:	0003      	movs	r3, r0
 8000dea:	0019      	movs	r1, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	22b9      	movs	r2, #185	; 0xb9
 8000df0:	191b      	adds	r3, r3, r4
 8000df2:	189b      	adds	r3, r3, r2
 8000df4:	1c0a      	adds	r2, r1, #0
 8000df6:	701a      	strb	r2, [r3, #0]
		radio->rx_buffer_size ++;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	22f9      	movs	r2, #249	; 0xf9
 8000dfc:	5c9b      	ldrb	r3, [r3, r2]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	22f9      	movs	r2, #249	; 0xf9
 8000e06:	5499      	strb	r1, [r3, r2]
	while(!(get_irq2_register(hspi) & FIFO_EMPTY))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff fdca 	bl	80009a4 <get_irq2_register>
 8000e10:	0003      	movs	r3, r0
 8000e12:	001a      	movs	r2, r3
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	4013      	ands	r3, r2
 8000e18:	d0dd      	beq.n	8000dd6 <sx1278_fifo_dump+0x1e>
 8000e1a:	e000      	b.n	8000e1e <sx1278_fifo_dump+0x66>
		return;
 8000e1c:	46c0      	nop			; (mov r8, r8)
	}

}
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b003      	add	sp, #12
 8000e22:	bd90      	pop	{r4, r7, pc}

08000e24 <change_opmode>:
//Change the Opmode of the device
uint8_t change_opmode(radio *radio, SPI_HandleTypeDef *hspi, radio_state new_mode)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	701a      	strb	r2, [r3, #0]
	uint8_t timeout_counter = 0;
 8000e32:	2317      	movs	r3, #23
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000e3a:	2316      	movs	r3, #22
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000e42:	e015      	b.n	8000e70 <change_opmode+0x4c>
	{
		stat = sx1278_read_all_registers(&(radio->radio), hspi);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2216      	movs	r2, #22
 8000e48:	18bc      	adds	r4, r7, r2
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff fe78 	bl	8000b44 <sx1278_read_all_registers>
 8000e54:	0003      	movs	r3, r0
 8000e56:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000e58:	2117      	movs	r1, #23
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	781a      	ldrb	r2, [r3, #0]
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	3201      	adds	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b64      	cmp	r3, #100	; 0x64
 8000e6a:	d101      	bne.n	8000e70 <change_opmode+0x4c>
		{
			return 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e021      	b.n	8000eb4 <change_opmode+0x90>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000e70:	2316      	movs	r3, #22
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d104      	bne.n	8000e84 <change_opmode+0x60>
 8000e7a:	2317      	movs	r3, #23
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b64      	cmp	r3, #100	; 0x64
 8000e82:	d9df      	bls.n	8000e44 <change_opmode+0x20>
		}
	}
	uint8_t temp_mode = RF_OPMODE_MODULATIONTYPE_FSK |
 8000e84:	2015      	movs	r0, #21
 8000e86:	183b      	adds	r3, r7, r0
 8000e88:	1dfa      	adds	r2, r7, #7
 8000e8a:	7812      	ldrb	r2, [r2, #0]
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	701a      	strb	r2, [r3, #0]
			RF_OPMODE_FREQMODE_ACCESS_LF |new_mode;
	radio->radio.RegOpMode = temp_mode;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	183a      	adds	r2, r7, r0
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	705a      	strb	r2, [r3, #1]
	radio->sx_state = new_mode;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1dfa      	adds	r2, r7, #7
 8000e9e:	2170      	movs	r1, #112	; 0x70
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	545a      	strb	r2, [r3, r1]
	spi_single_write(hspi, REG_OPMODE, (radio->radio.RegOpMode));
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	785a      	ldrb	r2, [r3, #1]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff fd87 	bl	80009c0 <spi_single_write>
	return 1;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b007      	add	sp, #28
 8000eba:	bd90      	pop	{r4, r7, pc}

08000ebc <SX1278_APP>:
	memcpy(dat, packet_to_send, DATA_SIZE);
}
//This Function fills the FIFO with the input data and sets the opmode to transmit.
//It will be up to the app to check when the tx is done.
void SX1278_APP(radio *radio, SPI_HandleTypeDef *hspi)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	switch(radio->sx_state)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2270      	movs	r2, #112	; 0x70
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	2b05      	cmp	r3, #5
 8000ece:	d100      	bne.n	8000ed2 <SX1278_APP+0x16>
 8000ed0:	e08b      	b.n	8000fea <SX1278_APP+0x12e>
 8000ed2:	dd00      	ble.n	8000ed6 <SX1278_APP+0x1a>
 8000ed4:	e0e8      	b.n	80010a8 <SX1278_APP+0x1ec>
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d002      	beq.n	8000ee0 <SX1278_APP+0x24>
 8000eda:	dd00      	ble.n	8000ede <SX1278_APP+0x22>
 8000edc:	e0e4      	b.n	80010a8 <SX1278_APP+0x1ec>
	{
	case SLEEP:
		break;
 8000ede:	e0e3      	b.n	80010a8 <SX1278_APP+0x1ec>
	case STANDBY:
		break;
	case TRANSMITTER:
		if(radio->tx_state_flags.tx_init == 0)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2271      	movs	r2, #113	; 0x71
 8000ee4:	5c9b      	ldrb	r3, [r3, r2]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d119      	bne.n	8000f1e <SX1278_APP+0x62>
		{
			//I will have more to do here.
			change_opmode(radio, hspi, TRANSMITTER);
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2203      	movs	r2, #3
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f7ff ff97 	bl	8000e24 <change_opmode>
			if((get_irq1_register(hspi) & TX_READY) == TX_READY)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff fd45 	bl	8000988 <get_irq1_register>
 8000efe:	0003      	movs	r3, r0
 8000f00:	001a      	movs	r2, r3
 8000f02:	2320      	movs	r3, #32
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b20      	cmp	r3, #32
 8000f08:	d000      	beq.n	8000f0c <SX1278_APP+0x50>
 8000f0a:	e0ca      	b.n	80010a2 <SX1278_APP+0x1e6>
			{
				radio->tx_state_flags.tx_init = 1;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2271      	movs	r2, #113	; 0x71
 8000f10:	2101      	movs	r1, #1
 8000f12:	5499      	strb	r1, [r3, r2]
				radio->tx_state_flags.tx_inp = 1;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2272      	movs	r2, #114	; 0x72
 8000f18:	2101      	movs	r1, #1
 8000f1a:	5499      	strb	r1, [r3, r2]
			radio->tx_state_flags.tx_init = 0;
			radio->tx_state_flags.tx_inp = 0;
			radio->tx_state_flags.tx_fifo_full = 0;
			change_opmode(radio, hspi, STANDBY);
		}
		break;
 8000f1c:	e0c1      	b.n	80010a2 <SX1278_APP+0x1e6>
		else if(radio->tx_state_flags.tx_inp == 1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2272      	movs	r2, #114	; 0x72
 8000f22:	5c9b      	ldrb	r3, [r3, r2]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d145      	bne.n	8000fb4 <SX1278_APP+0xf8>
			if(radio->tx_state_flags.tx_fifo_full == 0)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2273      	movs	r2, #115	; 0x73
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d110      	bne.n	8000f54 <SX1278_APP+0x98>
				if(sx1278_fifo_fill(hspi, radio->tx_buffer) == 1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3374      	adds	r3, #116	; 0x74
 8000f36:	001a      	movs	r2, r3
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ff02 	bl	8000d46 <sx1278_fifo_fill>
 8000f42:	0003      	movs	r3, r0
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d000      	beq.n	8000f4a <SX1278_APP+0x8e>
 8000f48:	e0ab      	b.n	80010a2 <SX1278_APP+0x1e6>
					radio->tx_state_flags.tx_fifo_full = 1;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2273      	movs	r2, #115	; 0x73
 8000f4e:	2101      	movs	r1, #1
 8000f50:	5499      	strb	r1, [r3, r2]
		break;
 8000f52:	e0a6      	b.n	80010a2 <SX1278_APP+0x1e6>
			else if(radio->tx_state_flags.tx_fifo_full == 1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2273      	movs	r2, #115	; 0x73
 8000f58:	5c9b      	ldrb	r3, [r3, r2]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d000      	beq.n	8000f60 <SX1278_APP+0xa4>
 8000f5e:	e0a0      	b.n	80010a2 <SX1278_APP+0x1e6>
				if((get_irq2_register(hspi) & FIFO_EMPTY )== FIFO_EMPTY)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff fd1e 	bl	80009a4 <get_irq2_register>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	2340      	movs	r3, #64	; 0x40
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b40      	cmp	r3, #64	; 0x40
 8000f72:	d000      	beq.n	8000f76 <SX1278_APP+0xba>
 8000f74:	e095      	b.n	80010a2 <SX1278_APP+0x1e6>
					radio->tx_state_flags.tx_fifo_full = 0;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2273      	movs	r2, #115	; 0x73
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	5499      	strb	r1, [r3, r2]
					radio->tx_buffer_size = 0;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	22b4      	movs	r2, #180	; 0xb4
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]
					radio->tx_buffer_prog = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	22b5      	movs	r2, #181	; 0xb5
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	5499      	strb	r1, [r3, r2]
					radio->tx_state_flags.tx_init = 0;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2271      	movs	r2, #113	; 0x71
 8000f92:	2100      	movs	r1, #0
 8000f94:	5499      	strb	r1, [r3, r2]
					radio->tx_state_flags.tx_inp = 0;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2272      	movs	r2, #114	; 0x72
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	5499      	strb	r1, [r3, r2]
					radio->tx_state_flags.tx_fifo_full = 0;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2273      	movs	r2, #115	; 0x73
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	5499      	strb	r1, [r3, r2]
					change_opmode(radio, hspi, STANDBY);
 8000fa6:	6839      	ldr	r1, [r7, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff ff39 	bl	8000e24 <change_opmode>
		break;
 8000fb2:	e076      	b.n	80010a2 <SX1278_APP+0x1e6>
			radio->tx_buffer_size = 0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	22b4      	movs	r2, #180	; 0xb4
 8000fb8:	2100      	movs	r1, #0
 8000fba:	5499      	strb	r1, [r3, r2]
			radio->tx_buffer_prog = 0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	22b5      	movs	r2, #181	; 0xb5
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	5499      	strb	r1, [r3, r2]
			radio->tx_state_flags.tx_init = 0;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2271      	movs	r2, #113	; 0x71
 8000fc8:	2100      	movs	r1, #0
 8000fca:	5499      	strb	r1, [r3, r2]
			radio->tx_state_flags.tx_inp = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2272      	movs	r2, #114	; 0x72
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	5499      	strb	r1, [r3, r2]
			radio->tx_state_flags.tx_fifo_full = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2273      	movs	r2, #115	; 0x73
 8000fd8:	2100      	movs	r1, #0
 8000fda:	5499      	strb	r1, [r3, r2]
			change_opmode(radio, hspi, STANDBY);
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff ff1e 	bl	8000e24 <change_opmode>
		break;
 8000fe8:	e05b      	b.n	80010a2 <SX1278_APP+0x1e6>
	case RECEIVER:
		if(radio->rx_flags.rx_init == 0)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	22b6      	movs	r2, #182	; 0xb6
 8000fee:	5c9b      	ldrb	r3, [r3, r2]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10a      	bne.n	800100a <SX1278_APP+0x14e>
		{
			//Get Radio Ready for Rx
			//FIFO must be clear here. Put logic in later.
			//When reading from fifo make sure it is not empty each time.
			radio->rx_flags.rx_init = 1;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	22b6      	movs	r2, #182	; 0xb6
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	5499      	strb	r1, [r3, r2]
			change_opmode(radio, hspi, RECEIVER);
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2205      	movs	r2, #5
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ff0e 	bl	8000e24 <change_opmode>
					radio->rx_flags.rx_init = 1;
					radio->rx_flags.rx_running = 1;
				}
			}
		}
		break;
 8001008:	e04d      	b.n	80010a6 <SX1278_APP+0x1ea>
		else if(radio->rx_flags.rx_init && !(radio->rx_flags.rx_running))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	22b6      	movs	r2, #182	; 0xb6
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <SX1278_APP+0x180>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	22b7      	movs	r2, #183	; 0xb7
 8001018:	5c9b      	ldrb	r3, [r3, r2]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10e      	bne.n	800103c <SX1278_APP+0x180>
			if((get_irq1_register(hspi) & RX_READY) == RX_READY)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fcb1 	bl	8000988 <get_irq1_register>
 8001026:	0003      	movs	r3, r0
 8001028:	001a      	movs	r2, r3
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	4013      	ands	r3, r2
 800102e:	2b40      	cmp	r3, #64	; 0x40
 8001030:	d136      	bne.n	80010a0 <SX1278_APP+0x1e4>
				radio->rx_flags.rx_running = 1;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	22b7      	movs	r2, #183	; 0xb7
 8001036:	2101      	movs	r1, #1
 8001038:	5499      	strb	r1, [r3, r2]
			if((get_irq1_register(hspi) & RX_READY) == RX_READY)
 800103a:	e031      	b.n	80010a0 <SX1278_APP+0x1e4>
		else if(radio->rx_flags.rx_running)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	22b7      	movs	r2, #183	; 0xb7
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d02f      	beq.n	80010a6 <SX1278_APP+0x1ea>
			if((get_irq2_register(hspi) & PAYLOAD_READY) == PAYLOAD_READY)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff fcab 	bl	80009a4 <get_irq2_register>
 800104e:	0003      	movs	r3, r0
 8001050:	001a      	movs	r2, r3
 8001052:	2304      	movs	r3, #4
 8001054:	4013      	ands	r3, r2
 8001056:	2b04      	cmp	r3, #4
 8001058:	d125      	bne.n	80010a6 <SX1278_APP+0x1ea>
				sx1278_fifo_dump(hspi, radio);
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff fea9 	bl	8000db8 <sx1278_fifo_dump>
				if(!radio->rx_flags.rx_stay)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	22b8      	movs	r2, #184	; 0xb8
 800106a:	5c9b      	ldrb	r3, [r3, r2]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10e      	bne.n	800108e <SX1278_APP+0x1d2>
					change_opmode(radio, hspi, STANDBY);
 8001070:	6839      	ldr	r1, [r7, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fed4 	bl	8000e24 <change_opmode>
					radio->rx_flags.rx_init = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	22b6      	movs	r2, #182	; 0xb6
 8001080:	2100      	movs	r1, #0
 8001082:	5499      	strb	r1, [r3, r2]
					radio->rx_flags.rx_running = 0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	22b7      	movs	r2, #183	; 0xb7
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]
		break;
 800108c:	e00b      	b.n	80010a6 <SX1278_APP+0x1ea>
					radio->rx_flags.rx_init = 1;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	22b6      	movs	r2, #182	; 0xb6
 8001092:	2101      	movs	r1, #1
 8001094:	5499      	strb	r1, [r3, r2]
					radio->rx_flags.rx_running = 1;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	22b7      	movs	r2, #183	; 0xb7
 800109a:	2101      	movs	r1, #1
 800109c:	5499      	strb	r1, [r3, r2]
		break;
 800109e:	e002      	b.n	80010a6 <SX1278_APP+0x1ea>
 80010a0:	e001      	b.n	80010a6 <SX1278_APP+0x1ea>
		break;
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	e000      	b.n	80010a8 <SX1278_APP+0x1ec>
		break;
 80010a6:	46c0      	nop			; (mov r8, r8)
	}
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff fff6 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	; (80010fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <LoopForever+0xe>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	; (8001108 <LoopForever+0x16>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ea:	f003 fb9f 	bl	800482c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff f8e3 	bl	80002b8 <main>

080010f2 <LoopForever>:

LoopForever:
    b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   r0, =_estack
 80010f4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001100:	080048e0 	.word	0x080048e0
  ldr r2, =_sbss
 8001104:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001108:	200002d0 	.word	0x200002d0

0800110c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_IRQHandler>
	...

08001110 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_Init+0x24>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_Init+0x24>)
 800111a:	2110      	movs	r1, #16
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f809 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001126:	f7ff fae5 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <HAL_InitTick+0x5c>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_InitTick+0x60>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	0019      	movs	r1, r3
 800114a:	23fa      	movs	r3, #250	; 0xfa
 800114c:	0098      	lsls	r0, r3, #2
 800114e:	f7fe ffdb 	bl	8000108 <__udivsi3>
 8001152:	0003      	movs	r3, r0
 8001154:	0019      	movs	r1, r3
 8001156:	0020      	movs	r0, r4
 8001158:	f7fe ffd6 	bl	8000108 <__udivsi3>
 800115c:	0003      	movs	r3, r0
 800115e:	0018      	movs	r0, r3
 8001160:	f000 f90b 	bl	800137a <HAL_SYSTICK_Config>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d001      	beq.n	800116c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e00f      	b.n	800118c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d80b      	bhi.n	800118a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	2301      	movs	r3, #1
 8001176:	425b      	negs	r3, r3
 8001178:	2200      	movs	r2, #0
 800117a:	0018      	movs	r0, r3
 800117c:	f000 f8d8 	bl	8001330 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_InitTick+0x64>)
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b003      	add	sp, #12
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	20000054 	.word	0x20000054
 8001198:	2000005c 	.word	0x2000005c
 800119c:	20000058 	.word	0x20000058

080011a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_IncTick+0x1c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	001a      	movs	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x20>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	18d2      	adds	r2, r2, r3
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HAL_IncTick+0x20>)
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	2000005c 	.word	0x2000005c
 80011c0:	200002cc 	.word	0x200002cc

080011c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <HAL_GetTick+0x10>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	200002cc 	.word	0x200002cc

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	0002      	movs	r2, r0
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	1dfb      	adds	r3, r7, #7
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b7f      	cmp	r3, #127	; 0x7f
 80011ea:	d809      	bhi.n	8001200 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	001a      	movs	r2, r3
 80011f2:	231f      	movs	r3, #31
 80011f4:	401a      	ands	r2, r3
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_EnableIRQ+0x30>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	4091      	lsls	r1, r2
 80011fc:	000a      	movs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
  }
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	0002      	movs	r2, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b7f      	cmp	r3, #127	; 0x7f
 8001220:	d828      	bhi.n	8001274 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001222:	4a2f      	ldr	r2, [pc, #188]	; (80012e0 <__NVIC_SetPriority+0xd4>)
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b25b      	sxtb	r3, r3
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	33c0      	adds	r3, #192	; 0xc0
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	589b      	ldr	r3, [r3, r2]
 8001232:	1dfa      	adds	r2, r7, #7
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	0011      	movs	r1, r2
 8001238:	2203      	movs	r2, #3
 800123a:	400a      	ands	r2, r1
 800123c:	00d2      	lsls	r2, r2, #3
 800123e:	21ff      	movs	r1, #255	; 0xff
 8001240:	4091      	lsls	r1, r2
 8001242:	000a      	movs	r2, r1
 8001244:	43d2      	mvns	r2, r2
 8001246:	401a      	ands	r2, r3
 8001248:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	019b      	lsls	r3, r3, #6
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	401a      	ands	r2, r3
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	0018      	movs	r0, r3
 8001258:	2303      	movs	r3, #3
 800125a:	4003      	ands	r3, r0
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001260:	481f      	ldr	r0, [pc, #124]	; (80012e0 <__NVIC_SetPriority+0xd4>)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b25b      	sxtb	r3, r3
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	430a      	orrs	r2, r1
 800126c:	33c0      	adds	r3, #192	; 0xc0
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001272:	e031      	b.n	80012d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <__NVIC_SetPriority+0xd8>)
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	0019      	movs	r1, r3
 800127c:	230f      	movs	r3, #15
 800127e:	400b      	ands	r3, r1
 8001280:	3b08      	subs	r3, #8
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3306      	adds	r3, #6
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	3304      	adds	r3, #4
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1dfa      	adds	r2, r7, #7
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	0011      	movs	r1, r2
 8001294:	2203      	movs	r2, #3
 8001296:	400a      	ands	r2, r1
 8001298:	00d2      	lsls	r2, r2, #3
 800129a:	21ff      	movs	r1, #255	; 0xff
 800129c:	4091      	lsls	r1, r2
 800129e:	000a      	movs	r2, r1
 80012a0:	43d2      	mvns	r2, r2
 80012a2:	401a      	ands	r2, r3
 80012a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	019b      	lsls	r3, r3, #6
 80012aa:	22ff      	movs	r2, #255	; 0xff
 80012ac:	401a      	ands	r2, r3
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	0018      	movs	r0, r3
 80012b4:	2303      	movs	r3, #3
 80012b6:	4003      	ands	r3, r0
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <__NVIC_SetPriority+0xd8>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	001c      	movs	r4, r3
 80012c4:	230f      	movs	r3, #15
 80012c6:	4023      	ands	r3, r4
 80012c8:	3b08      	subs	r3, #8
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	430a      	orrs	r2, r1
 80012ce:	3306      	adds	r3, #6
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	18c3      	adds	r3, r0, r3
 80012d4:	3304      	adds	r3, #4
 80012d6:	601a      	str	r2, [r3, #0]
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b003      	add	sp, #12
 80012de:	bd90      	pop	{r4, r7, pc}
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	1e5a      	subs	r2, r3, #1
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	045b      	lsls	r3, r3, #17
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d301      	bcc.n	8001300 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fc:	2301      	movs	r3, #1
 80012fe:	e010      	b.n	8001322 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <SysTick_Config+0x44>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	3a01      	subs	r2, #1
 8001306:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001308:	2301      	movs	r3, #1
 800130a:	425b      	negs	r3, r3
 800130c:	2103      	movs	r1, #3
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff ff7c 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x44>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x44>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	210f      	movs	r1, #15
 800133c:	187b      	adds	r3, r7, r1
 800133e:	1c02      	adds	r2, r0, #0
 8001340:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	187b      	adds	r3, r7, r1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25b      	sxtb	r3, r3
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff ff5d 	bl	800120c <__NVIC_SetPriority>
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	0002      	movs	r2, r0
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff ff33 	bl	80011d8 <__NVIC_EnableIRQ>
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ffaf 	bl	80012e8 <SysTick_Config>
 800138a:	0003      	movs	r3, r0
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800139c:	210f      	movs	r1, #15
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2221      	movs	r2, #33	; 0x21
 80013a8:	5c9b      	ldrb	r3, [r3, r2]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d006      	beq.n	80013be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2204      	movs	r2, #4
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e028      	b.n	8001410 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	210e      	movs	r1, #14
 80013ca:	438a      	bics	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	438a      	bics	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e6:	2101      	movs	r1, #1
 80013e8:	4091      	lsls	r1, r2
 80013ea:	000a      	movs	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2221      	movs	r2, #33	; 0x21
 80013f2:	2101      	movs	r1, #1
 80013f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2220      	movs	r2, #32
 80013fa:	2100      	movs	r1, #0
 80013fc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	0010      	movs	r0, r2
 800140e:	4798      	blx	r3
    }
  }
  return status;
 8001410:	230f      	movs	r3, #15
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	781b      	ldrb	r3, [r3, #0]
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b004      	add	sp, #16
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	e149      	b.n	80016c4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4091      	lsls	r1, r2
 800143a:	000a      	movs	r2, r1
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d100      	bne.n	8001448 <HAL_GPIO_Init+0x28>
 8001446:	e13a      	b.n	80016be <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	4013      	ands	r3, r2
 8001450:	2b01      	cmp	r3, #1
 8001452:	d005      	beq.n	8001460 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2203      	movs	r2, #3
 800145a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800145c:	2b02      	cmp	r3, #2
 800145e:	d130      	bne.n	80014c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	409a      	lsls	r2, r3
 800146e:	0013      	movs	r3, r2
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	409a      	lsls	r2, r3
 8001482:	0013      	movs	r3, r2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001496:	2201      	movs	r2, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	2201      	movs	r2, #1
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2203      	movs	r2, #3
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	d017      	beq.n	80014fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	409a      	lsls	r2, r3
 80014f0:	0013      	movs	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	4013      	ands	r3, r2
 8001506:	2b02      	cmp	r3, #2
 8001508:	d123      	bne.n	8001552 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	58d3      	ldr	r3, [r2, r3]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2207      	movs	r2, #7
 800151c:	4013      	ands	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	43da      	mvns	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691a      	ldr	r2, [r3, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2107      	movs	r1, #7
 8001536:	400b      	ands	r3, r1
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	6939      	ldr	r1, [r7, #16]
 8001550:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2203      	movs	r2, #3
 800155e:	409a      	lsls	r2, r3
 8001560:	0013      	movs	r3, r2
 8001562:	43da      	mvns	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	401a      	ands	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	409a      	lsls	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	23c0      	movs	r3, #192	; 0xc0
 800158c:	029b      	lsls	r3, r3, #10
 800158e:	4013      	ands	r3, r2
 8001590:	d100      	bne.n	8001594 <HAL_GPIO_Init+0x174>
 8001592:	e094      	b.n	80016be <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001594:	4b51      	ldr	r3, [pc, #324]	; (80016dc <HAL_GPIO_Init+0x2bc>)
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_GPIO_Init+0x2bc>)
 800159a:	2101      	movs	r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	619a      	str	r2, [r3, #24]
 80015a0:	4b4e      	ldr	r3, [pc, #312]	; (80016dc <HAL_GPIO_Init+0x2bc>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2201      	movs	r2, #1
 80015a6:	4013      	ands	r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ac:	4a4c      	ldr	r2, [pc, #304]	; (80016e0 <HAL_GPIO_Init+0x2c0>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	589b      	ldr	r3, [r3, r2]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	2203      	movs	r2, #3
 80015be:	4013      	ands	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	409a      	lsls	r2, r3
 80015c6:	0013      	movs	r3, r2
 80015c8:	43da      	mvns	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	2390      	movs	r3, #144	; 0x90
 80015d4:	05db      	lsls	r3, r3, #23
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x1d6>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a41      	ldr	r2, [pc, #260]	; (80016e4 <HAL_GPIO_Init+0x2c4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x1d2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a40      	ldr	r2, [pc, #256]	; (80016e8 <HAL_GPIO_Init+0x2c8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x1ce>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e004      	b.n	80015f8 <HAL_GPIO_Init+0x1d8>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x1d8>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x1d8>
 80015f6:	2300      	movs	r3, #0
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	2103      	movs	r1, #3
 80015fc:	400a      	ands	r2, r1
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	4093      	lsls	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001608:	4935      	ldr	r1, [pc, #212]	; (80016e0 <HAL_GPIO_Init+0x2c0>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	035b      	lsls	r3, r3, #13
 800162e:	4013      	ands	r3, r2
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800163a:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	039b      	lsls	r3, r3, #14
 8001658:	4013      	ands	r3, r2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43da      	mvns	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	029b      	lsls	r3, r3, #10
 8001682:	4013      	ands	r3, r2
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43da      	mvns	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	4013      	ands	r3, r2
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_GPIO_Init+0x2cc>)
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	1e13      	subs	r3, r2, #0
 80016ce:	d000      	beq.n	80016d2 <HAL_GPIO_Init+0x2b2>
 80016d0:	e6ae      	b.n	8001430 <HAL_GPIO_Init+0x10>
  } 
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b006      	add	sp, #24
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	48000800 	.word	0x48000800
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	0008      	movs	r0, r1
 80016fa:	0011      	movs	r1, r2
 80016fc:	1cbb      	adds	r3, r7, #2
 80016fe:	1c02      	adds	r2, r0, #0
 8001700:	801a      	strh	r2, [r3, #0]
 8001702:	1c7b      	adds	r3, r7, #1
 8001704:	1c0a      	adds	r2, r1, #0
 8001706:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001708:	1c7b      	adds	r3, r7, #1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001710:	1cbb      	adds	r3, r7, #2
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001718:	e003      	b.n	8001722 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800171a:	1cbb      	adds	r3, r7, #2
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e301      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	4013      	ands	r3, r2
 8001746:	d100      	bne.n	800174a <HAL_RCC_OscConfig+0x1e>
 8001748:	e08d      	b.n	8001866 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800174a:	4bc3      	ldr	r3, [pc, #780]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	220c      	movs	r2, #12
 8001750:	4013      	ands	r3, r2
 8001752:	2b04      	cmp	r3, #4
 8001754:	d00e      	beq.n	8001774 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001756:	4bc0      	ldr	r3, [pc, #768]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	220c      	movs	r2, #12
 800175c:	4013      	ands	r3, r2
 800175e:	2b08      	cmp	r3, #8
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x64>
 8001762:	4bbd      	ldr	r3, [pc, #756]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	025b      	lsls	r3, r3, #9
 800176a:	401a      	ands	r2, r3
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	025b      	lsls	r3, r3, #9
 8001770:	429a      	cmp	r2, r3
 8001772:	d10d      	bne.n	8001790 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	4bb8      	ldr	r3, [pc, #736]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	d100      	bne.n	8001782 <HAL_RCC_OscConfig+0x56>
 8001780:	e070      	b.n	8001864 <HAL_RCC_OscConfig+0x138>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d000      	beq.n	800178c <HAL_RCC_OscConfig+0x60>
 800178a:	e06b      	b.n	8001864 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e2d8      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x7c>
 8001798:	4baf      	ldr	r3, [pc, #700]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4bae      	ldr	r3, [pc, #696]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	0249      	lsls	r1, r1, #9
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e02f      	b.n	8001808 <HAL_RCC_OscConfig+0xdc>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10c      	bne.n	80017ca <HAL_RCC_OscConfig+0x9e>
 80017b0:	4ba9      	ldr	r3, [pc, #676]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4ba8      	ldr	r3, [pc, #672]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017b6:	49a9      	ldr	r1, [pc, #676]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017b8:	400a      	ands	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	4ba6      	ldr	r3, [pc, #664]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4ba5      	ldr	r3, [pc, #660]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	49a7      	ldr	r1, [pc, #668]	; (8001a60 <HAL_RCC_OscConfig+0x334>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e01e      	b.n	8001808 <HAL_RCC_OscConfig+0xdc>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d10e      	bne.n	80017f0 <HAL_RCC_OscConfig+0xc4>
 80017d2:	4ba1      	ldr	r3, [pc, #644]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4ba0      	ldr	r3, [pc, #640]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	02c9      	lsls	r1, r1, #11
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	4b9d      	ldr	r3, [pc, #628]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b9c      	ldr	r3, [pc, #624]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0249      	lsls	r1, r1, #9
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xdc>
 80017f0:	4b99      	ldr	r3, [pc, #612]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b98      	ldr	r3, [pc, #608]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	4999      	ldr	r1, [pc, #612]	; (8001a5c <HAL_RCC_OscConfig+0x330>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	4b96      	ldr	r3, [pc, #600]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b95      	ldr	r3, [pc, #596]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001802:	4997      	ldr	r1, [pc, #604]	; (8001a60 <HAL_RCC_OscConfig+0x334>)
 8001804:	400a      	ands	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d014      	beq.n	800183a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fcd8 	bl	80011c4 <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181a:	f7ff fcd3 	bl	80011c4 <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b64      	cmp	r3, #100	; 0x64
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e28a      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182c:	4b8a      	ldr	r3, [pc, #552]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	029b      	lsls	r3, r3, #10
 8001834:	4013      	ands	r3, r2
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0xee>
 8001838:	e015      	b.n	8001866 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fcc3 	bl	80011c4 <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fcbe 	bl	80011c4 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	; 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e275      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	4b80      	ldr	r3, [pc, #512]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	029b      	lsls	r3, r3, #10
 800185e:	4013      	ands	r3, r2
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x118>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	d100      	bne.n	8001872 <HAL_RCC_OscConfig+0x146>
 8001870:	e069      	b.n	8001946 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001872:	4b79      	ldr	r3, [pc, #484]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	220c      	movs	r2, #12
 8001878:	4013      	ands	r3, r2
 800187a:	d00b      	beq.n	8001894 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800187c:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	220c      	movs	r2, #12
 8001882:	4013      	ands	r3, r2
 8001884:	2b08      	cmp	r3, #8
 8001886:	d11c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x196>
 8001888:	4b73      	ldr	r3, [pc, #460]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	4013      	ands	r3, r2
 8001892:	d116      	bne.n	80018c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001894:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2202      	movs	r2, #2
 800189a:	4013      	ands	r3, r2
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x17e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e24b      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	22f8      	movs	r2, #248	; 0xf8
 80018b0:	4393      	bics	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	00da      	lsls	r2, r3, #3
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c0:	e041      	b.n	8001946 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d024      	beq.n	8001914 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fc75 	bl	80011c4 <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fc70 	bl	80011c4 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e227      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2202      	movs	r2, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	d0f1      	beq.n	80018e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	22f8      	movs	r2, #248	; 0xf8
 8001902:	4393      	bics	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00da      	lsls	r2, r3, #3
 800190c:	4b52      	ldr	r3, [pc, #328]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e018      	b.n	8001946 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800191a:	2101      	movs	r1, #1
 800191c:	438a      	bics	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fc50 	bl	80011c4 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fc4b 	bl	80011c4 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e202      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2202      	movs	r2, #2
 8001942:	4013      	ands	r3, r2
 8001944:	d1f1      	bne.n	800192a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2208      	movs	r2, #8
 800194c:	4013      	ands	r3, r2
 800194e:	d036      	beq.n	80019be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d019      	beq.n	800198c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001958:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800195a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800195c:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800195e:	2101      	movs	r1, #1
 8001960:	430a      	orrs	r2, r1
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fc2e 	bl	80011c4 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196e:	f7ff fc29 	bl	80011c4 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1e0      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001980:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d0f1      	beq.n	800196e <HAL_RCC_OscConfig+0x242>
 800198a:	e018      	b.n	80019be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198c:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 800198e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001992:	2101      	movs	r1, #1
 8001994:	438a      	bics	r2, r1
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001998:	f7ff fc14 	bl	80011c4 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a2:	f7ff fc0f 	bl	80011c4 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1c6      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	2202      	movs	r2, #2
 80019ba:	4013      	ands	r3, r2
 80019bc:	d1f1      	bne.n	80019a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2204      	movs	r2, #4
 80019c4:	4013      	ands	r3, r2
 80019c6:	d100      	bne.n	80019ca <HAL_RCC_OscConfig+0x29e>
 80019c8:	e0b4      	b.n	8001b34 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	201f      	movs	r0, #31
 80019cc:	183b      	adds	r3, r7, r0
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	055b      	lsls	r3, r3, #21
 80019da:	4013      	ands	r3, r2
 80019dc:	d110      	bne.n	8001a00 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0549      	lsls	r1, r1, #21
 80019e8:	430a      	orrs	r2, r1
 80019ea:	61da      	str	r2, [r3, #28]
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	055b      	lsls	r3, r3, #21
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_RCC_OscConfig+0x338>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d11a      	bne.n	8001a42 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_RCC_OscConfig+0x338>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_RCC_OscConfig+0x338>)
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	0049      	lsls	r1, r1, #1
 8001a16:	430a      	orrs	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fbd3 	bl	80011c4 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a24:	f7ff fbce 	bl	80011c4 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b64      	cmp	r3, #100	; 0x64
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e185      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_OscConfig+0x338>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d10e      	bne.n	8001a68 <HAL_RCC_OscConfig+0x33c>
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001a4c:	6a1a      	ldr	r2, [r3, #32]
 8001a4e:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_RCC_OscConfig+0x32c>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	621a      	str	r2, [r3, #32]
 8001a56:	e035      	b.n	8001ac4 <HAL_RCC_OscConfig+0x398>
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	fffeffff 	.word	0xfffeffff
 8001a60:	fffbffff 	.word	0xfffbffff
 8001a64:	40007000 	.word	0x40007000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x35e>
 8001a70:	4bb6      	ldr	r3, [pc, #728]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a72:	6a1a      	ldr	r2, [r3, #32]
 8001a74:	4bb5      	ldr	r3, [pc, #724]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	438a      	bics	r2, r1
 8001a7a:	621a      	str	r2, [r3, #32]
 8001a7c:	4bb3      	ldr	r3, [pc, #716]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	4bb2      	ldr	r3, [pc, #712]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a82:	2104      	movs	r1, #4
 8001a84:	438a      	bics	r2, r1
 8001a86:	621a      	str	r2, [r3, #32]
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x398>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x380>
 8001a92:	4bae      	ldr	r3, [pc, #696]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	4bad      	ldr	r3, [pc, #692]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001a98:	2104      	movs	r1, #4
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	621a      	str	r2, [r3, #32]
 8001a9e:	4bab      	ldr	r3, [pc, #684]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aa0:	6a1a      	ldr	r2, [r3, #32]
 8001aa2:	4baa      	ldr	r3, [pc, #680]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	621a      	str	r2, [r3, #32]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x398>
 8001aac:	4ba7      	ldr	r3, [pc, #668]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aae:	6a1a      	ldr	r2, [r3, #32]
 8001ab0:	4ba6      	ldr	r3, [pc, #664]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	621a      	str	r2, [r3, #32]
 8001ab8:	4ba4      	ldr	r3, [pc, #656]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aba:	6a1a      	ldr	r2, [r3, #32]
 8001abc:	4ba3      	ldr	r3, [pc, #652]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001abe:	2104      	movs	r1, #4
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d014      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fb7a 	bl	80011c4 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff fb75 	bl	80011c4 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	4a9b      	ldr	r2, [pc, #620]	; (8001d50 <HAL_RCC_OscConfig+0x624>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e12b      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aea:	4b98      	ldr	r3, [pc, #608]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3aa>
 8001af4:	e013      	b.n	8001b1e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fb65 	bl	80011c4 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afe:	e009      	b.n	8001b14 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff fb60 	bl	80011c4 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4a91      	ldr	r2, [pc, #580]	; (8001d50 <HAL_RCC_OscConfig+0x624>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e116      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	4b8d      	ldr	r3, [pc, #564]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b1e:	231f      	movs	r3, #31
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b28:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b2a:	69da      	ldr	r2, [r3, #28]
 8001b2c:	4b87      	ldr	r3, [pc, #540]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b2e:	4989      	ldr	r1, [pc, #548]	; (8001d54 <HAL_RCC_OscConfig+0x628>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2210      	movs	r2, #16
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d12a      	bne.n	8001b9c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b46:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b4a:	4b80      	ldr	r3, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b52:	4b7e      	ldr	r3, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b56:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b58:	2101      	movs	r1, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fb31 	bl	80011c4 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b68:	f7ff fb2c 	bl	80011c4 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0e3      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b7a:	4b74      	ldr	r3, [pc, #464]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0f1      	beq.n	8001b68 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b84:	4b71      	ldr	r3, [pc, #452]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	22f8      	movs	r2, #248	; 0xf8
 8001b8a:	4393      	bics	r3, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	00da      	lsls	r2, r3, #3
 8001b94:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9a:	e034      	b.n	8001c06 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	3305      	adds	r3, #5
 8001ba2:	d111      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ba4:	4b69      	ldr	r3, [pc, #420]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001baa:	2104      	movs	r1, #4
 8001bac:	438a      	bics	r2, r1
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb4:	22f8      	movs	r2, #248	; 0xf8
 8001bb6:	4393      	bics	r3, r2
 8001bb8:	0019      	movs	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	00da      	lsls	r2, r3, #3
 8001bc0:	4b62      	ldr	r3, [pc, #392]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc6:	e01e      	b.n	8001c06 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bc8:	4b60      	ldr	r3, [pc, #384]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bcc:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bce:	2104      	movs	r1, #4
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bd4:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd8:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	438a      	bics	r2, r1
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7ff faf0 	bl	80011c4 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bea:	f7ff faeb 	bl	80011c4 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0a2      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	2202      	movs	r2, #2
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f1      	bne.n	8001bea <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d100      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4e4>
 8001c0e:	e097      	b.n	8001d40 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	220c      	movs	r2, #12
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x4f2>
 8001c1c:	e06b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d14c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b48      	ldr	r3, [pc, #288]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c2c:	494a      	ldr	r1, [pc, #296]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fac7 	bl	80011c4 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff fac2 	bl	80011c4 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e079      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	049b      	lsls	r3, r3, #18
 8001c56:	4013      	ands	r3, r2
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5a:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	220f      	movs	r2, #15
 8001c60:	4393      	bics	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4a3a      	ldr	r2, [pc, #232]	; (8001d5c <HAL_RCC_OscConfig+0x630>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	431a      	orrs	r2, r3
 8001c82:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	0449      	lsls	r1, r1, #17
 8001c92:	430a      	orrs	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fa95 	bl	80011c4 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff fa90 	bl	80011c4 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e047      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb2:	4b26      	ldr	r3, [pc, #152]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	049b      	lsls	r3, r3, #18
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x574>
 8001cbe:	e03f      	b.n	8001d40 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001cc6:	4924      	ldr	r1, [pc, #144]	; (8001d58 <HAL_RCC_OscConfig+0x62c>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fa7a 	bl	80011c4 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff fa75 	bl	80011c4 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e02c      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	4b18      	ldr	r3, [pc, #96]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	049b      	lsls	r3, r3, #18
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x5aa>
 8001cf4:	e024      	b.n	8001d40 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e01f      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_RCC_OscConfig+0x620>)
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	025b      	lsls	r3, r3, #9
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d10e      	bne.n	8001d3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	220f      	movs	r2, #15
 8001d22:	401a      	ands	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	23f0      	movs	r3, #240	; 0xf0
 8001d30:	039b      	lsls	r3, r3, #14
 8001d32:	401a      	ands	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b008      	add	sp, #32
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	00001388 	.word	0x00001388
 8001d54:	efffffff 	.word	0xefffffff
 8001d58:	feffffff 	.word	0xfeffffff
 8001d5c:	ffc2ffff 	.word	0xffc2ffff

08001d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0b3      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d911      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4393      	bics	r3, r2
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e09a      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d015      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2204      	movs	r2, #4
 8001db6:	4013      	ands	r3, r2
 8001db8:	d006      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dba:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001dc0:	21e0      	movs	r1, #224	; 0xe0
 8001dc2:	00c9      	lsls	r1, r1, #3
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	22f0      	movs	r2, #240	; 0xf0
 8001dce:	4393      	bics	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2201      	movs	r2, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	d040      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	029b      	lsls	r3, r3, #10
 8001df6:	4013      	ands	r3, r2
 8001df8:	d114      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e06e      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	049b      	lsls	r3, r3, #18
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d108      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e062      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e05b      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2203      	movs	r2, #3
 8001e2a:	4393      	bics	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e38:	f7ff f9c4 	bl	80011c4 <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e42:	f7ff f9bf 	bl	80011c4 <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_RCC_ClockConfig+0x18c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e042      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1ec      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d211      	bcs.n	8001e9a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4393      	bics	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_RCC_ClockConfig+0x184>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e020      	b.n	8001edc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <HAL_RCC_ClockConfig+0x190>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eb8:	f000 f820 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001ebc:	0001      	movs	r1, r0
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_ClockConfig+0x188>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x194>)
 8001eca:	5cd3      	ldrb	r3, [r2, r3]
 8001ecc:	000a      	movs	r2, r1
 8001ece:	40da      	lsrs	r2, r3
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x198>)
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f7ff f92f 	bl	8001138 <HAL_InitTick>
  
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	00001388 	.word	0x00001388
 8001ef0:	fffff8ff 	.word	0xfffff8ff
 8001ef4:	080048a0 	.word	0x080048a0
 8001ef8:	20000054 	.word	0x20000054

08001efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	220c      	movs	r2, #12
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x30>
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x36>
 8001f2a:	e02c      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f2e:	613b      	str	r3, [r7, #16]
      break;
 8001f30:	e02c      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	0c9b      	lsrs	r3, r3, #18
 8001f36:	220f      	movs	r2, #15
 8001f38:	4013      	ands	r3, r2
 8001f3a:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	220f      	movs	r2, #15
 8001f46:	4013      	ands	r3, r2
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	4013      	ands	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	4810      	ldr	r0, [pc, #64]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f5c:	f7fe f8d4 	bl	8000108 <__udivsi3>
 8001f60:	0003      	movs	r3, r0
 8001f62:	001a      	movs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4353      	muls	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e009      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	000a      	movs	r2, r1
 8001f70:	0152      	lsls	r2, r2, #5
 8001f72:	1a52      	subs	r2, r2, r1
 8001f74:	0193      	lsls	r3, r2, #6
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	185b      	adds	r3, r3, r1
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
      break;
 8001f84:	e002      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f88:	613b      	str	r3, [r7, #16]
      break;
 8001f8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f8c:	693b      	ldr	r3, [r7, #16]
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b006      	add	sp, #24
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	007a1200 	.word	0x007a1200
 8001fa0:	080048b8 	.word	0x080048b8
 8001fa4:	080048c8 	.word	0x080048c8

08001fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fac:	4b02      	ldr	r3, [pc, #8]	; (8001fb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	20000054 	.word	0x20000054

08001fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fc0:	f7ff fff2 	bl	8001fa8 <HAL_RCC_GetHCLKFreq>
 8001fc4:	0001      	movs	r1, r0
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	2207      	movs	r2, #7
 8001fce:	4013      	ands	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	40d9      	lsrs	r1, r3
 8001fd6:	000b      	movs	r3, r1
}    
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	080048b0 	.word	0x080048b0

08001fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	025b      	lsls	r3, r3, #9
 8002000:	4013      	ands	r3, r2
 8002002:	d100      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002004:	e08e      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002006:	2017      	movs	r0, #23
 8002008:	183b      	adds	r3, r7, r0
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200e:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002010:	69da      	ldr	r2, [r3, #28]
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	055b      	lsls	r3, r3, #21
 8002016:	4013      	ands	r3, r2
 8002018:	d110      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b54      	ldr	r3, [pc, #336]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	0549      	lsls	r1, r1, #21
 8002024:	430a      	orrs	r2, r1
 8002026:	61da      	str	r2, [r3, #28]
 8002028:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800202a:	69da      	ldr	r2, [r3, #28]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	183b      	adds	r3, r7, r0
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4013      	ands	r3, r2
 8002046:	d11a      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002048:	4b49      	ldr	r3, [pc, #292]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b48      	ldr	r3, [pc, #288]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	0049      	lsls	r1, r1, #1
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002056:	f7ff f8b5 	bl	80011c4 <HAL_GetTick>
 800205a:	0003      	movs	r3, r0
 800205c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205e:	e008      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002060:	f7ff f8b0 	bl	80011c4 <HAL_GetTick>
 8002064:	0002      	movs	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e077      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4013      	ands	r3, r2
 800207c:	d0f0      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	23c0      	movs	r3, #192	; 0xc0
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4013      	ands	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d034      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	23c0      	movs	r3, #192	; 0xc0
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4013      	ands	r3, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	429a      	cmp	r2, r3
 800209e:	d02c      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a33      	ldr	r2, [pc, #204]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020aa:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0249      	lsls	r1, r1, #9
 80020b4:	430a      	orrs	r2, r1
 80020b6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b8:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020be:	492e      	ldr	r1, [pc, #184]	; (8002178 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff f877 	bl	80011c4 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020da:	e009      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020dc:	f7ff f872 	bl	80011c4 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	4a25      	ldr	r2, [pc, #148]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e038      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800210a:	430a      	orrs	r2, r1
 800210c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800210e:	2317      	movs	r3, #23
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800211a:	69da      	ldr	r2, [r3, #28]
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800211e:	4918      	ldr	r1, [pc, #96]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002120:	400a      	ands	r2, r1
 8002122:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2201      	movs	r2, #1
 800212a:	4013      	ands	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	2203      	movs	r2, #3
 8002134:	4393      	bics	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800213e:	430a      	orrs	r2, r1
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2220      	movs	r2, #32
 8002148:	4013      	ands	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	2210      	movs	r2, #16
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800215c:	430a      	orrs	r2, r1
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b006      	add	sp, #24
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
 8002174:	fffffcff 	.word	0xfffffcff
 8002178:	fffeffff 	.word	0xfffeffff
 800217c:	00001388 	.word	0x00001388
 8002180:	efffffff 	.word	0xefffffff

08002184 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800218c:	230f      	movs	r3, #15
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e081      	b.n	80022a2 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7f5b      	ldrb	r3, [r3, #29]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7fe fac3 	bl	800073c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2210      	movs	r2, #16
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d05c      	beq.n	8002284 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	22ca      	movs	r2, #202	; 0xca
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2253      	movs	r2, #83	; 0x53
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80021da:	250f      	movs	r5, #15
 80021dc:	197c      	adds	r4, r7, r5
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f9c5 	bl	8002570 <RTC_EnterInitMode>
 80021e6:	0003      	movs	r3, r0
 80021e8:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80021ea:	0028      	movs	r0, r5
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d12c      	bne.n	800224e <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	492b      	ldr	r1, [pc, #172]	; (80022ac <HAL_RTC_Init+0x128>)
 8002200:	400a      	ands	r2, r1
 8002202:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68d2      	ldr	r2, [r2, #12]
 800222a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6919      	ldr	r1, [r3, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	041a      	lsls	r2, r3, #16
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002240:	183c      	adds	r4, r7, r0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0018      	movs	r0, r3
 8002246:	f000 f9d6 	bl	80025f6 <RTC_ExitInitMode>
 800224a:	0003      	movs	r3, r0
 800224c:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800224e:	230f      	movs	r3, #15
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d110      	bne.n	800227a <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4913      	ldr	r1, [pc, #76]	; (80022b0 <HAL_RTC_Init+0x12c>)
 8002264:	400a      	ands	r2, r1
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	22ff      	movs	r2, #255	; 0xff
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
 8002282:	e003      	b.n	800228c <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002284:	230f      	movs	r3, #15
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800228c:	230f      	movs	r3, #15
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800229c:	230f      	movs	r3, #15
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b004      	add	sp, #16
 80022a8:	bdb0      	pop	{r4, r5, r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	ff8fffbf 	.word	0xff8fffbf
 80022b0:	fffbffff 	.word	0xfffbffff

080022b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	7f1b      	ldrb	r3, [r3, #28]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_RTC_SetTime+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e08e      	b.n	80023ee <HAL_RTC_SetTime+0x13a>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2202      	movs	r2, #2
 80022da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d125      	bne.n	800232e <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	4013      	ands	r3, r2
 80022ec:	d102      	bne.n	80022f4 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2200      	movs	r2, #0
 80022f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f9a5 	bl	8002648 <RTC_ByteToBcd2>
 80022fe:	0003      	movs	r3, r0
 8002300:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	0018      	movs	r0, r3
 8002308:	f000 f99e 	bl	8002648 <RTC_ByteToBcd2>
 800230c:	0003      	movs	r3, r0
 800230e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002310:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	789b      	ldrb	r3, [r3, #2]
 8002316:	0018      	movs	r0, r3
 8002318:	f000 f996 	bl	8002648 <RTC_ByteToBcd2>
 800231c:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800231e:	0022      	movs	r2, r4
 8002320:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	78db      	ldrb	r3, [r3, #3]
 8002326:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e017      	b.n	800235e <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	4013      	ands	r3, r2
 8002338:	d102      	bne.n	8002340 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	785b      	ldrb	r3, [r3, #1]
 800234a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800234c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002352:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	78db      	ldrb	r3, [r3, #3]
 8002358:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	22ca      	movs	r2, #202	; 0xca
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2253      	movs	r2, #83	; 0x53
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800236e:	2513      	movs	r5, #19
 8002370:	197c      	adds	r4, r7, r5
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 f8fb 	bl	8002570 <RTC_EnterInitMode>
 800237a:	0003      	movs	r3, r0
 800237c:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800237e:	0028      	movs	r0, r5
 8002380:	183b      	adds	r3, r7, r0
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d120      	bne.n	80023ca <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	491a      	ldr	r1, [pc, #104]	; (80023f8 <HAL_RTC_SetTime+0x144>)
 8002390:	400a      	ands	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4917      	ldr	r1, [pc, #92]	; (80023fc <HAL_RTC_SetTime+0x148>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80023bc:	183c      	adds	r4, r7, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 f918 	bl	80025f6 <RTC_ExitInitMode>
 80023c6:	0003      	movs	r3, r0
 80023c8:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80023ca:	2313      	movs	r3, #19
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	22ff      	movs	r2, #255	; 0xff
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]

  return status;
 80023e8:	2313      	movs	r3, #19
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	781b      	ldrb	r3, [r3, #0]
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b006      	add	sp, #24
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	007f7f7f 	.word	0x007f7f7f
 80023fc:	fffbffff 	.word	0xfffbffff

08002400 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002400:	b5b0      	push	{r4, r5, r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	7f1b      	ldrb	r3, [r3, #28]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_RTC_SetDate+0x1c>
 8002418:	2302      	movs	r3, #2
 800241a:	e07a      	b.n	8002512 <HAL_RTC_SetDate+0x112>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2202      	movs	r2, #2
 8002426:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10e      	bne.n	800244c <HAL_RTC_SetDate+0x4c>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	785b      	ldrb	r3, [r3, #1]
 8002432:	001a      	movs	r2, r3
 8002434:	2310      	movs	r3, #16
 8002436:	4013      	ands	r3, r2
 8002438:	d008      	beq.n	800244c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	785b      	ldrb	r3, [r3, #1]
 800243e:	2210      	movs	r2, #16
 8002440:	4393      	bics	r3, r2
 8002442:	b2db      	uxtb	r3, r3
 8002444:	330a      	adds	r3, #10
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d11c      	bne.n	800248c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	78db      	ldrb	r3, [r3, #3]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 f8f6 	bl	8002648 <RTC_ByteToBcd2>
 800245c:	0003      	movs	r3, r0
 800245e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f8ef 	bl	8002648 <RTC_ByteToBcd2>
 800246a:	0003      	movs	r3, r0
 800246c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800246e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	789b      	ldrb	r3, [r3, #2]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 f8e7 	bl	8002648 <RTC_ByteToBcd2>
 800247a:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800247c:	0022      	movs	r2, r4
 800247e:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e00e      	b.n	80024aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	78db      	ldrb	r3, [r3, #3]
 8002490:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	785b      	ldrb	r3, [r3, #1]
 8002496:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002498:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800249e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80024a6:	4313      	orrs	r3, r2
 80024a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	22ca      	movs	r2, #202	; 0xca
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2253      	movs	r2, #83	; 0x53
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80024ba:	2513      	movs	r5, #19
 80024bc:	197c      	adds	r4, r7, r5
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f000 f855 	bl	8002570 <RTC_EnterInitMode>
 80024c6:	0003      	movs	r3, r0
 80024c8:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80024ca:	0028      	movs	r0, r5
 80024cc:	183b      	adds	r3, r7, r0
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10c      	bne.n	80024ee <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4910      	ldr	r1, [pc, #64]	; (800251c <HAL_RTC_SetDate+0x11c>)
 80024dc:	400a      	ands	r2, r1
 80024de:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024e0:	183c      	adds	r4, r7, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 f886 	bl	80025f6 <RTC_ExitInitMode>
 80024ea:	0003      	movs	r3, r0
 80024ec:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80024ee:	2313      	movs	r3, #19
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]

  return status;
 800250c:	2313      	movs	r3, #19
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	781b      	ldrb	r3, [r3, #0]
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b006      	add	sp, #24
 8002518:	bdb0      	pop	{r4, r5, r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	00ffff3f 	.word	0x00ffff3f

08002520 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0e      	ldr	r2, [pc, #56]	; (800256c <HAL_RTC_WaitForSynchro+0x4c>)
 8002532:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002534:	f7fe fe46 	bl	80011c4 <HAL_GetTick>
 8002538:	0003      	movs	r3, r0
 800253a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800253c:	e00a      	b.n	8002554 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800253e:	f7fe fe41 	bl	80011c4 <HAL_GetTick>
 8002542:	0002      	movs	r2, r0
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	23fa      	movs	r3, #250	; 0xfa
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	429a      	cmp	r2, r3
 800254e:	d901      	bls.n	8002554 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e006      	b.n	8002562 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	4013      	ands	r3, r2
 800255e:	d0ee      	beq.n	800253e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b004      	add	sp, #16
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	00017959 	.word	0x00017959

08002570 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	230f      	movs	r3, #15
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	4013      	ands	r3, r2
 800258e:	d12b      	bne.n	80025e8 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fe10 	bl	80011c4 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025a8:	e013      	b.n	80025d2 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025aa:	f7fe fe0b 	bl	80011c4 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1ad2      	subs	r2, r2, r3
 80025b4:	200f      	movs	r0, #15
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	1839      	adds	r1, r7, r0
 80025ba:	7809      	ldrb	r1, [r1, #0]
 80025bc:	7019      	strb	r1, [r3, #0]
 80025be:	23fa      	movs	r3, #250	; 0xfa
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d905      	bls.n	80025d2 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2204      	movs	r2, #4
 80025ca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80025cc:	183b      	adds	r3, r7, r0
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2240      	movs	r2, #64	; 0x40
 80025da:	4013      	ands	r3, r2
 80025dc:	d104      	bne.n	80025e8 <RTC_EnterInitMode+0x78>
 80025de:	230f      	movs	r3, #15
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d1e0      	bne.n	80025aa <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	781b      	ldrb	r3, [r3, #0]
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025f6:	b590      	push	{r4, r7, lr}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	240f      	movs	r4, #15
 8002600:	193b      	adds	r3, r7, r4
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	438a      	bics	r2, r1
 8002614:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2220      	movs	r2, #32
 800261e:	4013      	ands	r3, r2
 8002620:	d10b      	bne.n	800263a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f7ff ff7b 	bl	8002520 <HAL_RTC_WaitForSynchro>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d005      	beq.n	800263a <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2204      	movs	r2, #4
 8002632:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002634:	193b      	adds	r3, r7, r4
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800263a:	230f      	movs	r3, #15
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b005      	add	sp, #20
 8002646:	bd90      	pop	{r4, r7, pc}

08002648 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	0002      	movs	r2, r0
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002658:	e007      	b.n	800266a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3301      	adds	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002660:	1dfb      	adds	r3, r7, #7
 8002662:	1dfa      	adds	r2, r7, #7
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	3a0a      	subs	r2, #10
 8002668:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b09      	cmp	r3, #9
 8002670:	d8f3      	bhi.n	800265a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	b2da      	uxtb	r2, r3
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	b2db      	uxtb	r3, r3
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b004      	add	sp, #16
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0a8      	b.n	80027f0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	2382      	movs	r3, #130	; 0x82
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d009      	beq.n	80026c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	61da      	str	r2, [r3, #28]
 80026b8:	e005      	b.n	80026c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	225d      	movs	r2, #93	; 0x5d
 80026d0:	5c9b      	ldrb	r3, [r3, r2]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	225c      	movs	r2, #92	; 0x5c
 80026dc:	2100      	movs	r1, #0
 80026de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7fe f842 	bl	800076c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	225d      	movs	r2, #93	; 0x5d
 80026ec:	2102      	movs	r1, #2
 80026ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2140      	movs	r1, #64	; 0x40
 80026fc:	438a      	bics	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	23e0      	movs	r3, #224	; 0xe0
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	429a      	cmp	r2, r3
 800270a:	d902      	bls.n	8002712 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	e002      	b.n	8002718 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	23f0      	movs	r3, #240	; 0xf0
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	429a      	cmp	r2, r3
 8002722:	d008      	beq.n	8002736 <HAL_SPI_Init+0xaa>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	23e0      	movs	r3, #224	; 0xe0
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	429a      	cmp	r2, r3
 800272e:	d002      	beq.n	8002736 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	2382      	movs	r3, #130	; 0x82
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	401a      	ands	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6899      	ldr	r1, [r3, #8]
 8002744:	2384      	movs	r3, #132	; 0x84
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	400b      	ands	r3, r1
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2102      	movs	r1, #2
 8002752:	400b      	ands	r3, r1
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	2101      	movs	r1, #1
 800275c:	400b      	ands	r3, r1
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6999      	ldr	r1, [r3, #24]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	400b      	ands	r3, r1
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	2138      	movs	r1, #56	; 0x38
 8002772:	400b      	ands	r3, r1
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	2180      	movs	r1, #128	; 0x80
 800277c:	400b      	ands	r3, r1
 800277e:	431a      	orrs	r2, r3
 8002780:	0011      	movs	r1, r2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	401a      	ands	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	2204      	movs	r2, #4
 800279c:	401a      	ands	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2110      	movs	r1, #16
 80027a4:	400b      	ands	r3, r1
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	2108      	movs	r1, #8
 80027ae:	400b      	ands	r3, r1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68d9      	ldr	r1, [r3, #12]
 80027b6:	23f0      	movs	r3, #240	; 0xf0
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	400b      	ands	r3, r1
 80027bc:	431a      	orrs	r2, r3
 80027be:	0011      	movs	r1, r2
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	015b      	lsls	r3, r3, #5
 80027c6:	401a      	ands	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4907      	ldr	r1, [pc, #28]	; (80027f8 <HAL_SPI_Init+0x16c>)
 80027dc:	400a      	ands	r2, r1
 80027de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	225d      	movs	r2, #93	; 0x5d
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	fffff7ff 	.word	0xfffff7ff

080027fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	1dbb      	adds	r3, r7, #6
 800280a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800280c:	231f      	movs	r3, #31
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	225c      	movs	r2, #92	; 0x5c
 8002818:	5c9b      	ldrb	r3, [r3, r2]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_SPI_Transmit+0x26>
 800281e:	2302      	movs	r3, #2
 8002820:	e147      	b.n	8002ab2 <HAL_SPI_Transmit+0x2b6>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	225c      	movs	r2, #92	; 0x5c
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800282a:	f7fe fccb 	bl	80011c4 <HAL_GetTick>
 800282e:	0003      	movs	r3, r0
 8002830:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002832:	2316      	movs	r3, #22
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	1dba      	adds	r2, r7, #6
 8002838:	8812      	ldrh	r2, [r2, #0]
 800283a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	225d      	movs	r2, #93	; 0x5d
 8002840:	5c9b      	ldrb	r3, [r3, r2]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d004      	beq.n	8002852 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002848:	231f      	movs	r3, #31
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2202      	movs	r2, #2
 800284e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002850:	e128      	b.n	8002aa4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_SPI_Transmit+0x64>
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002860:	231f      	movs	r3, #31
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
    goto error;
 8002868:	e11c      	b.n	8002aa4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	225d      	movs	r2, #93	; 0x5d
 800286e:	2103      	movs	r1, #3
 8002870:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1dba      	adds	r2, r7, #6
 8002882:	8812      	ldrh	r2, [r2, #0]
 8002884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1dba      	adds	r2, r7, #6
 800288a:	8812      	ldrh	r2, [r2, #0]
 800288c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2244      	movs	r2, #68	; 0x44
 8002898:	2100      	movs	r1, #0
 800289a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2246      	movs	r2, #70	; 0x46
 80028a0:	2100      	movs	r1, #0
 80028a2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d110      	bne.n	80028de <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2140      	movs	r1, #64	; 0x40
 80028c8:	438a      	bics	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	01c9      	lsls	r1, r1, #7
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b40      	cmp	r3, #64	; 0x40
 80028ea:	d007      	beq.n	80028fc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2140      	movs	r1, #64	; 0x40
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	23e0      	movs	r3, #224	; 0xe0
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	429a      	cmp	r2, r3
 8002906:	d952      	bls.n	80029ae <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_SPI_Transmit+0x11e>
 8002910:	2316      	movs	r3, #22
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d143      	bne.n	80029a2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	881a      	ldrh	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	1c9a      	adds	r2, r3, #2
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800293e:	e030      	b.n	80029a2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2202      	movs	r2, #2
 8002948:	4013      	ands	r3, r2
 800294a:	2b02      	cmp	r3, #2
 800294c:	d112      	bne.n	8002974 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	1c9a      	adds	r2, r3, #2
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002972:	e016      	b.n	80029a2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002974:	f7fe fc26 	bl	80011c4 <HAL_GetTick>
 8002978:	0002      	movs	r2, r0
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d802      	bhi.n	800298a <HAL_SPI_Transmit+0x18e>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	d102      	bne.n	8002990 <HAL_SPI_Transmit+0x194>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d108      	bne.n	80029a2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002990:	231f      	movs	r3, #31
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2203      	movs	r2, #3
 8002996:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	225d      	movs	r2, #93	; 0x5d
 800299c:	2101      	movs	r1, #1
 800299e:	5499      	strb	r1, [r3, r2]
          goto error;
 80029a0:	e080      	b.n	8002aa4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1c9      	bne.n	8002940 <HAL_SPI_Transmit+0x144>
 80029ac:	e053      	b.n	8002a56 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <HAL_SPI_Transmit+0x1c4>
 80029b6:	2316      	movs	r3, #22
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d145      	bne.n	8002a4c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	330c      	adds	r3, #12
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80029e6:	e031      	b.n	8002a4c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2202      	movs	r2, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d113      	bne.n	8002a1e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a1c:	e016      	b.n	8002a4c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a1e:	f7fe fbd1 	bl	80011c4 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d802      	bhi.n	8002a34 <HAL_SPI_Transmit+0x238>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	3301      	adds	r3, #1
 8002a32:	d102      	bne.n	8002a3a <HAL_SPI_Transmit+0x23e>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d108      	bne.n	8002a4c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002a3a:	231f      	movs	r3, #31
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2203      	movs	r2, #3
 8002a40:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	225d      	movs	r2, #93	; 0x5d
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a4a:	e02b      	b.n	8002aa4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1c8      	bne.n	80029e8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 fdf7 	bl	8003650 <SPI_EndRxTxTransaction>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002a92:	231f      	movs	r3, #31
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e003      	b.n	8002aa4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	225d      	movs	r2, #93	; 0x5d
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	225c      	movs	r2, #92	; 0x5c
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002aac:	231f      	movs	r3, #31
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	781b      	ldrb	r3, [r3, #0]
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b008      	add	sp, #32
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	1dbb      	adds	r3, r7, #6
 8002aca:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002acc:	2117      	movs	r1, #23
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	225d      	movs	r2, #93	; 0x5d
 8002ad8:	5c9b      	ldrb	r3, [r3, r2]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d003      	beq.n	8002ae8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ae6:	e12b      	b.n	8002d40 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	2382      	movs	r3, #130	; 0x82
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d113      	bne.n	8002b1c <HAL_SPI_Receive+0x60>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10f      	bne.n	8002b1c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	225d      	movs	r2, #93	; 0x5d
 8002b00:	2104      	movs	r1, #4
 8002b02:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b04:	1dbb      	adds	r3, r7, #6
 8002b06:	881c      	ldrh	r4, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	0023      	movs	r3, r4
 8002b14:	f000 f924 	bl	8002d60 <HAL_SPI_TransmitReceive>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	e118      	b.n	8002d4e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	225c      	movs	r2, #92	; 0x5c
 8002b20:	5c9b      	ldrb	r3, [r3, r2]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_SPI_Receive+0x6e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e111      	b.n	8002d4e <HAL_SPI_Receive+0x292>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	225c      	movs	r2, #92	; 0x5c
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b32:	f7fe fb47 	bl	80011c4 <HAL_GetTick>
 8002b36:	0003      	movs	r3, r0
 8002b38:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_SPI_Receive+0x8c>
 8002b40:	1dbb      	adds	r3, r7, #6
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d104      	bne.n	8002b52 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002b48:	2317      	movs	r3, #23
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b50:	e0f6      	b.n	8002d40 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	225d      	movs	r2, #93	; 0x5d
 8002b56:	2104      	movs	r1, #4
 8002b58:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1dba      	adds	r2, r7, #6
 8002b6a:	2144      	movs	r1, #68	; 0x44
 8002b6c:	8812      	ldrh	r2, [r2, #0]
 8002b6e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1dba      	adds	r2, r7, #6
 8002b74:	2146      	movs	r1, #70	; 0x46
 8002b76:	8812      	ldrh	r2, [r2, #0]
 8002b78:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	23e0      	movs	r3, #224	; 0xe0
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d908      	bls.n	8002bb6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	496a      	ldr	r1, [pc, #424]	; (8002d58 <HAL_SPI_Receive+0x29c>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	e008      	b.n	8002bc8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	0149      	lsls	r1, r1, #5
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	438a      	bics	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	495b      	ldr	r1, [pc, #364]	; (8002d5c <HAL_SPI_Receive+0x2a0>)
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d007      	beq.n	8002c12 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2140      	movs	r1, #64	; 0x40
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	23e0      	movs	r3, #224	; 0xe0
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d900      	bls.n	8002c20 <HAL_SPI_Receive+0x164>
 8002c1e:	e071      	b.n	8002d04 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c20:	e035      	b.n	8002c8e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d117      	bne.n	8002c60 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	330c      	adds	r3, #12
 8002c36:	001a      	movs	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2246      	movs	r2, #70	; 0x46
 8002c50:	5a9b      	ldrh	r3, [r3, r2]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b299      	uxth	r1, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2246      	movs	r2, #70	; 0x46
 8002c5c:	5299      	strh	r1, [r3, r2]
 8002c5e:	e016      	b.n	8002c8e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c60:	f7fe fab0 	bl	80011c4 <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d802      	bhi.n	8002c76 <HAL_SPI_Receive+0x1ba>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_SPI_Receive+0x1c0>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d108      	bne.n	8002c8e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002c7c:	2317      	movs	r3, #23
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	2203      	movs	r2, #3
 8002c82:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	225d      	movs	r2, #93	; 0x5d
 8002c88:	2101      	movs	r1, #1
 8002c8a:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c8c:	e058      	b.n	8002d40 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2246      	movs	r2, #70	; 0x46
 8002c92:	5a9b      	ldrh	r3, [r3, r2]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1c3      	bne.n	8002c22 <HAL_SPI_Receive+0x166>
 8002c9a:	e039      	b.n	8002d10 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d115      	bne.n	8002cd6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	1c9a      	adds	r2, r3, #2
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2246      	movs	r2, #70	; 0x46
 8002cc6:	5a9b      	ldrh	r3, [r3, r2]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b299      	uxth	r1, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2246      	movs	r2, #70	; 0x46
 8002cd2:	5299      	strh	r1, [r3, r2]
 8002cd4:	e016      	b.n	8002d04 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cd6:	f7fe fa75 	bl	80011c4 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d802      	bhi.n	8002cec <HAL_SPI_Receive+0x230>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HAL_SPI_Receive+0x236>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002cf2:	2317      	movs	r3, #23
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	225d      	movs	r2, #93	; 0x5d
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]
          goto error;
 8002d02:	e01d      	b.n	8002d40 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2246      	movs	r2, #70	; 0x46
 8002d08:	5a9b      	ldrh	r3, [r3, r2]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1c5      	bne.n	8002c9c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	6839      	ldr	r1, [r7, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 fc3c 	bl	8003594 <SPI_EndRxTransaction>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002d2e:	2317      	movs	r3, #23
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e003      	b.n	8002d40 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	225d      	movs	r2, #93	; 0x5d
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	225c      	movs	r2, #92	; 0x5c
 8002d44:	2100      	movs	r1, #0
 8002d46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d48:	2317      	movs	r3, #23
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b007      	add	sp, #28
 8002d54:	bd90      	pop	{r4, r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	ffffefff 	.word	0xffffefff
 8002d5c:	ffffbfff 	.word	0xffffbfff

08002d60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	1cbb      	adds	r3, r7, #2
 8002d70:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d72:	2301      	movs	r3, #1
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d76:	2323      	movs	r3, #35	; 0x23
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	225c      	movs	r2, #92	; 0x5c
 8002d82:	5c9b      	ldrb	r3, [r3, r2]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_SPI_TransmitReceive+0x2c>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e1c4      	b.n	8003116 <HAL_SPI_TransmitReceive+0x3b6>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	225c      	movs	r2, #92	; 0x5c
 8002d90:	2101      	movs	r1, #1
 8002d92:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d94:	f7fe fa16 	bl	80011c4 <HAL_GetTick>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d9c:	201b      	movs	r0, #27
 8002d9e:	183b      	adds	r3, r7, r0
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	215d      	movs	r1, #93	; 0x5d
 8002da4:	5c52      	ldrb	r2, [r2, r1]
 8002da6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002dae:	2312      	movs	r3, #18
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	1cba      	adds	r2, r7, #2
 8002db4:	8812      	ldrh	r2, [r2, #0]
 8002db6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002db8:	183b      	adds	r3, r7, r0
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d011      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x84>
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	2382      	movs	r3, #130	; 0x82
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d107      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x7a>
 8002dd2:	183b      	adds	r3, r7, r0
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d004      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002dda:	2323      	movs	r3, #35	; 0x23
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2202      	movs	r2, #2
 8002de0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002de2:	e191      	b.n	8003108 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d006      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x98>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x98>
 8002df0:	1cbb      	adds	r3, r7, #2
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d104      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002df8:	2323      	movs	r3, #35	; 0x23
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e00:	e182      	b.n	8003108 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	225d      	movs	r2, #93	; 0x5d
 8002e06:	5c9b      	ldrb	r3, [r3, r2]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d003      	beq.n	8002e16 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	225d      	movs	r2, #93	; 0x5d
 8002e12:	2105      	movs	r1, #5
 8002e14:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1cba      	adds	r2, r7, #2
 8002e26:	2146      	movs	r1, #70	; 0x46
 8002e28:	8812      	ldrh	r2, [r2, #0]
 8002e2a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1cba      	adds	r2, r7, #2
 8002e30:	2144      	movs	r1, #68	; 0x44
 8002e32:	8812      	ldrh	r2, [r2, #0]
 8002e34:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1cba      	adds	r2, r7, #2
 8002e40:	8812      	ldrh	r2, [r2, #0]
 8002e42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1cba      	adds	r2, r7, #2
 8002e48:	8812      	ldrh	r2, [r2, #0]
 8002e4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	23e0      	movs	r3, #224	; 0xe0
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d908      	bls.n	8002e76 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	49ac      	ldr	r1, [pc, #688]	; (8003120 <HAL_SPI_TransmitReceive+0x3c0>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	e008      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	0149      	lsls	r1, r1, #5
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d007      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2140      	movs	r1, #64	; 0x40
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	23e0      	movs	r3, #224	; 0xe0
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d800      	bhi.n	8002eb4 <HAL_SPI_TransmitReceive+0x154>
 8002eb2:	e083      	b.n	8002fbc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x168>
 8002ebc:	2312      	movs	r3, #18
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d000      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x168>
 8002ec6:	e06d      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	1c9a      	adds	r2, r3, #2
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eec:	e05a      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d11b      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x1d4>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0x1d4>
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d113      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d11c      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x21c>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2246      	movs	r2, #70	; 0x46
 8002f46:	5a9b      	ldrh	r3, [r3, r2]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2246      	movs	r2, #70	; 0x46
 8002f6a:	5a9b      	ldrh	r3, [r3, r2]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b299      	uxth	r1, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2246      	movs	r2, #70	; 0x46
 8002f76:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f7c:	f7fe f922 	bl	80011c4 <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d80b      	bhi.n	8002fa4 <HAL_SPI_TransmitReceive+0x244>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	3301      	adds	r3, #1
 8002f90:	d008      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002f92:	2323      	movs	r3, #35	; 0x23
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2203      	movs	r2, #3
 8002f98:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	225d      	movs	r2, #93	; 0x5d
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]
        goto error;
 8002fa2:	e0b1      	b.n	8003108 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d19f      	bne.n	8002eee <HAL_SPI_TransmitReceive+0x18e>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2246      	movs	r2, #70	; 0x46
 8002fb2:	5a9b      	ldrh	r3, [r3, r2]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d199      	bne.n	8002eee <HAL_SPI_TransmitReceive+0x18e>
 8002fba:	e089      	b.n	80030d0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x270>
 8002fc4:	2312      	movs	r3, #18
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d000      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x270>
 8002fce:	e074      	b.n	80030ba <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff6:	e060      	b.n	80030ba <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d11c      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x2e0>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x2e0>
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	2b01      	cmp	r3, #1
 8003014:	d114      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	2b01      	cmp	r3, #1
 800304c:	d11e      	bne.n	800308c <HAL_SPI_TransmitReceive+0x32c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2246      	movs	r2, #70	; 0x46
 8003052:	5a9b      	ldrh	r3, [r3, r2]
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d018      	beq.n	800308c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	001a      	movs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2246      	movs	r2, #70	; 0x46
 800307a:	5a9b      	ldrh	r3, [r3, r2]
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b299      	uxth	r1, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2246      	movs	r2, #70	; 0x46
 8003086:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003088:	2301      	movs	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800308c:	f7fe f89a 	bl	80011c4 <HAL_GetTick>
 8003090:	0002      	movs	r2, r0
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003098:	429a      	cmp	r2, r3
 800309a:	d802      	bhi.n	80030a2 <HAL_SPI_TransmitReceive+0x342>
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	3301      	adds	r3, #1
 80030a0:	d102      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0x348>
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d108      	bne.n	80030ba <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80030a8:	2323      	movs	r3, #35	; 0x23
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2203      	movs	r2, #3
 80030ae:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	225d      	movs	r2, #93	; 0x5d
 80030b4:	2101      	movs	r1, #1
 80030b6:	5499      	strb	r1, [r3, r2]
        goto error;
 80030b8:	e026      	b.n	8003108 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d199      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x298>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2246      	movs	r2, #70	; 0x46
 80030c8:	5a9b      	ldrh	r3, [r3, r2]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d193      	bne.n	8002ff8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f000 faba 	bl	8003650 <SPI_EndRxTxTransaction>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d006      	beq.n	80030ee <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80030e0:	2323      	movs	r3, #35	; 0x23
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d004      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80030f6:	2323      	movs	r3, #35	; 0x23
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e003      	b.n	8003108 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	225d      	movs	r2, #93	; 0x5d
 8003104:	2101      	movs	r1, #1
 8003106:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	225c      	movs	r2, #92	; 0x5c
 800310c:	2100      	movs	r1, #0
 800310e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003110:	2323      	movs	r3, #35	; 0x23
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	781b      	ldrb	r3, [r3, #0]
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b00a      	add	sp, #40	; 0x28
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	ffffefff 	.word	0xffffefff

08003124 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	4013      	ands	r3, r2
 8003142:	d10d      	bne.n	8003160 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2201      	movs	r2, #1
 8003148:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800314a:	d009      	beq.n	8003160 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	4013      	ands	r3, r2
 8003152:	d005      	beq.n	8003160 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	0010      	movs	r0, r2
 800315c:	4798      	blx	r3
    return;
 800315e:	e0c5      	b.n	80032ec <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	d009      	beq.n	800317c <HAL_SPI_IRQHandler+0x58>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	4013      	ands	r3, r2
 800316e:	d005      	beq.n	800317c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	0010      	movs	r0, r2
 8003178:	4798      	blx	r3
    return;
 800317a:	e0b7      	b.n	80032ec <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2220      	movs	r2, #32
 8003180:	4013      	ands	r3, r2
 8003182:	d109      	bne.n	8003198 <HAL_SPI_IRQHandler+0x74>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	4013      	ands	r3, r2
 800318a:	d105      	bne.n	8003198 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4013      	ands	r3, r2
 8003194:	d100      	bne.n	8003198 <HAL_SPI_IRQHandler+0x74>
 8003196:	e0a9      	b.n	80032ec <HAL_SPI_IRQHandler+0x1c8>
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2220      	movs	r2, #32
 800319c:	4013      	ands	r3, r2
 800319e:	d100      	bne.n	80031a2 <HAL_SPI_IRQHandler+0x7e>
 80031a0:	e0a4      	b.n	80032ec <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2240      	movs	r2, #64	; 0x40
 80031a6:	4013      	ands	r3, r2
 80031a8:	d023      	beq.n	80031f2 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	225d      	movs	r2, #93	; 0x5d
 80031ae:	5c9b      	ldrb	r3, [r3, r2]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d011      	beq.n	80031da <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ba:	2204      	movs	r2, #4
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	e00b      	b.n	80031f2 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]
        return;
 80031f0:	e07c      	b.n	80032ec <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2220      	movs	r2, #32
 80031f6:	4013      	ands	r3, r2
 80031f8:	d014      	beq.n	8003224 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fe:	2201      	movs	r2, #1
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2140      	movs	r1, #64	; 0x40
 800321e:	438a      	bics	r2, r1
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4013      	ands	r3, r2
 800322c:	d00c      	beq.n	8003248 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003232:	2208      	movs	r2, #8
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324c:	2b00      	cmp	r3, #0
 800324e:	d04c      	beq.n	80032ea <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	21e0      	movs	r1, #224	; 0xe0
 800325c:	438a      	bics	r2, r1
 800325e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	225d      	movs	r2, #93	; 0x5d
 8003264:	2101      	movs	r1, #1
 8003266:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2202      	movs	r2, #2
 800326c:	4013      	ands	r3, r2
 800326e:	d103      	bne.n	8003278 <HAL_SPI_IRQHandler+0x154>
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2201      	movs	r2, #1
 8003274:	4013      	ands	r3, r2
 8003276:	d032      	beq.n	80032de <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2103      	movs	r1, #3
 8003284:	438a      	bics	r2, r1
 8003286:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_SPI_IRQHandler+0x1d0>)
 8003296:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	0018      	movs	r0, r3
 800329e:	f7fe f879 	bl	8001394 <HAL_DMA_Abort_IT>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	2240      	movs	r2, #64	; 0x40
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d016      	beq.n	80032e8 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <HAL_SPI_IRQHandler+0x1d0>)
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7fe f864 	bl	8001394 <HAL_DMA_Abort_IT>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d00b      	beq.n	80032e8 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d4:	2240      	movs	r2, #64	; 0x40
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80032dc:	e004      	b.n	80032e8 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f000 f809 	bl	80032f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80032e6:	e000      	b.n	80032ea <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80032e8:	46c0      	nop			; (mov r8, r8)
    return;
 80032ea:	46c0      	nop			; (mov r8, r8)
  }
}
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b008      	add	sp, #32
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	08003309 	.word	0x08003309

080032f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2246      	movs	r2, #70	; 0x46
 800331a:	2100      	movs	r1, #0
 800331c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	0018      	movs	r0, r3
 8003328:	f7ff ffe6 	bl	80032f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b004      	add	sp, #16
 8003332:	bd80      	pop	{r7, pc}

08003334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003344:	f7fd ff3e 	bl	80011c4 <HAL_GetTick>
 8003348:	0002      	movs	r2, r0
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	18d3      	adds	r3, r2, r3
 8003352:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003354:	f7fd ff36 	bl	80011c4 <HAL_GetTick>
 8003358:	0003      	movs	r3, r0
 800335a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800335c:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	015b      	lsls	r3, r3, #5
 8003362:	0d1b      	lsrs	r3, r3, #20
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	4353      	muls	r3, r2
 8003368:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800336a:	e058      	b.n	800341e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	d055      	beq.n	800341e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003372:	f7fd ff27 	bl	80011c4 <HAL_GetTick>
 8003376:	0002      	movs	r2, r0
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	429a      	cmp	r2, r3
 8003380:	d902      	bls.n	8003388 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d142      	bne.n	800340e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	21e0      	movs	r1, #224	; 0xe0
 8003394:	438a      	bics	r2, r1
 8003396:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	2382      	movs	r3, #130	; 0x82
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d113      	bne.n	80033cc <SPI_WaitFlagStateUntilTimeout+0x98>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d005      	beq.n	80033bc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2140      	movs	r1, #64	; 0x40
 80033c8:	438a      	bics	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	019b      	lsls	r3, r3, #6
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d110      	bne.n	80033fa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	491a      	ldr	r1, [pc, #104]	; (800344c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	0189      	lsls	r1, r1, #6
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	225d      	movs	r2, #93	; 0x5d
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	225c      	movs	r2, #92	; 0x5c
 8003406:	2100      	movs	r1, #0
 8003408:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e017      	b.n	800343e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3b01      	subs	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	425a      	negs	r2, r3
 800342e:	4153      	adcs	r3, r2
 8003430:	b2db      	uxtb	r3, r3
 8003432:	001a      	movs	r2, r3
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d197      	bne.n	800336c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	b008      	add	sp, #32
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	20000054 	.word	0x20000054
 800344c:	ffffdfff 	.word	0xffffdfff

08003450 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800345e:	2317      	movs	r3, #23
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003466:	f7fd fead 	bl	80011c4 <HAL_GetTick>
 800346a:	0002      	movs	r2, r0
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	18d3      	adds	r3, r2, r3
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003476:	f7fd fea5 	bl	80011c4 <HAL_GetTick>
 800347a:	0003      	movs	r3, r0
 800347c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	0013      	movs	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	189b      	adds	r3, r3, r2
 8003490:	00da      	lsls	r2, r3, #3
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	0d1b      	lsrs	r3, r3, #20
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	4353      	muls	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800349c:	e068      	b.n	8003570 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	23c0      	movs	r3, #192	; 0xc0
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d10a      	bne.n	80034be <SPI_WaitFifoStateUntilTimeout+0x6e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d107      	bne.n	80034be <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	2117      	movs	r1, #23
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034ba:	187b      	adds	r3, r7, r1
 80034bc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	d055      	beq.n	8003570 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034c4:	f7fd fe7e 	bl	80011c4 <HAL_GetTick>
 80034c8:	0002      	movs	r2, r0
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d902      	bls.n	80034da <SPI_WaitFifoStateUntilTimeout+0x8a>
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d142      	bne.n	8003560 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	21e0      	movs	r1, #224	; 0xe0
 80034e6:	438a      	bics	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	2382      	movs	r3, #130	; 0x82
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d113      	bne.n	800351e <SPI_WaitFifoStateUntilTimeout+0xce>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	429a      	cmp	r2, r3
 8003500:	d005      	beq.n	800350e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	429a      	cmp	r2, r3
 800350c:	d107      	bne.n	800351e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2140      	movs	r1, #64	; 0x40
 800351a:	438a      	bics	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	429a      	cmp	r2, r3
 8003528:	d110      	bne.n	800354c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4916      	ldr	r1, [pc, #88]	; (8003590 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003536:	400a      	ands	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	0189      	lsls	r1, r1, #6
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	225d      	movs	r2, #93	; 0x5d
 8003550:	2101      	movs	r1, #1
 8003552:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	225c      	movs	r2, #92	; 0x5c
 8003558:	2100      	movs	r1, #0
 800355a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e010      	b.n	8003582 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	3b01      	subs	r3, #1
 800356e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	4013      	ands	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	429a      	cmp	r2, r3
 800357e:	d18e      	bne.n	800349e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b00a      	add	sp, #40	; 0x28
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	20000054 	.word	0x20000054
 8003590:	ffffdfff 	.word	0xffffdfff

08003594 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	2382      	movs	r3, #130	; 0x82
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d113      	bne.n	80035d4 <SPI_EndRxTransaction+0x40>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d005      	beq.n	80035c4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d107      	bne.n	80035d4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2140      	movs	r1, #64	; 0x40
 80035d0:	438a      	bics	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	0013      	movs	r3, r2
 80035de:	2200      	movs	r2, #0
 80035e0:	2180      	movs	r1, #128	; 0x80
 80035e2:	f7ff fea7 	bl	8003334 <SPI_WaitFlagStateUntilTimeout>
 80035e6:	1e03      	subs	r3, r0, #0
 80035e8:	d007      	beq.n	80035fa <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ee:	2220      	movs	r2, #32
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e026      	b.n	8003648 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	2382      	movs	r3, #130	; 0x82
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	429a      	cmp	r2, r3
 8003604:	d11f      	bne.n	8003646 <SPI_EndRxTransaction+0xb2>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	429a      	cmp	r2, r3
 8003610:	d005      	beq.n	800361e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	429a      	cmp	r2, r3
 800361c:	d113      	bne.n	8003646 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	23c0      	movs	r3, #192	; 0xc0
 8003622:	00d9      	lsls	r1, r3, #3
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	0013      	movs	r3, r2
 800362c:	2200      	movs	r2, #0
 800362e:	f7ff ff0f 	bl	8003450 <SPI_WaitFifoStateUntilTimeout>
 8003632:	1e03      	subs	r3, r0, #0
 8003634:	d007      	beq.n	8003646 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	2220      	movs	r2, #32
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e000      	b.n	8003648 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b004      	add	sp, #16
 800364e:	bd80      	pop	{r7, pc}

08003650 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	23c0      	movs	r3, #192	; 0xc0
 8003660:	0159      	lsls	r1, r3, #5
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	0013      	movs	r3, r2
 800366a:	2200      	movs	r2, #0
 800366c:	f7ff fef0 	bl	8003450 <SPI_WaitFifoStateUntilTimeout>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d007      	beq.n	8003684 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003678:	2220      	movs	r2, #32
 800367a:	431a      	orrs	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e027      	b.n	80036d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	0013      	movs	r3, r2
 800368e:	2200      	movs	r2, #0
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	f7ff fe4f 	bl	8003334 <SPI_WaitFlagStateUntilTimeout>
 8003696:	1e03      	subs	r3, r0, #0
 8003698:	d007      	beq.n	80036aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369e:	2220      	movs	r2, #32
 80036a0:	431a      	orrs	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e014      	b.n	80036d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	23c0      	movs	r3, #192	; 0xc0
 80036ae:	00d9      	lsls	r1, r3, #3
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	0013      	movs	r3, r2
 80036b8:	2200      	movs	r2, #0
 80036ba:	f7ff fec9 	bl	8003450 <SPI_WaitFifoStateUntilTimeout>
 80036be:	1e03      	subs	r3, r0, #0
 80036c0:	d007      	beq.n	80036d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	2220      	movs	r2, #32
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e000      	b.n	80036d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e042      	b.n	8003774 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	223d      	movs	r2, #61	; 0x3d
 80036f2:	5c9b      	ldrb	r3, [r3, r2]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	223c      	movs	r2, #60	; 0x3c
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	0018      	movs	r0, r3
 8003706:	f7fd f885 	bl	8000814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	223d      	movs	r2, #61	; 0x3d
 800370e:	2102      	movs	r1, #2
 8003710:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	0019      	movs	r1, r3
 800371c:	0010      	movs	r0, r2
 800371e:	f000 fa37 	bl	8003b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2246      	movs	r2, #70	; 0x46
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	223e      	movs	r2, #62	; 0x3e
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	223f      	movs	r2, #63	; 0x3f
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2241      	movs	r2, #65	; 0x41
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2242      	movs	r2, #66	; 0x42
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2243      	movs	r2, #67	; 0x43
 8003756:	2101      	movs	r1, #1
 8003758:	5499      	strb	r1, [r3, r2]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2244      	movs	r2, #68	; 0x44
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2245      	movs	r2, #69	; 0x45
 8003766:	2101      	movs	r1, #1
 8003768:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	223d      	movs	r2, #61	; 0x3d
 800376e:	2101      	movs	r1, #1
 8003770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2202      	movs	r2, #2
 800378c:	4013      	ands	r3, r2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d124      	bne.n	80037dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2202      	movs	r2, #2
 800379a:	4013      	ands	r3, r2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d11d      	bne.n	80037dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2203      	movs	r2, #3
 80037a6:	4252      	negs	r2, r2
 80037a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2203      	movs	r2, #3
 80037b8:	4013      	ands	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 f9ce 	bl	8003b60 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e007      	b.n	80037d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f000 f9c1 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 f9cd 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2204      	movs	r2, #4
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d125      	bne.n	8003836 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2204      	movs	r2, #4
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11e      	bne.n	8003836 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2205      	movs	r2, #5
 80037fe:	4252      	negs	r2, r2
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	23c0      	movs	r3, #192	; 0xc0
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4013      	ands	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f9a1 	bl	8003b60 <HAL_TIM_IC_CaptureCallback>
 800381e:	e007      	b.n	8003830 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f994 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	0018      	movs	r0, r3
 800382c:	f000 f9a0 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2208      	movs	r2, #8
 800383e:	4013      	ands	r3, r2
 8003840:	2b08      	cmp	r3, #8
 8003842:	d124      	bne.n	800388e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2208      	movs	r2, #8
 800384c:	4013      	ands	r3, r2
 800384e:	2b08      	cmp	r3, #8
 8003850:	d11d      	bne.n	800388e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2209      	movs	r2, #9
 8003858:	4252      	negs	r2, r2
 800385a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2204      	movs	r2, #4
 8003860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	2203      	movs	r2, #3
 800386a:	4013      	ands	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 f975 	bl	8003b60 <HAL_TIM_IC_CaptureCallback>
 8003876:	e007      	b.n	8003888 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	0018      	movs	r0, r3
 800387c:	f000 f968 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	0018      	movs	r0, r3
 8003884:	f000 f974 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2210      	movs	r2, #16
 8003896:	4013      	ands	r3, r2
 8003898:	2b10      	cmp	r3, #16
 800389a:	d125      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2210      	movs	r2, #16
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d11e      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2211      	movs	r2, #17
 80038b0:	4252      	negs	r2, r2
 80038b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2208      	movs	r2, #8
 80038b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	23c0      	movs	r3, #192	; 0xc0
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4013      	ands	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 f948 	bl	8003b60 <HAL_TIM_IC_CaptureCallback>
 80038d0:	e007      	b.n	80038e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f93b 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 f947 	bl	8003b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2201      	movs	r2, #1
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d10f      	bne.n	8003916 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4013      	ands	r3, r2
 8003900:	2b01      	cmp	r3, #1
 8003902:	d108      	bne.n	8003916 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2202      	movs	r2, #2
 800390a:	4252      	negs	r2, r2
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0018      	movs	r0, r3
 8003912:	f7fc fcbd 	bl	8000290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2280      	movs	r2, #128	; 0x80
 800391e:	4013      	ands	r3, r2
 8003920:	2b80      	cmp	r3, #128	; 0x80
 8003922:	d10f      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	4013      	ands	r3, r2
 800392e:	2b80      	cmp	r3, #128	; 0x80
 8003930:	d108      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2281      	movs	r2, #129	; 0x81
 8003938:	4252      	negs	r2, r2
 800393a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	0018      	movs	r0, r3
 8003940:	f000 fa96 	bl	8003e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	4013      	ands	r3, r2
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d10f      	bne.n	8003972 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2240      	movs	r2, #64	; 0x40
 800395a:	4013      	ands	r3, r2
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d108      	bne.n	8003972 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2241      	movs	r2, #65	; 0x41
 8003966:	4252      	negs	r2, r2
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	0018      	movs	r0, r3
 800396e:	f000 f907 	bl	8003b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2220      	movs	r2, #32
 800397a:	4013      	ands	r3, r2
 800397c:	2b20      	cmp	r3, #32
 800397e:	d10f      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	4013      	ands	r3, r2
 800398a:	2b20      	cmp	r3, #32
 800398c:	d108      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2221      	movs	r2, #33	; 0x21
 8003994:	4252      	negs	r2, r2
 8003996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 fa60 	bl	8003e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	230f      	movs	r3, #15
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	223c      	movs	r2, #60	; 0x3c
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_ConfigClockSource+0x20>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e0bc      	b.n	8003b42 <HAL_TIM_ConfigClockSource+0x19a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	223c      	movs	r2, #60	; 0x3c
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	223d      	movs	r2, #61	; 0x3d
 80039d4:	2102      	movs	r1, #2
 80039d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2277      	movs	r2, #119	; 0x77
 80039e4:	4393      	bics	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4a58      	ldr	r2, [pc, #352]	; (8003b4c <HAL_TIM_ConfigClockSource+0x1a4>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2280      	movs	r2, #128	; 0x80
 80039fe:	0192      	lsls	r2, r2, #6
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d040      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0xde>
 8003a04:	2280      	movs	r2, #128	; 0x80
 8003a06:	0192      	lsls	r2, r2, #6
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d900      	bls.n	8003a0e <HAL_TIM_ConfigClockSource+0x66>
 8003a0c:	e088      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	0152      	lsls	r2, r2, #5
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d100      	bne.n	8003a18 <HAL_TIM_ConfigClockSource+0x70>
 8003a16:	e088      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x182>
 8003a18:	2280      	movs	r2, #128	; 0x80
 8003a1a:	0152      	lsls	r2, r2, #5
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d900      	bls.n	8003a22 <HAL_TIM_ConfigClockSource+0x7a>
 8003a20:	e07e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a22:	2b70      	cmp	r3, #112	; 0x70
 8003a24:	d018      	beq.n	8003a58 <HAL_TIM_ConfigClockSource+0xb0>
 8003a26:	d900      	bls.n	8003a2a <HAL_TIM_ConfigClockSource+0x82>
 8003a28:	e07a      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a2a:	2b60      	cmp	r3, #96	; 0x60
 8003a2c:	d04f      	beq.n	8003ace <HAL_TIM_ConfigClockSource+0x126>
 8003a2e:	d900      	bls.n	8003a32 <HAL_TIM_ConfigClockSource+0x8a>
 8003a30:	e076      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a32:	2b50      	cmp	r3, #80	; 0x50
 8003a34:	d03b      	beq.n	8003aae <HAL_TIM_ConfigClockSource+0x106>
 8003a36:	d900      	bls.n	8003a3a <HAL_TIM_ConfigClockSource+0x92>
 8003a38:	e072      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d057      	beq.n	8003aee <HAL_TIM_ConfigClockSource+0x146>
 8003a3e:	d900      	bls.n	8003a42 <HAL_TIM_ConfigClockSource+0x9a>
 8003a40:	e06e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a42:	2b30      	cmp	r3, #48	; 0x30
 8003a44:	d063      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a46:	d86b      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d060      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a4c:	d868      	bhi.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d05d      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d05b      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x166>
 8003a56:	e063      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a68:	f000 f982 	bl	8003d70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2277      	movs	r2, #119	; 0x77
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	609a      	str	r2, [r3, #8]
      break;
 8003a84:	e052      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a96:	f000 f96b 	bl	8003d70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	01c9      	lsls	r1, r1, #7
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
      break;
 8003aac:	e03e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aba:	001a      	movs	r2, r3
 8003abc:	f000 f8de 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2150      	movs	r1, #80	; 0x50
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 f938 	bl	8003d3c <TIM_ITRx_SetConfig>
      break;
 8003acc:	e02e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ada:	001a      	movs	r2, r3
 8003adc:	f000 f8fc 	bl	8003cd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2160      	movs	r1, #96	; 0x60
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 f928 	bl	8003d3c <TIM_ITRx_SetConfig>
      break;
 8003aec:	e01e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	001a      	movs	r2, r3
 8003afc:	f000 f8be 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2140      	movs	r1, #64	; 0x40
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f918 	bl	8003d3c <TIM_ITRx_SetConfig>
      break;
 8003b0c:	e00e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	0019      	movs	r1, r3
 8003b18:	0010      	movs	r0, r2
 8003b1a:	f000 f90f 	bl	8003d3c <TIM_ITRx_SetConfig>
      break;
 8003b1e:	e005      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b20:	230f      	movs	r3, #15
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
      break;
 8003b28:	e000      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b2a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	223d      	movs	r2, #61	; 0x3d
 8003b30:	2101      	movs	r1, #1
 8003b32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	223c      	movs	r2, #60	; 0x3c
 8003b38:	2100      	movs	r1, #0
 8003b3a:	5499      	strb	r1, [r3, r2]

  return status;
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	781b      	ldrb	r3, [r3, #0]
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	ffff00ff 	.word	0xffff00ff

08003b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b002      	add	sp, #8
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a30      	ldr	r2, [pc, #192]	; (8003c64 <TIM_Base_SetConfig+0xd4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d008      	beq.n	8003bba <TIM_Base_SetConfig+0x2a>
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	05db      	lsls	r3, r3, #23
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d003      	beq.n	8003bba <TIM_Base_SetConfig+0x2a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <TIM_Base_SetConfig+0xd8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d108      	bne.n	8003bcc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2270      	movs	r2, #112	; 0x70
 8003bbe:	4393      	bics	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a25      	ldr	r2, [pc, #148]	; (8003c64 <TIM_Base_SetConfig+0xd4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d014      	beq.n	8003bfe <TIM_Base_SetConfig+0x6e>
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	05db      	lsls	r3, r3, #23
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d00f      	beq.n	8003bfe <TIM_Base_SetConfig+0x6e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <TIM_Base_SetConfig+0xd8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00b      	beq.n	8003bfe <TIM_Base_SetConfig+0x6e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <TIM_Base_SetConfig+0xdc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <TIM_Base_SetConfig+0x6e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <TIM_Base_SetConfig+0xe0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_Base_SetConfig+0x6e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <TIM_Base_SetConfig+0xe4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d108      	bne.n	8003c10 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <TIM_Base_SetConfig+0xe8>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	4393      	bics	r3, r2
 8003c16:	001a      	movs	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <TIM_Base_SetConfig+0xd4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <TIM_Base_SetConfig+0xbe>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <TIM_Base_SetConfig+0xe0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_Base_SetConfig+0xbe>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <TIM_Base_SetConfig+0xe4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d103      	bne.n	8003c56 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	615a      	str	r2, [r3, #20]
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b004      	add	sp, #16
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40002000 	.word	0x40002000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	fffffcff 	.word	0xfffffcff

08003c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	2201      	movs	r2, #1
 8003c94:	4393      	bics	r3, r2
 8003c96:	001a      	movs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	22f0      	movs	r2, #240	; 0xf0
 8003ca6:	4393      	bics	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	220a      	movs	r2, #10
 8003cb8:	4393      	bics	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	621a      	str	r2, [r3, #32]
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b006      	add	sp, #24
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	4393      	bics	r3, r2
 8003cec:	001a      	movs	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <TIM_TI2_ConfigInputStage+0x60>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	031b      	lsls	r3, r3, #12
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	22a0      	movs	r2, #160	; 0xa0
 8003d14:	4393      	bics	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b006      	add	sp, #24
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	ffff0fff 	.word	0xffff0fff

08003d3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2270      	movs	r2, #112	; 0x70
 8003d50:	4393      	bics	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	609a      	str	r2, [r3, #8]
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <TIM_ETR_SetConfig+0x3c>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b006      	add	sp, #24
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	ffff00ff 	.word	0xffff00ff

08003db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	223c      	movs	r2, #60	; 0x3c
 8003dbe:	5c9b      	ldrb	r3, [r3, r2]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e042      	b.n	8003e4e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	223c      	movs	r2, #60	; 0x3c
 8003dcc:	2101      	movs	r1, #1
 8003dce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	223d      	movs	r2, #61	; 0x3d
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2270      	movs	r2, #112	; 0x70
 8003dec:	4393      	bics	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00a      	beq.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	05db      	lsls	r3, r3, #23
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d004      	beq.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10c      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	4393      	bics	r3, r2
 8003e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	223d      	movs	r2, #61	; 0x3d
 8003e40:	2101      	movs	r1, #1
 8003e42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	223c      	movs	r2, #60	; 0x3c
 8003e48:	2100      	movs	r1, #0
 8003e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400

08003e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b002      	add	sp, #8
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b002      	add	sp, #8
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e044      	b.n	8003f1c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d107      	bne.n	8003eaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2278      	movs	r2, #120	; 0x78
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7fc fce5 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2224      	movs	r2, #36	; 0x24
 8003eae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2101      	movs	r1, #1
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f000 f8a0 	bl	8004008 <UART_SetConfig>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e024      	b.n	8003f1c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f000 f9bb 	bl	8004258 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	490d      	ldr	r1, [pc, #52]	; (8003f24 <HAL_UART_Init+0xa4>)
 8003eee:	400a      	ands	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	212a      	movs	r1, #42	; 0x2a
 8003efe:	438a      	bics	r2, r1
 8003f00:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	0018      	movs	r0, r3
 8003f16:	f000 fa53 	bl	80043c0 <UART_CheckIdleState>
 8003f1a:	0003      	movs	r3, r0
}
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b002      	add	sp, #8
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	ffffb7ff 	.word	0xffffb7ff

08003f28 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	1dbb      	adds	r3, r7, #6
 8003f34:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d15b      	bne.n	8003ff6 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_UART_Transmit_IT+0x24>
 8003f44:	1dbb      	adds	r3, r7, #6
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e053      	b.n	8003ff8 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	015b      	lsls	r3, r3, #5
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d109      	bne.n	8003f70 <HAL_UART_Transmit_IT+0x48>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2201      	movs	r2, #1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d001      	beq.n	8003f70 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e043      	b.n	8003ff8 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1dba      	adds	r2, r7, #6
 8003f7a:	2150      	movs	r1, #80	; 0x50
 8003f7c:	8812      	ldrh	r2, [r2, #0]
 8003f7e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1dba      	adds	r2, r7, #6
 8003f84:	2152      	movs	r1, #82	; 0x52
 8003f86:	8812      	ldrh	r2, [r2, #0]
 8003f88:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2284      	movs	r2, #132	; 0x84
 8003f94:	2100      	movs	r1, #0
 8003f96:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2221      	movs	r2, #33	; 0x21
 8003f9c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	015b      	lsls	r3, r3, #5
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d107      	bne.n	8003fba <HAL_UART_Transmit_IT+0x92>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <HAL_UART_Transmit_IT+0xd8>)
 8003fb6:	66da      	str	r2, [r3, #108]	; 0x6c
 8003fb8:	e002      	b.n	8003fc0 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a11      	ldr	r2, [pc, #68]	; (8004004 <HAL_UART_Transmit_IT+0xdc>)
 8003fbe:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8003fc6:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	2301      	movs	r3, #1
 8003fcc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f383 8810 	msr	PRIMASK, r3
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f383 8810 	msr	PRIMASK, r3
}
 8003ff0:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
  }
}
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b008      	add	sp, #32
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	08004761 	.word	0x08004761
 8004004:	080046ad 	.word	0x080046ad

08004008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004010:	231e      	movs	r3, #30
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a83      	ldr	r2, [pc, #524]	; (8004244 <UART_SetConfig+0x23c>)
 8004038:	4013      	ands	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a7e      	ldr	r2, [pc, #504]	; (8004248 <UART_SetConfig+0x240>)
 800404e:	4013      	ands	r3, r2
 8004050:	0019      	movs	r1, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a75      	ldr	r2, [pc, #468]	; (800424c <UART_SetConfig+0x244>)
 8004076:	4013      	ands	r3, r2
 8004078:	0019      	movs	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	430a      	orrs	r2, r1
 8004082:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004084:	4b72      	ldr	r3, [pc, #456]	; (8004250 <UART_SetConfig+0x248>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	2203      	movs	r2, #3
 800408a:	4013      	ands	r3, r2
 800408c:	2b03      	cmp	r3, #3
 800408e:	d00d      	beq.n	80040ac <UART_SetConfig+0xa4>
 8004090:	d81b      	bhi.n	80040ca <UART_SetConfig+0xc2>
 8004092:	2b02      	cmp	r3, #2
 8004094:	d014      	beq.n	80040c0 <UART_SetConfig+0xb8>
 8004096:	d818      	bhi.n	80040ca <UART_SetConfig+0xc2>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <UART_SetConfig+0x9a>
 800409c:	2b01      	cmp	r3, #1
 800409e:	d00a      	beq.n	80040b6 <UART_SetConfig+0xae>
 80040a0:	e013      	b.n	80040ca <UART_SetConfig+0xc2>
 80040a2:	231f      	movs	r3, #31
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e012      	b.n	80040d2 <UART_SetConfig+0xca>
 80040ac:	231f      	movs	r3, #31
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	2202      	movs	r2, #2
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e00d      	b.n	80040d2 <UART_SetConfig+0xca>
 80040b6:	231f      	movs	r3, #31
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	2204      	movs	r2, #4
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e008      	b.n	80040d2 <UART_SetConfig+0xca>
 80040c0:	231f      	movs	r3, #31
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2208      	movs	r2, #8
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e003      	b.n	80040d2 <UART_SetConfig+0xca>
 80040ca:	231f      	movs	r3, #31
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	2210      	movs	r2, #16
 80040d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69da      	ldr	r2, [r3, #28]
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	429a      	cmp	r2, r3
 80040dc:	d15c      	bne.n	8004198 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 80040de:	231f      	movs	r3, #31
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d015      	beq.n	8004114 <UART_SetConfig+0x10c>
 80040e8:	dc18      	bgt.n	800411c <UART_SetConfig+0x114>
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d00d      	beq.n	800410a <UART_SetConfig+0x102>
 80040ee:	dc15      	bgt.n	800411c <UART_SetConfig+0x114>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <UART_SetConfig+0xf2>
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d005      	beq.n	8004104 <UART_SetConfig+0xfc>
 80040f8:	e010      	b.n	800411c <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040fa:	f7fd ff5f 	bl	8001fbc <HAL_RCC_GetPCLK1Freq>
 80040fe:	0003      	movs	r3, r0
 8004100:	61bb      	str	r3, [r7, #24]
        break;
 8004102:	e012      	b.n	800412a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004104:	4b53      	ldr	r3, [pc, #332]	; (8004254 <UART_SetConfig+0x24c>)
 8004106:	61bb      	str	r3, [r7, #24]
        break;
 8004108:	e00f      	b.n	800412a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410a:	f7fd fef7 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 800410e:	0003      	movs	r3, r0
 8004110:	61bb      	str	r3, [r7, #24]
        break;
 8004112:	e00a      	b.n	800412a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	61bb      	str	r3, [r7, #24]
        break;
 800411a:	e006      	b.n	800412a <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004120:	231e      	movs	r3, #30
 8004122:	18fb      	adds	r3, r7, r3
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
        break;
 8004128:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d100      	bne.n	8004132 <UART_SetConfig+0x12a>
 8004130:	e07a      	b.n	8004228 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	005a      	lsls	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	18d2      	adds	r2, r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	0019      	movs	r1, r3
 8004144:	0010      	movs	r0, r2
 8004146:	f7fb ffdf 	bl	8000108 <__udivsi3>
 800414a:	0003      	movs	r3, r0
 800414c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b0f      	cmp	r3, #15
 8004152:	d91c      	bls.n	800418e <UART_SetConfig+0x186>
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	025b      	lsls	r3, r3, #9
 800415a:	429a      	cmp	r2, r3
 800415c:	d217      	bcs.n	800418e <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	b29a      	uxth	r2, r3
 8004162:	200e      	movs	r0, #14
 8004164:	183b      	adds	r3, r7, r0
 8004166:	210f      	movs	r1, #15
 8004168:	438a      	bics	r2, r1
 800416a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	b29b      	uxth	r3, r3
 8004172:	2207      	movs	r2, #7
 8004174:	4013      	ands	r3, r2
 8004176:	b299      	uxth	r1, r3
 8004178:	183b      	adds	r3, r7, r0
 800417a:	183a      	adds	r2, r7, r0
 800417c:	8812      	ldrh	r2, [r2, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	183a      	adds	r2, r7, r0
 8004188:	8812      	ldrh	r2, [r2, #0]
 800418a:	60da      	str	r2, [r3, #12]
 800418c:	e04c      	b.n	8004228 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 800418e:	231e      	movs	r3, #30
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e047      	b.n	8004228 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004198:	231f      	movs	r3, #31
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d015      	beq.n	80041ce <UART_SetConfig+0x1c6>
 80041a2:	dc18      	bgt.n	80041d6 <UART_SetConfig+0x1ce>
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d00d      	beq.n	80041c4 <UART_SetConfig+0x1bc>
 80041a8:	dc15      	bgt.n	80041d6 <UART_SetConfig+0x1ce>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <UART_SetConfig+0x1ac>
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d005      	beq.n	80041be <UART_SetConfig+0x1b6>
 80041b2:	e010      	b.n	80041d6 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b4:	f7fd ff02 	bl	8001fbc <HAL_RCC_GetPCLK1Freq>
 80041b8:	0003      	movs	r3, r0
 80041ba:	61bb      	str	r3, [r7, #24]
        break;
 80041bc:	e012      	b.n	80041e4 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041be:	4b25      	ldr	r3, [pc, #148]	; (8004254 <UART_SetConfig+0x24c>)
 80041c0:	61bb      	str	r3, [r7, #24]
        break;
 80041c2:	e00f      	b.n	80041e4 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c4:	f7fd fe9a 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 80041c8:	0003      	movs	r3, r0
 80041ca:	61bb      	str	r3, [r7, #24]
        break;
 80041cc:	e00a      	b.n	80041e4 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	61bb      	str	r3, [r7, #24]
        break;
 80041d4:	e006      	b.n	80041e4 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041da:	231e      	movs	r3, #30
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
        break;
 80041e2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01e      	beq.n	8004228 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	085a      	lsrs	r2, r3, #1
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	18d2      	adds	r2, r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	0019      	movs	r1, r3
 80041fa:	0010      	movs	r0, r2
 80041fc:	f7fb ff84 	bl	8000108 <__udivsi3>
 8004200:	0003      	movs	r3, r0
 8004202:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	d90a      	bls.n	8004220 <UART_SetConfig+0x218>
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	025b      	lsls	r3, r3, #9
 8004210:	429a      	cmp	r2, r3
 8004212:	d205      	bcs.n	8004220 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	e003      	b.n	8004228 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004220:	231e      	movs	r3, #30
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004234:	231e      	movs	r3, #30
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	781b      	ldrb	r3, [r3, #0]
}
 800423a:	0018      	movs	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	b008      	add	sp, #32
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	ffff69f3 	.word	0xffff69f3
 8004248:	ffffcfff 	.word	0xffffcfff
 800424c:	fffff4ff 	.word	0xfffff4ff
 8004250:	40021000 	.word	0x40021000
 8004254:	007a1200 	.word	0x007a1200

08004258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2201      	movs	r2, #1
 8004266:	4013      	ands	r3, r2
 8004268:	d00b      	beq.n	8004282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a4a      	ldr	r2, [pc, #296]	; (800439c <UART_AdvFeatureConfig+0x144>)
 8004272:	4013      	ands	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2202      	movs	r2, #2
 8004288:	4013      	ands	r3, r2
 800428a:	d00b      	beq.n	80042a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4a43      	ldr	r2, [pc, #268]	; (80043a0 <UART_AdvFeatureConfig+0x148>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	2204      	movs	r2, #4
 80042aa:	4013      	ands	r3, r2
 80042ac:	d00b      	beq.n	80042c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a3b      	ldr	r2, [pc, #236]	; (80043a4 <UART_AdvFeatureConfig+0x14c>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	0019      	movs	r1, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2208      	movs	r2, #8
 80042cc:	4013      	ands	r3, r2
 80042ce:	d00b      	beq.n	80042e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4a34      	ldr	r2, [pc, #208]	; (80043a8 <UART_AdvFeatureConfig+0x150>)
 80042d8:	4013      	ands	r3, r2
 80042da:	0019      	movs	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2210      	movs	r2, #16
 80042ee:	4013      	ands	r3, r2
 80042f0:	d00b      	beq.n	800430a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4a2c      	ldr	r2, [pc, #176]	; (80043ac <UART_AdvFeatureConfig+0x154>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	2220      	movs	r2, #32
 8004310:	4013      	ands	r3, r2
 8004312:	d00b      	beq.n	800432c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <UART_AdvFeatureConfig+0x158>)
 800431c:	4013      	ands	r3, r2
 800431e:	0019      	movs	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	2240      	movs	r2, #64	; 0x40
 8004332:	4013      	ands	r3, r2
 8004334:	d01d      	beq.n	8004372 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <UART_AdvFeatureConfig+0x15c>)
 800433e:	4013      	ands	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	035b      	lsls	r3, r3, #13
 8004356:	429a      	cmp	r2, r3
 8004358:	d10b      	bne.n	8004372 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <UART_AdvFeatureConfig+0x160>)
 8004362:	4013      	ands	r3, r2
 8004364:	0019      	movs	r1, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	4013      	ands	r3, r2
 800437a:	d00b      	beq.n	8004394 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <UART_AdvFeatureConfig+0x164>)
 8004384:	4013      	ands	r3, r2
 8004386:	0019      	movs	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]
  }
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b002      	add	sp, #8
 800439a:	bd80      	pop	{r7, pc}
 800439c:	fffdffff 	.word	0xfffdffff
 80043a0:	fffeffff 	.word	0xfffeffff
 80043a4:	fffbffff 	.word	0xfffbffff
 80043a8:	ffff7fff 	.word	0xffff7fff
 80043ac:	ffffefff 	.word	0xffffefff
 80043b0:	ffffdfff 	.word	0xffffdfff
 80043b4:	ffefffff 	.word	0xffefffff
 80043b8:	ff9fffff 	.word	0xff9fffff
 80043bc:	fff7ffff 	.word	0xfff7ffff

080043c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b092      	sub	sp, #72	; 0x48
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2284      	movs	r2, #132	; 0x84
 80043cc:	2100      	movs	r1, #0
 80043ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043d0:	f7fc fef8 	bl	80011c4 <HAL_GetTick>
 80043d4:	0003      	movs	r3, r0
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2208      	movs	r2, #8
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d12c      	bne.n	8004440 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e8:	2280      	movs	r2, #128	; 0x80
 80043ea:	0391      	lsls	r1, r2, #14
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4a46      	ldr	r2, [pc, #280]	; (8004508 <UART_CheckIdleState+0x148>)
 80043f0:	9200      	str	r2, [sp, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f000 f88c 	bl	8004510 <UART_WaitOnFlagUntilTimeout>
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	d021      	beq.n	8004440 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
 8004406:	2301      	movs	r3, #1
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	f383 8810 	msr	PRIMASK, r3
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2180      	movs	r1, #128	; 0x80
 800441e:	438a      	bics	r2, r1
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2278      	movs	r2, #120	; 0x78
 8004438:	2100      	movs	r1, #0
 800443a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e05f      	b.n	8004500 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2204      	movs	r2, #4
 8004448:	4013      	ands	r3, r2
 800444a:	2b04      	cmp	r3, #4
 800444c:	d146      	bne.n	80044dc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800444e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004450:	2280      	movs	r2, #128	; 0x80
 8004452:	03d1      	lsls	r1, r2, #15
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4a2c      	ldr	r2, [pc, #176]	; (8004508 <UART_CheckIdleState+0x148>)
 8004458:	9200      	str	r2, [sp, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	f000 f858 	bl	8004510 <UART_WaitOnFlagUntilTimeout>
 8004460:	1e03      	subs	r3, r0, #0
 8004462:	d03b      	beq.n	80044dc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004464:	f3ef 8310 	mrs	r3, PRIMASK
 8004468:	60fb      	str	r3, [r7, #12]
  return(result);
 800446a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
 800446e:	2301      	movs	r3, #1
 8004470:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			; (mov r8, r8)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4921      	ldr	r1, [pc, #132]	; (800450c <UART_CheckIdleState+0x14c>)
 8004486:	400a      	ands	r2, r1
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f383 8810 	msr	PRIMASK, r3
}
 8004494:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004496:	f3ef 8310 	mrs	r3, PRIMASK
 800449a:	61bb      	str	r3, [r7, #24]
  return(result);
 800449c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
 80044a0:	2301      	movs	r3, #1
 80044a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f383 8810 	msr	PRIMASK, r3
}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2101      	movs	r1, #1
 80044b8:	438a      	bics	r2, r1
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f383 8810 	msr	PRIMASK, r3
}
 80044c6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2280      	movs	r2, #128	; 0x80
 80044cc:	2120      	movs	r1, #32
 80044ce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2278      	movs	r2, #120	; 0x78
 80044d4:	2100      	movs	r1, #0
 80044d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e011      	b.n	8004500 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	2120      	movs	r1, #32
 80044e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2278      	movs	r2, #120	; 0x78
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b010      	add	sp, #64	; 0x40
 8004506:	bd80      	pop	{r7, pc}
 8004508:	01ffffff 	.word	0x01ffffff
 800450c:	fffffedf 	.word	0xfffffedf

08004510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	1dfb      	adds	r3, r7, #7
 800451e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004520:	e04b      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	3301      	adds	r3, #1
 8004526:	d048      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004528:	f7fc fe4c 	bl	80011c4 <HAL_GetTick>
 800452c:	0002      	movs	r2, r0
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e04b      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2204      	movs	r2, #4
 800454a:	4013      	ands	r3, r2
 800454c:	d035      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	2208      	movs	r2, #8
 8004556:	4013      	ands	r3, r2
 8004558:	2b08      	cmp	r3, #8
 800455a:	d111      	bne.n	8004580 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2208      	movs	r2, #8
 8004562:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	0018      	movs	r0, r3
 8004568:	f000 f83c 	bl	80045e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2284      	movs	r2, #132	; 0x84
 8004570:	2108      	movs	r1, #8
 8004572:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2278      	movs	r2, #120	; 0x78
 8004578:	2100      	movs	r1, #0
 800457a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e02c      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	401a      	ands	r2, r3
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	429a      	cmp	r2, r3
 8004592:	d112      	bne.n	80045ba <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2280      	movs	r2, #128	; 0x80
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 f81f 	bl	80045e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2284      	movs	r2, #132	; 0x84
 80045aa:	2120      	movs	r1, #32
 80045ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2278      	movs	r2, #120	; 0x78
 80045b2:	2100      	movs	r1, #0
 80045b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e00f      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	425a      	negs	r2, r3
 80045ca:	4153      	adcs	r3, r2
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	001a      	movs	r2, r3
 80045d0:	1dfb      	adds	r3, r7, #7
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d0a4      	beq.n	8004522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b004      	add	sp, #16
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08e      	sub	sp, #56	; 0x38
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ec:	f3ef 8310 	mrs	r3, PRIMASK
 80045f0:	617b      	str	r3, [r7, #20]
  return(result);
 80045f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f4:	637b      	str	r3, [r7, #52]	; 0x34
 80045f6:	2301      	movs	r3, #1
 80045f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f383 8810 	msr	PRIMASK, r3
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4926      	ldr	r1, [pc, #152]	; (80046a8 <UART_EndRxTransfer+0xc4>)
 800460e:	400a      	ands	r2, r1
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f383 8810 	msr	PRIMASK, r3
}
 800461c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461e:	f3ef 8310 	mrs	r3, PRIMASK
 8004622:	623b      	str	r3, [r7, #32]
  return(result);
 8004624:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
 8004628:	2301      	movs	r3, #1
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f383 8810 	msr	PRIMASK, r3
}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2101      	movs	r1, #1
 8004640:	438a      	bics	r2, r1
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	f383 8810 	msr	PRIMASK, r3
}
 800464e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004654:	2b01      	cmp	r3, #1
 8004656:	d118      	bne.n	800468a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8310 	mrs	r3, PRIMASK
 800465c:	60bb      	str	r3, [r7, #8]
  return(result);
 800465e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004662:	2301      	movs	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2110      	movs	r1, #16
 800467a:	438a      	bics	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2280      	movs	r2, #128	; 0x80
 800468e:	2120      	movs	r1, #32
 8004690:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b00e      	add	sp, #56	; 0x38
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	fffffedf 	.word	0xfffffedf

080046ac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b8:	2b21      	cmp	r3, #33	; 0x21
 80046ba:	d14d      	bne.n	8004758 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2252      	movs	r2, #82	; 0x52
 80046c0:	5a9b      	ldrh	r3, [r3, r2]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d132      	bne.n	800472e <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c8:	f3ef 8310 	mrs	r3, PRIMASK
 80046cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ce:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	2301      	movs	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f383 8810 	msr	PRIMASK, r3
}
 80046dc:	46c0      	nop			; (mov r8, r8)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2180      	movs	r1, #128	; 0x80
 80046ea:	438a      	bics	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f383 8810 	msr	PRIMASK, r3
}
 80046f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fa:	f3ef 8310 	mrs	r3, PRIMASK
 80046fe:	617b      	str	r3, [r7, #20]
  return(result);
 8004700:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004702:	623b      	str	r3, [r7, #32]
 8004704:	2301      	movs	r3, #1
 8004706:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2140      	movs	r1, #64	; 0x40
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f383 8810 	msr	PRIMASK, r3
}
 800472a:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800472c:	e014      	b.n	8004758 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	b292      	uxth	r2, r2
 800473a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2252      	movs	r2, #82	; 0x52
 800474a:	5a9b      	ldrh	r3, [r3, r2]
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b299      	uxth	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2252      	movs	r2, #82	; 0x52
 8004756:	5299      	strh	r1, [r3, r2]
}
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	46bd      	mov	sp, r7
 800475c:	b00a      	add	sp, #40	; 0x28
 800475e:	bd80      	pop	{r7, pc}

08004760 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08c      	sub	sp, #48	; 0x30
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800476c:	2b21      	cmp	r3, #33	; 0x21
 800476e:	d151      	bne.n	8004814 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2252      	movs	r2, #82	; 0x52
 8004774:	5a9b      	ldrh	r3, [r3, r2]
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d132      	bne.n	80047e2 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477c:	f3ef 8310 	mrs	r3, PRIMASK
 8004780:	60fb      	str	r3, [r7, #12]
  return(result);
 8004782:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
 8004786:	2301      	movs	r3, #1
 8004788:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f383 8810 	msr	PRIMASK, r3
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	438a      	bics	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f383 8810 	msr	PRIMASK, r3
}
 80047ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ae:	f3ef 8310 	mrs	r3, PRIMASK
 80047b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80047b4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
 80047b8:	2301      	movs	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2140      	movs	r1, #64	; 0x40
 80047d0:	430a      	orrs	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f383 8810 	msr	PRIMASK, r3
}
 80047de:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80047e0:	e018      	b.n	8004814 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	881a      	ldrh	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	05d2      	lsls	r2, r2, #23
 80047f2:	0dd2      	lsrs	r2, r2, #23
 80047f4:	b292      	uxth	r2, r2
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fc:	1c9a      	adds	r2, r3, #2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2252      	movs	r2, #82	; 0x52
 8004806:	5a9b      	ldrh	r3, [r3, r2]
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b299      	uxth	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2252      	movs	r2, #82	; 0x52
 8004812:	5299      	strh	r1, [r3, r2]
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b00c      	add	sp, #48	; 0x30
 800481a:	bd80      	pop	{r7, pc}

0800481c <memset>:
 800481c:	0003      	movs	r3, r0
 800481e:	1882      	adds	r2, r0, r2
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	7019      	strb	r1, [r3, #0]
 8004828:	3301      	adds	r3, #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <__libc_init_array>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	2600      	movs	r6, #0
 8004830:	4c0c      	ldr	r4, [pc, #48]	; (8004864 <__libc_init_array+0x38>)
 8004832:	4d0d      	ldr	r5, [pc, #52]	; (8004868 <__libc_init_array+0x3c>)
 8004834:	1b64      	subs	r4, r4, r5
 8004836:	10a4      	asrs	r4, r4, #2
 8004838:	42a6      	cmp	r6, r4
 800483a:	d109      	bne.n	8004850 <__libc_init_array+0x24>
 800483c:	2600      	movs	r6, #0
 800483e:	f000 f823 	bl	8004888 <_init>
 8004842:	4c0a      	ldr	r4, [pc, #40]	; (800486c <__libc_init_array+0x40>)
 8004844:	4d0a      	ldr	r5, [pc, #40]	; (8004870 <__libc_init_array+0x44>)
 8004846:	1b64      	subs	r4, r4, r5
 8004848:	10a4      	asrs	r4, r4, #2
 800484a:	42a6      	cmp	r6, r4
 800484c:	d105      	bne.n	800485a <__libc_init_array+0x2e>
 800484e:	bd70      	pop	{r4, r5, r6, pc}
 8004850:	00b3      	lsls	r3, r6, #2
 8004852:	58eb      	ldr	r3, [r5, r3]
 8004854:	4798      	blx	r3
 8004856:	3601      	adds	r6, #1
 8004858:	e7ee      	b.n	8004838 <__libc_init_array+0xc>
 800485a:	00b3      	lsls	r3, r6, #2
 800485c:	58eb      	ldr	r3, [r5, r3]
 800485e:	4798      	blx	r3
 8004860:	3601      	adds	r6, #1
 8004862:	e7f2      	b.n	800484a <__libc_init_array+0x1e>
 8004864:	080048d8 	.word	0x080048d8
 8004868:	080048d8 	.word	0x080048d8
 800486c:	080048dc 	.word	0x080048dc
 8004870:	080048d8 	.word	0x080048d8

08004874 <memcpy>:
 8004874:	2300      	movs	r3, #0
 8004876:	b510      	push	{r4, lr}
 8004878:	429a      	cmp	r2, r3
 800487a:	d100      	bne.n	800487e <memcpy+0xa>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	5ccc      	ldrb	r4, [r1, r3]
 8004880:	54c4      	strb	r4, [r0, r3]
 8004882:	3301      	adds	r3, #1
 8004884:	e7f8      	b.n	8004878 <memcpy+0x4>
	...

08004888 <_init>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr

08004894 <_fini>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr
