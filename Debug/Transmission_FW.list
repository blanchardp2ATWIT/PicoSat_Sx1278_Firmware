
Transmission_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e90  08004e90  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08004e90  08004e90  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e90  08004e90  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08004e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000034  08004ecc  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004ecc  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012190  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025ec  00000000  00000000  0003222f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c62  00000000  00000000  000357d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013831  00000000  00000000  0003643a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013369  00000000  00000000  00049c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00073f3a  00000000  00000000  0005cfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038f0  00000000  00000000  000d0f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d4800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e40 	.word	0x08004e40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	08004e40 	.word	0x08004e40

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <tmp_rx>:
		uart_buffer.buffer_ready = 1;
	}
}

void tmp_rx(radio *r, SPI_HandleTypeDef *hspi)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
	r->sx_state = RECEIVER;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2270      	movs	r2, #112	; 0x70
 800023e:	2105      	movs	r1, #5
 8000240:	5499      	strb	r1, [r3, r2]
}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}

0800024a <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
//	tmp_tx(&r, &hspi1, data, sizeof(data));
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <sx1278_initializtation>:

void sx1278_initializtation(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	  sx1278_init(&r, &hspi1);
 8000260:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <sx1278_initializtation+0x48>)
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <sx1278_initializtation+0x4c>)
 8000264:	0011      	movs	r1, r2
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fd0b 	bl	8000c82 <sx1278_init>
	  r.huart = &huart1;
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <sx1278_initializtation+0x4c>)
 800026e:	21fc      	movs	r1, #252	; 0xfc
 8000270:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <sx1278_initializtation+0x50>)
 8000272:	505a      	str	r2, [r3, r1]
	  HAL_TIM_Base_Init(&htim1);
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <sx1278_initializtation+0x54>)
 8000276:	0018      	movs	r0, r3
 8000278:	f003 fa58 	bl	800372c <HAL_TIM_Base_Init>
	  uart_buffer.buffer_len = 0;
	  uart_buffer.buffer_ready = 0;
	  HAL_UART_Receive_IT(&huart1, &uart_buffer.buffer[0], 1);
#endif
#ifdef RECEIVER_MODULE
	  HAL_UART_Transmit(&huart1, rx_mesg, strlen((char*)rx_mesg), 100);
 800027c:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <sx1278_initializtation+0x58>)
 800027e:	0018      	movs	r0, r3
 8000280:	f7ff ff42 	bl	8000108 <strlen>
 8000284:	0003      	movs	r3, r0
 8000286:	b29a      	uxth	r2, r3
 8000288:	490a      	ldr	r1, [pc, #40]	; (80002b4 <sx1278_initializtation+0x58>)
 800028a:	4808      	ldr	r0, [pc, #32]	; (80002ac <sx1278_initializtation+0x50>)
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	f003 fe73 	bl	8003f78 <HAL_UART_Transmit>
	  tmp_rx(&r, &hspi1);
 8000292:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <sx1278_initializtation+0x48>)
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <sx1278_initializtation+0x4c>)
 8000296:	0011      	movs	r1, r2
 8000298:	0018      	movs	r0, r3
 800029a:	f7ff ffc9 	bl	8000230 <tmp_rx>
#endif
}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000070 	.word	0x20000070
 80002a8:	200001a4 	.word	0x200001a4
 80002ac:	2000011c 	.word	0x2000011c
 80002b0:	200000d4 	.word	0x200000d4
 80002b4:	20000000 	.word	0x20000000

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002bc:	f000 ff18 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c0:	f000 f818 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c4:	f000 f99e 	bl	8000604 <MX_GPIO_Init>
  MX_RTC_Init();
 80002c8:	f000 f874 	bl	80003b4 <MX_RTC_Init>
  MX_SPI1_Init();
 80002cc:	f000 f8d4 	bl	8000478 <MX_SPI1_Init>
  MX_TIM1_Init();
 80002d0:	f000 f910 	bl	80004f4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80002d4:	f000 f966 	bl	80005a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  sx1278_initializtation();
 80002d8:	f7ff ffc0 	bl	800025c <sx1278_initializtation>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SX1278_APP(&r, &hspi1);
 80002dc:	4a03      	ldr	r2, [pc, #12]	; (80002ec <main+0x34>)
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <main+0x38>)
 80002e0:	0011      	movs	r1, r2
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 fdfa 	bl	8000edc <SX1278_APP>
 80002e8:	e7f8      	b.n	80002dc <main+0x24>
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	20000070 	.word	0x20000070
 80002f0:	200001a4 	.word	0x200001a4

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b095      	sub	sp, #84	; 0x54
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	2420      	movs	r4, #32
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	0018      	movs	r0, r3
 8000300:	2330      	movs	r3, #48	; 0x30
 8000302:	001a      	movs	r2, r3
 8000304:	2100      	movs	r1, #0
 8000306:	f004 fd6f 	bl	8004de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030a:	2310      	movs	r3, #16
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	0018      	movs	r0, r3
 8000310:	2310      	movs	r3, #16
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f004 fd67 	bl	8004de8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031a:	003b      	movs	r3, r7
 800031c:	0018      	movs	r0, r3
 800031e:	2310      	movs	r3, #16
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f004 fd60 	bl	8004de8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000328:	0021      	movs	r1, r4
 800032a:	187b      	adds	r3, r7, r1
 800032c:	220a      	movs	r2, #10
 800032e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2201      	movs	r2, #1
 8000334:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2210      	movs	r2, #16
 800033a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2201      	movs	r2, #1
 8000340:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000348:	187b      	adds	r3, r7, r1
 800034a:	0018      	movs	r0, r3
 800034c:	f001 fa16 	bl	800177c <HAL_RCC_OscConfig>
 8000350:	1e03      	subs	r3, r0, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000354:	f000 f9b8 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	2110      	movs	r1, #16
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2207      	movs	r2, #7
 800035e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2100      	movs	r1, #0
 8000376:	0018      	movs	r0, r3
 8000378:	f001 fd1a 	bl	8001db0 <HAL_RCC_ClockConfig>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000380:	f000 f9a2 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8000384:	003b      	movs	r3, r7
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SystemClock_Config+0xbc>)
 8000388:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800038a:	003b      	movs	r3, r7
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000390:	003b      	movs	r3, r7
 8000392:	2280      	movs	r2, #128	; 0x80
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000398:	003b      	movs	r3, r7
 800039a:	0018      	movs	r0, r3
 800039c:	f001 fe4c 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003a4:	f000 f990 	bl	80006c8 <Error_Handler>
  }
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b015      	add	sp, #84	; 0x54
 80003ae:	bd90      	pop	{r4, r7, pc}
 80003b0:	00010001 	.word	0x00010001

080003b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	0018      	movs	r0, r3
 80003be:	2314      	movs	r3, #20
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f004 fd10 	bl	8004de8 <memset>
  RTC_DateTypeDef sDate = {0};
 80003c8:	003b      	movs	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003ce:	4b28      	ldr	r3, [pc, #160]	; (8000470 <MX_RTC_Init+0xbc>)
 80003d0:	4a28      	ldr	r2, [pc, #160]	; (8000474 <MX_RTC_Init+0xc0>)
 80003d2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003d4:	4b26      	ldr	r3, [pc, #152]	; (8000470 <MX_RTC_Init+0xbc>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003da:	4b25      	ldr	r3, [pc, #148]	; (8000470 <MX_RTC_Init+0xbc>)
 80003dc:	227f      	movs	r2, #127	; 0x7f
 80003de:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003e0:	4b23      	ldr	r3, [pc, #140]	; (8000470 <MX_RTC_Init+0xbc>)
 80003e2:	22ff      	movs	r2, #255	; 0xff
 80003e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MX_RTC_Init+0xbc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003ec:	4b20      	ldr	r3, [pc, #128]	; (8000470 <MX_RTC_Init+0xbc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_RTC_Init+0xbc>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <MX_RTC_Init+0xbc>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 feea 	bl	80021d4 <HAL_RTC_Init>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000404:	f000 f960 	bl	80006c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2200      	movs	r2, #0
 8000412:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000426:	1d39      	adds	r1, r7, #4
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_RTC_Init+0xbc>)
 800042a:	2201      	movs	r2, #1
 800042c:	0018      	movs	r0, r3
 800042e:	f001 ff69 	bl	8002304 <HAL_RTC_SetTime>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8000436:	f000 f947 	bl	80006c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800043a:	003b      	movs	r3, r7
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000440:	003b      	movs	r3, r7
 8000442:	2201      	movs	r2, #1
 8000444:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000446:	003b      	movs	r3, r7
 8000448:	2201      	movs	r2, #1
 800044a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800044c:	003b      	movs	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000452:	0039      	movs	r1, r7
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_RTC_Init+0xbc>)
 8000456:	2201      	movs	r2, #1
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fff9 	bl	8002450 <HAL_RTC_SetDate>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 8000462:	f000 f931 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b006      	add	sp, #24
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	20000050 	.word	0x20000050
 8000474:	40002800 	.word	0x40002800

08000478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_SPI1_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <MX_SPI1_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_SPI1_Init+0x74>)
 8000484:	2282      	movs	r2, #130	; 0x82
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_SPI1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <MX_SPI1_Init+0x74>)
 8000492:	22e0      	movs	r2, #224	; 0xe0
 8000494:	00d2      	lsls	r2, r2, #3
 8000496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_SPI1_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_SPI1_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_SPI1_Init+0x74>)
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_SPI1_Init+0x74>)
 80004ae:	2208      	movs	r2, #8
 80004b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_SPI1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_SPI1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_SPI1_Init+0x74>)
 80004c6:	2207      	movs	r2, #7
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_SPI1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_SPI1_Init+0x74>)
 80004d2:	2208      	movs	r2, #8
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <MX_SPI1_Init+0x74>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f002 f8ff 	bl	80026dc <HAL_SPI_Init>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f8f1 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000070 	.word	0x20000070
 80004f0:	40013000 	.word	0x40013000

080004f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004fa:	2308      	movs	r3, #8
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	0018      	movs	r0, r3
 8000500:	2310      	movs	r3, #16
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f004 fc6f 	bl	8004de8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050a:	003b      	movs	r3, r7
 800050c:	0018      	movs	r0, r3
 800050e:	2308      	movs	r3, #8
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f004 fc68 	bl	8004de8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_TIM1_Init+0xa4>)
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_TIM1_Init+0xa8>)
 800051c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_TIM1_Init+0xa4>)
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_TIM1_Init+0xa4>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_TIM1_Init+0xa4>)
 800052c:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <MX_TIM1_Init+0xac>)
 800052e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000530:	4b19      	ldr	r3, [pc, #100]	; (8000598 <MX_TIM1_Init+0xa4>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_TIM1_Init+0xa4>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_TIM1_Init+0xa4>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_TIM1_Init+0xa4>)
 8000544:	0018      	movs	r0, r3
 8000546:	f003 f8f1 	bl	800372c <HAL_TIM_Base_Init>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800054e:	f000 f8bb 	bl	80006c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000552:	2108      	movs	r1, #8
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	0152      	lsls	r2, r2, #5
 800055a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800055c:	187a      	adds	r2, r7, r1
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_TIM1_Init+0xa4>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f003 fa48 	bl	80039f8 <HAL_TIM_ConfigClockSource>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800056c:	f000 f8ac 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000576:	003b      	movs	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800057c:	003a      	movs	r2, r7
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_TIM1_Init+0xa4>)
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f003 fc3c 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800058c:	f000 f89c 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b006      	add	sp, #24
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000d4 	.word	0x200000d4
 800059c:	40012c00 	.word	0x40012c00
 80005a0:	0000ffff 	.word	0x0000ffff

080005a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <MX_USART1_UART_Init+0x5c>)
 80005ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005b0:	22e1      	movs	r2, #225	; 0xe1
 80005b2:	0252      	lsls	r2, r2, #9
 80005b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <MX_USART1_UART_Init+0x58>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f003 fc71 	bl	8003ed0 <HAL_UART_Init>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80005f2:	f000 f869 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000011c 	.word	0x2000011c
 8000600:	40013800 	.word	0x40013800

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b089      	sub	sp, #36	; 0x24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	240c      	movs	r4, #12
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2314      	movs	r3, #20
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f004 fbe7 	bl	8004de8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <MX_GPIO_Init+0xbc>)
 800061c:	695a      	ldr	r2, [r3, #20]
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_GPIO_Init+0xbc>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0289      	lsls	r1, r1, #10
 8000624:	430a      	orrs	r2, r1
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <MX_GPIO_Init+0xbc>)
 800062a:	695a      	ldr	r2, [r3, #20]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	029b      	lsls	r3, r3, #10
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_GPIO_Init+0xbc>)
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_GPIO_Init+0xbc>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	02c9      	lsls	r1, r1, #11
 8000640:	430a      	orrs	r2, r1
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_GPIO_Init+0xbc>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	02db      	lsls	r3, r3, #11
 800064c:	4013      	ands	r3, r2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000652:	2390      	movs	r3, #144	; 0x90
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2200      	movs	r2, #0
 8000658:	2110      	movs	r1, #16
 800065a:	0018      	movs	r0, r3
 800065c:	f001 f870 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_GPIO_Init+0xc0>)
 8000662:	2200      	movs	r2, #0
 8000664:	2108      	movs	r1, #8
 8000666:	0018      	movs	r0, r3
 8000668:	f001 f86a 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2210      	movs	r2, #16
 8000670:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2201      	movs	r2, #1
 8000676:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	193a      	adds	r2, r7, r4
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 feef 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000692:	0021      	movs	r1, r4
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2208      	movs	r2, #8
 8000698:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2201      	movs	r2, #1
 800069e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <MX_GPIO_Init+0xc0>)
 80006b0:	0019      	movs	r1, r3
 80006b2:	0010      	movs	r0, r2
 80006b4:	f000 fedc 	bl	8001470 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000400 	.word	0x48000400

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	699a      	ldr	r2, [r3, #24]
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	2101      	movs	r1, #1
 80006e2:	430a      	orrs	r2, r1
 80006e4:	619a      	str	r2, [r3, #24]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4013      	ands	r3, r2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	69da      	ldr	r2, [r3, #28]
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	0549      	lsls	r1, r1, #21
 80006fc:	430a      	orrs	r2, r1
 80006fe:	61da      	str	r2, [r3, #28]
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_MspInit+0x44>)
 8000702:	69da      	ldr	r2, [r3, #28]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	055b      	lsls	r3, r3, #21
 8000708:	4013      	ands	r3, r2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a06      	ldr	r2, [pc, #24]	; (8000744 <HAL_RTC_MspInit+0x28>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_RTC_MspInit+0x2c>)
 8000730:	6a1a      	ldr	r2, [r3, #32]
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_RTC_MspInit+0x2c>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0209      	lsls	r1, r1, #8
 8000738:	430a      	orrs	r2, r1
 800073a:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b002      	add	sp, #8
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40002800 	.word	0x40002800
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b08b      	sub	sp, #44	; 0x2c
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	2414      	movs	r4, #20
 8000756:	193b      	adds	r3, r7, r4
 8000758:	0018      	movs	r0, r3
 800075a:	2314      	movs	r3, #20
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f004 fb42 	bl	8004de8 <memset>
  if(hspi->Instance==SPI1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a20      	ldr	r2, [pc, #128]	; (80007ec <HAL_SPI_MspInit+0xa0>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d13a      	bne.n	80007e4 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <HAL_SPI_MspInit+0xa4>)
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_SPI_MspInit+0xa4>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0149      	lsls	r1, r1, #5
 8000778:	430a      	orrs	r2, r1
 800077a:	619a      	str	r2, [r3, #24]
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_SPI_MspInit+0xa4>)
 800077e:	699a      	ldr	r2, [r3, #24]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	015b      	lsls	r3, r3, #5
 8000784:	4013      	ands	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_SPI_MspInit+0xa4>)
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_SPI_MspInit+0xa4>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	0289      	lsls	r1, r1, #10
 8000794:	430a      	orrs	r2, r1
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_SPI_MspInit+0xa4>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	029b      	lsls	r3, r3, #10
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	22e0      	movs	r2, #224	; 0xe0
 80007ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2202      	movs	r2, #2
 80007b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2203      	movs	r2, #3
 80007be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	187a      	adds	r2, r7, r1
 80007c8:	2390      	movs	r3, #144	; 0x90
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fe4e 	bl	8001470 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2019      	movs	r0, #25
 80007da:	f000 fd99 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007de:	2019      	movs	r0, #25
 80007e0:	f000 fdab 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b00b      	add	sp, #44	; 0x2c
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	40013000 	.word	0x40013000
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a12      	ldr	r2, [pc, #72]	; (800084c <HAL_TIM_Base_MspInit+0x58>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d11d      	bne.n	8000842 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_TIM_Base_MspInit+0x5c>)
 8000808:	699a      	ldr	r2, [r3, #24]
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_TIM_Base_MspInit+0x5c>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0109      	lsls	r1, r1, #4
 8000810:	430a      	orrs	r2, r1
 8000812:	619a      	str	r2, [r3, #24]
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_TIM_Base_MspInit+0x5c>)
 8000816:	699a      	ldr	r2, [r3, #24]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	4013      	ands	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	200d      	movs	r0, #13
 8000828:	f000 fd72 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800082c:	200d      	movs	r0, #13
 800082e:	f000 fd84 	bl	800133a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	200e      	movs	r0, #14
 8000838:	f000 fd6a 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800083c:	200e      	movs	r0, #14
 800083e:	f000 fd7c 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b004      	add	sp, #16
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	40012c00 	.word	0x40012c00
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b08b      	sub	sp, #44	; 0x2c
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	2414      	movs	r4, #20
 800085e:	193b      	adds	r3, r7, r4
 8000860:	0018      	movs	r0, r3
 8000862:	2314      	movs	r3, #20
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f004 fabe 	bl	8004de8 <memset>
  if(huart->Instance==USART1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <HAL_UART_MspInit+0xa4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d13b      	bne.n	80008ee <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <HAL_UART_MspInit+0xa8>)
 8000878:	699a      	ldr	r2, [r3, #24]
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <HAL_UART_MspInit+0xa8>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	01c9      	lsls	r1, r1, #7
 8000880:	430a      	orrs	r2, r1
 8000882:	619a      	str	r2, [r3, #24]
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <HAL_UART_MspInit+0xa8>)
 8000886:	699a      	ldr	r2, [r3, #24]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	01db      	lsls	r3, r3, #7
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <HAL_UART_MspInit+0xa8>)
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <HAL_UART_MspInit+0xa8>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0289      	lsls	r1, r1, #10
 800089c:	430a      	orrs	r2, r1
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_UART_MspInit+0xa8>)
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	029b      	lsls	r3, r3, #10
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	22c0      	movs	r2, #192	; 0xc0
 80008b2:	00d2      	lsls	r2, r2, #3
 80008b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	0021      	movs	r1, r4
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2202      	movs	r2, #2
 80008bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2203      	movs	r2, #3
 80008c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2201      	movs	r2, #1
 80008ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	187a      	adds	r2, r7, r1
 80008d2:	2390      	movs	r3, #144	; 0x90
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fdc9 	bl	8001470 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	201b      	movs	r0, #27
 80008e4:	f000 fd14 	bl	8001310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e8:	201b      	movs	r0, #27
 80008ea:	f000 fd26 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b00b      	add	sp, #44	; 0x2c
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40013800 	.word	0x40013800
 80008fc:	40021000 	.word	0x40021000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000924:	f000 fc2c 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000936:	0018      	movs	r0, r3
 8000938:	f002 ff48 	bl	80037cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	200000d4 	.word	0x200000d4

08000948 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <TIM1_CC_IRQHandler+0x14>)
 800094e:	0018      	movs	r0, r3
 8000950:	f002 ff3c 	bl	80037cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	200000d4 	.word	0x200000d4

08000960 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <SPI1_IRQHandler+0x14>)
 8000966:	0018      	movs	r0, r3
 8000968:	f002 fc04 	bl	8003174 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	20000070 	.word	0x20000070

08000978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <USART1_IRQHandler+0x14>)
 800097e:	0018      	movs	r0, r3
 8000980:	f003 fb9a 	bl	80040b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	2000011c 	.word	0x2000011c

08000990 <get_irq1_register>:

uint8_t tx_mesg[] = "\n\rPacket Sent...\r\n";

//Gets the IRQ1 Register Status
uint8_t get_irq1_register(SPI_HandleTypeDef *hspi)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	return spi_single_read(hspi, REG_IRQFLAGS1);;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	213e      	movs	r1, #62	; 0x3e
 800099c:	0018      	movs	r0, r3
 800099e:	f000 f845 	bl	8000a2c <spi_single_read>
 80009a2:	0003      	movs	r3, r0
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b002      	add	sp, #8
 80009aa:	bd80      	pop	{r7, pc}

080009ac <get_irq2_register>:
//Gets the IRQ2 Register Status
uint8_t get_irq2_register(SPI_HandleTypeDef *hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	return spi_single_read(hspi, REG_IRQFLAGS2);;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	213f      	movs	r1, #63	; 0x3f
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 f837 	bl	8000a2c <spi_single_read>
 80009be:	0003      	movs	r3, r0
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <spi_single_write>:
//This Writes to a single register
void spi_single_write(SPI_HandleTypeDef *hspi, uint8_t address, uint8_t data)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	0008      	movs	r0, r1
 80009d2:	0011      	movs	r1, r2
 80009d4:	1cfb      	adds	r3, r7, #3
 80009d6:	1c02      	adds	r2, r0, #0
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	1cbb      	adds	r3, r7, #2
 80009dc:	1c0a      	adds	r2, r1, #0
 80009de:	701a      	strb	r2, [r3, #0]
	address |= WRITE_MASK;
 80009e0:	1cfb      	adds	r3, r7, #3
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	4252      	negs	r2, r2
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	1cfb      	adds	r3, r7, #3
 80009ee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 80009f0:	2390      	movs	r3, #144	; 0x90
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	2200      	movs	r2, #0
 80009f6:	2110      	movs	r1, #16
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 fea1 	bl	8001740 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 80009fe:	1cf9      	adds	r1, r7, #3
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	2364      	movs	r3, #100	; 0x64
 8000a04:	2201      	movs	r2, #1
 8000a06:	f001 ff21 	bl	800284c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(hspi, &data, sizeof(data), 100);
 8000a0a:	1cb9      	adds	r1, r7, #2
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	2201      	movs	r2, #1
 8000a12:	f001 ff1b 	bl	800284c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 8000a16:	2390      	movs	r3, #144	; 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fe8e 	bl	8001740 <HAL_GPIO_WritePin>
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <spi_single_read>:
//This reads a single register
uint8_t spi_single_read(SPI_HandleTypeDef *hspi, uint8_t address)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	000a      	movs	r2, r1
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;
	address &= READ_MASK;
 8000a3a:	1cfb      	adds	r3, r7, #3
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	227f      	movs	r2, #127	; 0x7f
 8000a40:	4013      	ands	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	1cfb      	adds	r3, r7, #3
 8000a46:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(cs_group, cs_pin, 0);
 8000a48:	2390      	movs	r3, #144	; 0x90
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2110      	movs	r1, #16
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fe75 	bl	8001740 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &address, sizeof(address), 100);
 8000a56:	1cf9      	adds	r1, r7, #3
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f001 fef5 	bl	800284c <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, &rx_data, sizeof(rx_data), 100);
 8000a62:	240f      	movs	r4, #15
 8000a64:	1939      	adds	r1, r7, r4
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	2364      	movs	r3, #100	; 0x64
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f002 f84e 	bl	8002b0c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(cs_group, cs_pin, 1);
 8000a70:	2390      	movs	r3, #144	; 0x90
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	2201      	movs	r2, #1
 8000a76:	2110      	movs	r1, #16
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fe61 	bl	8001740 <HAL_GPIO_WritePin>
	return rx_data;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	781b      	ldrb	r3, [r3, #0]
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b005      	add	sp, #20
 8000a88:	bd90      	pop	{r4, r7, pc}

08000a8a <sx1278_struct_init>:
//Only Change Below if the Value is different
//From the default setting in Datasheet
void sx1278_struct_init(SX1278 *radio)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
	//Common Settings
	radio->RegOpMode |= RF_OPMODE_STANDBY | RF_OPMODE_FREQMODE_ACCESS_LF;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	785b      	ldrb	r3, [r3, #1]
 8000a96:	2209      	movs	r2, #9
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	705a      	strb	r2, [r3, #1]
	radio->RegBitrateMsb |= RF_BITRATEMSB_250000_BPS;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	789a      	ldrb	r2, [r3, #2]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	709a      	strb	r2, [r3, #2]
	radio->RegBitrateLsb |= RF_BITRATELSB_250000_BPS;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	78db      	ldrb	r3, [r3, #3]
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	4252      	negs	r2, r2
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	70da      	strb	r2, [r3, #3]

	//You Have to Calculate with Eqs on Datasheet
	radio->RegFrfMsb = 0x6c;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	226c      	movs	r2, #108	; 0x6c
 8000abc:	719a      	strb	r2, [r3, #6]
	radio->RegFrfMid = 0x80;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	71da      	strb	r2, [r3, #7]
	radio->RegFrfLsb = 0x00;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	721a      	strb	r2, [r3, #8]

	//TX Settings:
	radio->RegPaConfig = 0b01110011;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2273      	movs	r2, #115	; 0x73
 8000ace:	725a      	strb	r2, [r3, #9]
	radio->RegPaRamp = 0b00001111;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	220f      	movs	r2, #15
 8000ad4:	729a      	strb	r2, [r3, #10]
	radio->RegOcp = 0b0001011;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	220b      	movs	r2, #11
 8000ada:	72da      	strb	r2, [r3, #11]

	//RX Settings:
	radio->RegLna = 0b11100000;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	22e0      	movs	r2, #224	; 0xe0
 8000ae0:	731a      	strb	r2, [r3, #12]
	radio->RegRxConfig = 0b10000100;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2284      	movs	r2, #132	; 0x84
 8000ae6:	735a      	strb	r2, [r3, #13]
	radio->RegRssiConfig = 0b00000000;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	739a      	strb	r2, [r3, #14]

	//There is an Rssi Threshold Reg
	//Have to change pre-amble detect when changing preamble
	radio->RegPreambleDetect = 0b10101010;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	22aa      	movs	r2, #170	; 0xaa
 8000af2:	77da      	strb	r2, [r3, #31]
	radio->RegPreambleMsb = PREAMBLE_SIZE_MSB;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2225      	movs	r2, #37	; 0x25
 8000af8:	2100      	movs	r1, #0
 8000afa:	5499      	strb	r1, [r3, r2]
	radio->RegPreambleLsb = PREAMBLE_SIZE_LSB;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2226      	movs	r2, #38	; 0x26
 8000b00:	2102      	movs	r1, #2
 8000b02:	5499      	strb	r1, [r3, r2]
	//Turning Sync Word Off //PREAMBLE POLARITY
	radio->RegSyncConfig = 0b01010001;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2227      	movs	r2, #39	; 0x27
 8000b08:	2151      	movs	r1, #81	; 0x51
 8000b0a:	5499      	strb	r1, [r3, r2]
	radio->RegSyncValue1 = 0xAF;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2228      	movs	r2, #40	; 0x28
 8000b10:	21af      	movs	r1, #175	; 0xaf
 8000b12:	5499      	strb	r1, [r3, r2]
	radio->RegSyncValue2 = 0xFA;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2229      	movs	r2, #41	; 0x29
 8000b18:	21fa      	movs	r1, #250	; 0xfa
 8000b1a:	5499      	strb	r1, [r3, r2]

	//TCXO Settings:
	radio->RegTcxo = RF_TCXO_TCXOINPUT_ON;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2258      	movs	r2, #88	; 0x58
 8000b20:	2110      	movs	r1, #16
 8000b22:	5499      	strb	r1, [r3, r2]

	//Packet Settings
	//Fixed Packet Length of 32 Bytes.
	//CRC ON
	radio->RegPacketConfig1 = 0b00011000;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	2118      	movs	r1, #24
 8000b2a:	5499      	strb	r1, [r3, r2]
	radio->RegPacketConfig2 = 0b01000000;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2231      	movs	r2, #49	; 0x31
 8000b30:	2140      	movs	r1, #64	; 0x40
 8000b32:	5499      	strb	r1, [r3, r2]
	radio->RegPayloadLength = 0b01000000;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2232      	movs	r2, #50	; 0x32
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	5499      	strb	r1, [r3, r2]
	radio->RegFifoThresh = RF_FIFOTHRESH_TXSTARTCONDITION_FIFOTHRESH | (DATA_SIZE-1);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2235      	movs	r2, #53	; 0x35
 8000b40:	213f      	movs	r1, #63	; 0x3f
 8000b42:	5499      	strb	r1, [r3, r2]
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b002      	add	sp, #8
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <sx1278_read_all_registers>:
//This gets the status of all registers.
//Mainly for init purposes
uint8_t sx1278_read_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000b5c:	2317      	movs	r3, #23
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e013      	b.n	8000b8e <sx1278_read_all_registers+0x42>
	{
		*(struct_ptr + ((reg-1))) = spi_single_read(hspi, reg);
 8000b66:	2517      	movs	r5, #23
 8000b68:	197b      	adds	r3, r7, r5
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	18d4      	adds	r4, r2, r3
 8000b72:	197b      	adds	r3, r7, r5
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff ff56 	bl	8000a2c <spi_single_read>
 8000b80:	0003      	movs	r3, r0
 8000b82:	7023      	strb	r3, [r4, #0]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000b84:	197b      	adds	r3, r7, r5
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	3201      	adds	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	2317      	movs	r3, #23
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b70      	cmp	r3, #112	; 0x70
 8000b96:	d9e6      	bls.n	8000b66 <sx1278_read_all_registers+0x1a>
	}
	uint8_t temp = spi_single_read(hspi, REG_VERSION);
 8000b98:	250f      	movs	r5, #15
 8000b9a:	197c      	adds	r4, r7, r5
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2142      	movs	r1, #66	; 0x42
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff ff43 	bl	8000a2c <spi_single_read>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	7023      	strb	r3, [r4, #0]
	if(temp == CHIP_VERSION)
 8000baa:	197b      	adds	r3, r7, r5
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b12      	cmp	r3, #18
 8000bb0:	d101      	bne.n	8000bb6 <sx1278_read_all_registers+0x6a>
	{
		return 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <sx1278_read_all_registers+0x6c>
	}
	return 0;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b006      	add	sp, #24
 8000bbe:	bdb0      	pop	{r4, r5, r7, pc}

08000bc0 <sx1278_write_all_registers>:
//This function takes the input sx1278 struct and programs the chip with the configurations
//Used for initialization purposes.
uint8_t sx1278_write_all_registers(SX1278 *radio, SPI_HandleTypeDef *hspi)
{
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
	uint8_t *struct_ptr = &(radio->RegOpMode);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000bd0:	2317      	movs	r3, #23
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e013      	b.n	8000c02 <sx1278_write_all_registers+0x42>
		{
			spi_single_write(hspi, reg, *(struct_ptr + ((reg-1))));
 8000bda:	2117      	movs	r1, #23
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	18d3      	adds	r3, r2, r3
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	000c      	movs	r4, r1
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	7819      	ldrb	r1, [r3, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fee9 	bl	80009c8 <spi_single_write>
	for(uint8_t reg = 1; reg <= REGISTER_COUNT; reg++)
 8000bf6:	0021      	movs	r1, r4
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	3201      	adds	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	2317      	movs	r3, #23
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b70      	cmp	r3, #112	; 0x70
 8000c0a:	d9e6      	bls.n	8000bda <sx1278_write_all_registers+0x1a>
		}
	uint8_t temp = spi_single_read(hspi, REG_OPMODE);
 8000c0c:	250f      	movs	r5, #15
 8000c0e:	197c      	adds	r4, r7, r5
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2101      	movs	r1, #1
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff09 	bl	8000a2c <spi_single_read>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	7023      	strb	r3, [r4, #0]
	if(radio->RegOpMode == temp)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	785b      	ldrb	r3, [r3, #1]
 8000c22:	197a      	adds	r2, r7, r5
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d101      	bne.n	8000c2e <sx1278_write_all_registers+0x6e>
	{
		return 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e000      	b.n	8000c30 <sx1278_write_all_registers+0x70>
	}
	return 0;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b006      	add	sp, #24
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}

08000c38 <sx1278_mem_init>:
//Initialize the Radio Object
void sx1278_mem_init(SPI_HandleTypeDef *hspi, radio *radio)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	//TX Flags
	radio->tx_state_flags.tx_init = 0;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2271      	movs	r2, #113	; 0x71
 8000c46:	2100      	movs	r1, #0
 8000c48:	5499      	strb	r1, [r3, r2]
	radio->tx_state_flags.tx_inp= 0;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2272      	movs	r2, #114	; 0x72
 8000c4e:	2100      	movs	r1, #0
 8000c50:	5499      	strb	r1, [r3, r2]
	radio->tx_state_flags.tx_packet_sent = 0;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2274      	movs	r2, #116	; 0x74
 8000c56:	2100      	movs	r1, #0
 8000c58:	5499      	strb	r1, [r3, r2]
	radio->tx_state_flags.tx_packet_start = 0;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	2273      	movs	r2, #115	; 0x73
 8000c5e:	2100      	movs	r1, #0
 8000c60:	5499      	strb	r1, [r3, r2]
	//RX Flags
	radio->rx_flags.rx_init = 0;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	22b5      	movs	r2, #181	; 0xb5
 8000c66:	2100      	movs	r1, #0
 8000c68:	5499      	strb	r1, [r3, r2]
	radio->rx_flags.rx_running = 0;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	22b6      	movs	r2, #182	; 0xb6
 8000c6e:	2100      	movs	r1, #0
 8000c70:	5499      	strb	r1, [r3, r2]
	radio->rx_flags.rx_stay = 1;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	22b7      	movs	r2, #183	; 0xb7
 8000c76:	2101      	movs	r1, #1
 8000c78:	5499      	strb	r1, [r3, r2]
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <sx1278_init>:
//General Init Function for the Module.
uint8_t sx1278_init(radio *radio, SPI_HandleTypeDef *hspi)
{
 8000c82:	b5b0      	push	{r4, r5, r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
	uint8_t timeout_counter = 0;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000c94:	230e      	movs	r3, #14
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000c9c:	e015      	b.n	8000cca <sx1278_init+0x48>
	{
		stat = sx1278_read_all_registers(&(radio->radio), hspi);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	220e      	movs	r2, #14
 8000ca2:	18bc      	adds	r4, r7, r2
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff4f 	bl	8000b4c <sx1278_read_all_registers>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	3201      	adds	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d101      	bne.n	8000cca <sx1278_init+0x48>
		{
			return 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e041      	b.n	8000d4e <sx1278_init+0xcc>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000cca:	230e      	movs	r3, #14
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d104      	bne.n	8000cde <sx1278_init+0x5c>
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d9df      	bls.n	8000c9e <sx1278_init+0x1c>
		}
	}
	timeout_counter = 0;
 8000cde:	230f      	movs	r3, #15
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
	stat = 0;
 8000ce6:	230e      	movs	r3, #14
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
	sx1278_struct_init(&(radio->radio));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff feca 	bl	8000a8a <sx1278_struct_init>
	radio->sx_state = STANDBY;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2270      	movs	r2, #112	; 0x70
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	5499      	strb	r1, [r3, r2]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000cfe:	e015      	b.n	8000d2c <sx1278_init+0xaa>
	{
		timeout_counter++;
 8000d00:	250f      	movs	r5, #15
 8000d02:	197b      	adds	r3, r7, r5
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	197b      	adds	r3, r7, r5
 8000d08:	3201      	adds	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
		stat = sx1278_write_all_registers(&(radio->radio), hspi);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	220e      	movs	r2, #14
 8000d10:	18bc      	adds	r4, r7, r2
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	0011      	movs	r1, r2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff ff52 	bl	8000bc0 <sx1278_write_all_registers>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	7023      	strb	r3, [r4, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000d20:	197b      	adds	r3, r7, r5
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b64      	cmp	r3, #100	; 0x64
 8000d26:	d101      	bne.n	8000d2c <sx1278_init+0xaa>
		{
			return 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e010      	b.n	8000d4e <sx1278_init+0xcc>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000d2c:	230e      	movs	r3, #14
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d104      	bne.n	8000d40 <sx1278_init+0xbe>
 8000d36:	230f      	movs	r3, #15
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b64      	cmp	r3, #100	; 0x64
 8000d3e:	d9df      	bls.n	8000d00 <sx1278_init+0x7e>
		}
	}
	sx1278_mem_init(hspi, radio);
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ff76 	bl	8000c38 <sx1278_mem_init>
	return 1;
 8000d4c:	2301      	movs	r3, #1
}
 8000d4e:	0018      	movs	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b004      	add	sp, #16
 8000d54:	bdb0      	pop	{r4, r5, r7, pc}

08000d56 <sx1278_fifo_fill>:
//Usually used to fill the fifo for tx
void sx1278_fifo_fill(SPI_HandleTypeDef *hspi, uint8_t* data)
{
 8000d56:	b590      	push	{r4, r7, lr}
 8000d58:	b085      	sub	sp, #20
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
	uint8_t address_packet = WRITE_MASK | REG_FIFO;
 8000d60:	230e      	movs	r3, #14
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	701a      	strb	r2, [r3, #0]
	uint8_t temporary;
 	for(uint8_t i = 0; i < DATA_SIZE; i++)
 8000d68:	230f      	movs	r3, #15
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e016      	b.n	8000da0 <sx1278_fifo_fill+0x4a>
	{
 		temporary = data[i];
 8000d72:	240f      	movs	r4, #15
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	18d2      	adds	r2, r2, r3
 8000d7c:	210d      	movs	r1, #13
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	701a      	strb	r2, [r3, #0]
 		spi_single_write(hspi, address_packet, temporary);
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	230e      	movs	r3, #14
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	7819      	ldrb	r1, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff fe19 	bl	80009c8 <spi_single_write>
 	for(uint8_t i = 0; i < DATA_SIZE; i++)
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	781a      	ldrb	r2, [r3, #0]
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	3201      	adds	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b3f      	cmp	r3, #63	; 0x3f
 8000da8:	d9e3      	bls.n	8000d72 <sx1278_fifo_fill+0x1c>
	}
}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b005      	add	sp, #20
 8000db2:	bd90      	pop	{r4, r7, pc}

08000db4 <sx1278_fifo_dump>:
//Used to dump the contents of the FiFo into the RX_BUFFER
void sx1278_fifo_dump(SPI_HandleTypeDef *hspi, radio *radio)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	if(get_irq2_register(hspi) & FIFO_EMPTY)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff fdf3 	bl	80009ac <get_irq2_register>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	001a      	movs	r2, r3
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d135      	bne.n	8000e3c <sx1278_fifo_dump+0x88>
	{
		//if fifo is empty return from function
		return;
	}
	while((get_irq2_register(hspi) & FIFO_EMPTY) != FIFO_EMPTY)
 8000dd0:	e018      	b.n	8000e04 <sx1278_fifo_dump+0x50>
	{
		radio->rx_buffer[radio->rx_buffer_size] = spi_single_read(hspi, REG_FIFO);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	22f8      	movs	r2, #248	; 0xf8
 8000dd6:	5c9b      	ldrb	r3, [r3, r2]
 8000dd8:	001c      	movs	r4, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff fe24 	bl	8000a2c <spi_single_read>
 8000de4:	0003      	movs	r3, r0
 8000de6:	0019      	movs	r1, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	22b8      	movs	r2, #184	; 0xb8
 8000dec:	191b      	adds	r3, r3, r4
 8000dee:	189b      	adds	r3, r3, r2
 8000df0:	1c0a      	adds	r2, r1, #0
 8000df2:	701a      	strb	r2, [r3, #0]
		radio->rx_buffer_size ++;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	22f8      	movs	r2, #248	; 0xf8
 8000df8:	5c9b      	ldrb	r3, [r3, r2]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	b2d9      	uxtb	r1, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	22f8      	movs	r2, #248	; 0xf8
 8000e02:	5499      	strb	r1, [r3, r2]
	while((get_irq2_register(hspi) & FIFO_EMPTY) != FIFO_EMPTY)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff fdd0 	bl	80009ac <get_irq2_register>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	001a      	movs	r2, r3
 8000e10:	2340      	movs	r3, #64	; 0x40
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b40      	cmp	r3, #64	; 0x40
 8000e16:	d1dc      	bne.n	8000dd2 <sx1278_fifo_dump+0x1e>
	}
	//This Will Transmit Collected Packages over UART.
	HAL_UART_Transmit(radio->huart, radio->rx_buffer, radio->rx_buffer_size, 100);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	22fc      	movs	r2, #252	; 0xfc
 8000e1c:	5898      	ldr	r0, [r3, r2]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	33b8      	adds	r3, #184	; 0xb8
 8000e22:	0019      	movs	r1, r3
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	22f8      	movs	r2, #248	; 0xf8
 8000e28:	5c9b      	ldrb	r3, [r3, r2]
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	2364      	movs	r3, #100	; 0x64
 8000e2e:	f003 f8a3 	bl	8003f78 <HAL_UART_Transmit>
	radio->rx_buffer_size = 0;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	22f8      	movs	r2, #248	; 0xf8
 8000e36:	2100      	movs	r1, #0
 8000e38:	5499      	strb	r1, [r3, r2]
 8000e3a:	e000      	b.n	8000e3e <sx1278_fifo_dump+0x8a>
		return;
 8000e3c:	46c0      	nop			; (mov r8, r8)
}
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b003      	add	sp, #12
 8000e42:	bd90      	pop	{r4, r7, pc}

08000e44 <change_opmode>:
//Change the Opmode of the device
uint8_t change_opmode(radio *radio, SPI_HandleTypeDef *hspi, radio_state new_mode)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	701a      	strb	r2, [r3, #0]
	uint8_t timeout_counter = 0;
 8000e52:	2317      	movs	r3, #23
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	uint8_t stat = 0;
 8000e5a:	2316      	movs	r3, #22
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000e62:	e015      	b.n	8000e90 <change_opmode+0x4c>
	{
		stat = sx1278_read_all_registers(&(radio->radio), hspi);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2216      	movs	r2, #22
 8000e68:	18bc      	adds	r4, r7, r2
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff fe6c 	bl	8000b4c <sx1278_read_all_registers>
 8000e74:	0003      	movs	r3, r0
 8000e76:	7023      	strb	r3, [r4, #0]
		timeout_counter++;
 8000e78:	2117      	movs	r1, #23
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	3201      	adds	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
		if(timeout_counter == TIMEOUT_COUNTER_LIM-1)
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b64      	cmp	r3, #100	; 0x64
 8000e8a:	d101      	bne.n	8000e90 <change_opmode+0x4c>
		{
			return 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e021      	b.n	8000ed4 <change_opmode+0x90>
	while(stat == 0 && timeout_counter < TIMEOUT_COUNTER_LIM)
 8000e90:	2316      	movs	r3, #22
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <change_opmode+0x60>
 8000e9a:	2317      	movs	r3, #23
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b64      	cmp	r3, #100	; 0x64
 8000ea2:	d9df      	bls.n	8000e64 <change_opmode+0x20>
		}
	}
	uint8_t temp_mode = RF_OPMODE_MODULATIONTYPE_FSK |
 8000ea4:	2015      	movs	r0, #21
 8000ea6:	183b      	adds	r3, r7, r0
 8000ea8:	1dfa      	adds	r2, r7, #7
 8000eaa:	7812      	ldrb	r2, [r2, #0]
 8000eac:	2108      	movs	r1, #8
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
			RF_OPMODE_FREQMODE_ACCESS_LF |new_mode;
	radio->radio.RegOpMode = temp_mode;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	183a      	adds	r2, r7, r0
 8000eb6:	7812      	ldrb	r2, [r2, #0]
 8000eb8:	705a      	strb	r2, [r3, #1]
	radio->sx_state = new_mode;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1dfa      	adds	r2, r7, #7
 8000ebe:	2170      	movs	r1, #112	; 0x70
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	545a      	strb	r2, [r3, r1]
	spi_single_write(hspi, REG_OPMODE, (radio->radio.RegOpMode));
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	785a      	ldrb	r2, [r3, #1]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	2101      	movs	r1, #1
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff fd7b 	bl	80009c8 <spi_single_write>
	return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b007      	add	sp, #28
 8000eda:	bd90      	pop	{r4, r7, pc}

08000edc <SX1278_APP>:
//This Function fills the FIFO with the input data and sets the opmode to transmit.
//It will be up to the app to check when the tx is done.
void SX1278_APP(radio *radio, SPI_HandleTypeDef *hspi)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
//	radio->sx_state = spi_single_read(hspi, REG_OPMODE) & RF_OPMODE_MASK;
	switch(radio->sx_state)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2270      	movs	r2, #112	; 0x70
 8000eea:	5c9b      	ldrb	r3, [r3, r2]
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d100      	bne.n	8000ef2 <SX1278_APP+0x16>
 8000ef0:	e07a      	b.n	8000fe8 <SX1278_APP+0x10c>
 8000ef2:	dd00      	ble.n	8000ef6 <SX1278_APP+0x1a>
 8000ef4:	e0c6      	b.n	8001084 <SX1278_APP+0x1a8>
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d002      	beq.n	8000f00 <SX1278_APP+0x24>
 8000efa:	dd00      	ble.n	8000efe <SX1278_APP+0x22>
 8000efc:	e0c2      	b.n	8001084 <SX1278_APP+0x1a8>
	{
	case SLEEP:
		break;
 8000efe:	e0c1      	b.n	8001084 <SX1278_APP+0x1a8>
	case STANDBY:
		break;
	case TRANSMITTER:
		if(!radio->tx_state_flags.tx_init)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2271      	movs	r2, #113	; 0x71
 8000f04:	5c9b      	ldrb	r3, [r3, r2]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d131      	bne.n	8000f6e <SX1278_APP+0x92>
		{
			//Make Fifo Thresh Packet_Size-1
			radio->radio.RegFifoThresh = RF_FIFOTHRESH_TXSTARTCONDITION_FIFOTHRESH | (DATA_SIZE-1);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2235      	movs	r2, #53	; 0x35
 8000f0e:	213f      	movs	r1, #63	; 0x3f
 8000f10:	5499      	strb	r1, [r3, r2]
			spi_single_write(hspi, REG_FIFOTHRESH, radio->radio.RegFifoThresh);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2235      	movs	r2, #53	; 0x35
 8000f16:	5c9a      	ldrb	r2, [r3, r2]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2135      	movs	r1, #53	; 0x35
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff fd53 	bl	80009c8 <spi_single_write>
			//Fill The Fifo
			sx1278_fifo_fill(hspi, radio->tx_buffer);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3375      	adds	r3, #117	; 0x75
 8000f26:	001a      	movs	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ff12 	bl	8000d56 <sx1278_fifo_fill>
			radio->tx_state_flags.tx_packet_sent = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2274      	movs	r2, #116	; 0x74
 8000f36:	2100      	movs	r1, #0
 8000f38:	5499      	strb	r1, [r3, r2]
			//Check to Make Sure FiFo has been fully Filled
			if((get_irq2_register(hspi) & FIFO_LEVEL) == FIFO_LEVEL)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff fd35 	bl	80009ac <get_irq2_register>
 8000f42:	0003      	movs	r3, r0
 8000f44:	001a      	movs	r2, r3
 8000f46:	2320      	movs	r3, #32
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b20      	cmp	r3, #32
 8000f4c:	d000      	beq.n	8000f50 <SX1278_APP+0x74>
 8000f4e:	e096      	b.n	800107e <SX1278_APP+0x1a2>
			{
				//Fifo is Prefilled ready to transmit package.
				radio->tx_state_flags.tx_init = 1;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2271      	movs	r2, #113	; 0x71
 8000f54:	2101      	movs	r1, #1
 8000f56:	5499      	strb	r1, [r3, r2]
				//Change Module to Transmit and Tell Higher Level TX inprogress
				change_opmode(radio, hspi, TRANSMITTER);
 8000f58:	6839      	ldr	r1, [r7, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff ff70 	bl	8000e44 <change_opmode>
				radio->tx_state_flags.tx_inp = 1;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2272      	movs	r2, #114	; 0x72
 8000f68:	2101      	movs	r1, #1
 8000f6a:	5499      	strb	r1, [r3, r2]
				radio->tx_state_flags.tx_inp = 0;
				//Debug Output
				HAL_UART_Transmit(radio->huart, tx_mesg, strlen((char*)tx_mesg), 100);
			}
		}
		break;
 8000f6c:	e087      	b.n	800107e <SX1278_APP+0x1a2>
		else if(radio->tx_state_flags.tx_init && radio->tx_state_flags.tx_inp && !radio->tx_state_flags.tx_packet_sent)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2271      	movs	r2, #113	; 0x71
 8000f72:	5c9b      	ldrb	r3, [r3, r2]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d100      	bne.n	8000f7a <SX1278_APP+0x9e>
 8000f78:	e081      	b.n	800107e <SX1278_APP+0x1a2>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2272      	movs	r2, #114	; 0x72
 8000f7e:	5c9b      	ldrb	r3, [r3, r2]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d100      	bne.n	8000f86 <SX1278_APP+0xaa>
 8000f84:	e07b      	b.n	800107e <SX1278_APP+0x1a2>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2274      	movs	r2, #116	; 0x74
 8000f8a:	5c9b      	ldrb	r3, [r3, r2]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d000      	beq.n	8000f92 <SX1278_APP+0xb6>
 8000f90:	e075      	b.n	800107e <SX1278_APP+0x1a2>
			if((get_irq2_register(hspi) & PACKET_SENT) == PACKET_SENT)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff fd09 	bl	80009ac <get_irq2_register>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d16b      	bne.n	800107e <SX1278_APP+0x1a2>
				radio->tx_state_flags.tx_packet_sent = 1;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2274      	movs	r2, #116	; 0x74
 8000faa:	2101      	movs	r1, #1
 8000fac:	5499      	strb	r1, [r3, r2]
				change_opmode(radio, hspi, STANDBY);
 8000fae:	6839      	ldr	r1, [r7, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ff45 	bl	8000e44 <change_opmode>
				radio->tx_state_flags.tx_init = 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2271      	movs	r2, #113	; 0x71
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	5499      	strb	r1, [r3, r2]
				radio->tx_state_flags.tx_inp = 0;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2272      	movs	r2, #114	; 0x72
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(radio->huart, tx_mesg, strlen((char*)tx_mesg), 100);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	22fc      	movs	r2, #252	; 0xfc
 8000fce:	589c      	ldr	r4, [r3, r2]
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <SX1278_APP+0x1b0>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff f898 	bl	8000108 <strlen>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	492b      	ldr	r1, [pc, #172]	; (800108c <SX1278_APP+0x1b0>)
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f002 ffc9 	bl	8003f78 <HAL_UART_Transmit>
		break;
 8000fe6:	e04a      	b.n	800107e <SX1278_APP+0x1a2>
	case RECEIVER:
		if(radio->rx_flags.rx_init == 0)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	22b5      	movs	r2, #181	; 0xb5
 8000fec:	5c9b      	ldrb	r3, [r3, r2]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10a      	bne.n	8001008 <SX1278_APP+0x12c>
		{
			//Get Radio Ready for Rx
			//FIFO must be clear here. Put logic in later.
			//When reading from fifo make sure it is not empty each time.
			radio->rx_flags.rx_init = 1;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	22b5      	movs	r2, #181	; 0xb5
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	5499      	strb	r1, [r3, r2]
			change_opmode(radio, hspi, RECEIVER);
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2205      	movs	r2, #5
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ff1f 	bl	8000e44 <change_opmode>
					//if not stay go standby
					change_opmode(radio, hspi, STANDBY);
				}
			}
		}
		break;
 8001006:	e03c      	b.n	8001082 <SX1278_APP+0x1a6>
		else if(radio->rx_flags.rx_init && !(radio->rx_flags.rx_running))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	22b5      	movs	r2, #181	; 0xb5
 800100c:	5c9b      	ldrb	r3, [r3, r2]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d013      	beq.n	800103a <SX1278_APP+0x15e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	22b6      	movs	r2, #182	; 0xb6
 8001016:	5c9b      	ldrb	r3, [r3, r2]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10e      	bne.n	800103a <SX1278_APP+0x15e>
			if((get_irq1_register(hspi) & RX_READY) == RX_READY)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff fcb6 	bl	8000990 <get_irq1_register>
 8001024:	0003      	movs	r3, r0
 8001026:	001a      	movs	r2, r3
 8001028:	2340      	movs	r3, #64	; 0x40
 800102a:	4013      	ands	r3, r2
 800102c:	2b40      	cmp	r3, #64	; 0x40
 800102e:	d125      	bne.n	800107c <SX1278_APP+0x1a0>
				radio->rx_flags.rx_running = 1;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	22b6      	movs	r2, #182	; 0xb6
 8001034:	2101      	movs	r1, #1
 8001036:	5499      	strb	r1, [r3, r2]
			if((get_irq1_register(hspi) & RX_READY) == RX_READY)
 8001038:	e020      	b.n	800107c <SX1278_APP+0x1a0>
		else if(radio->rx_flags.rx_running)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	22b6      	movs	r2, #182	; 0xb6
 800103e:	5c9b      	ldrb	r3, [r3, r2]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d01e      	beq.n	8001082 <SX1278_APP+0x1a6>
			if((get_irq2_register(hspi) & PAYLOAD_READY) == PAYLOAD_READY)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fcb0 	bl	80009ac <get_irq2_register>
 800104c:	0003      	movs	r3, r0
 800104e:	001a      	movs	r2, r3
 8001050:	2304      	movs	r3, #4
 8001052:	4013      	ands	r3, r2
 8001054:	2b04      	cmp	r3, #4
 8001056:	d114      	bne.n	8001082 <SX1278_APP+0x1a6>
				sx1278_fifo_dump(hspi, radio);
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff fea8 	bl	8000db4 <sx1278_fifo_dump>
				if(!radio->rx_flags.rx_stay)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	22b7      	movs	r2, #183	; 0xb7
 8001068:	5c9b      	ldrb	r3, [r3, r2]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <SX1278_APP+0x1a6>
					change_opmode(radio, hspi, STANDBY);
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff fee5 	bl	8000e44 <change_opmode>
		break;
 800107a:	e002      	b.n	8001082 <SX1278_APP+0x1a6>
 800107c:	e001      	b.n	8001082 <SX1278_APP+0x1a6>
		break;
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	e000      	b.n	8001084 <SX1278_APP+0x1a8>
		break;
 8001082:	46c0      	nop			; (mov r8, r8)
	}
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b003      	add	sp, #12
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	20000014 	.word	0x20000014

08001090 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a0:	f7ff fff6 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	; (80010dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <LoopForever+0xe>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	; (80010e8 <LoopForever+0x16>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ca:	f003 fe95 	bl	8004df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff f8f3 	bl	80002b8 <main>

080010d2 <LoopForever>:

LoopForever:
    b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   r0, =_estack
 80010d4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80010e0:	08004e98 	.word	0x08004e98
  ldr r2, =_sbss
 80010e4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80010e8:	200002a8 	.word	0x200002a8

080010ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_IRQHandler>
	...

080010f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HAL_Init+0x24>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_Init+0x24>)
 80010fa:	2110      	movs	r1, #16
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001100:	2003      	movs	r0, #3
 8001102:	f000 f809 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001106:	f7ff fae5 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_InitTick+0x5c>)
 8001122:	681c      	ldr	r4, [r3, #0]
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_InitTick+0x60>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	0019      	movs	r1, r3
 800112a:	23fa      	movs	r3, #250	; 0xfa
 800112c:	0098      	lsls	r0, r3, #2
 800112e:	f7fe fff3 	bl	8000118 <__udivsi3>
 8001132:	0003      	movs	r3, r0
 8001134:	0019      	movs	r1, r3
 8001136:	0020      	movs	r0, r4
 8001138:	f7fe ffee 	bl	8000118 <__udivsi3>
 800113c:	0003      	movs	r3, r0
 800113e:	0018      	movs	r0, r3
 8001140:	f000 f90b 	bl	800135a <HAL_SYSTICK_Config>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e00f      	b.n	800116c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d80b      	bhi.n	800116a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	2301      	movs	r3, #1
 8001156:	425b      	negs	r3, r3
 8001158:	2200      	movs	r2, #0
 800115a:	0018      	movs	r0, r3
 800115c:	f000 f8d8 	bl	8001310 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_InitTick+0x64>)
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b003      	add	sp, #12
 8001172:	bd90      	pop	{r4, r7, pc}
 8001174:	20000028 	.word	0x20000028
 8001178:	20000030 	.word	0x20000030
 800117c:	2000002c 	.word	0x2000002c

08001180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x1c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	001a      	movs	r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x20>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	18d2      	adds	r2, r2, r3
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_IncTick+0x20>)
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	20000030 	.word	0x20000030
 80011a0:	200002a4 	.word	0x200002a4

080011a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <HAL_GetTick+0x10>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	200002a4 	.word	0x200002a4

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	0002      	movs	r2, r0
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b7f      	cmp	r3, #127	; 0x7f
 80011ca:	d809      	bhi.n	80011e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011cc:	1dfb      	adds	r3, r7, #7
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	001a      	movs	r2, r3
 80011d2:	231f      	movs	r3, #31
 80011d4:	401a      	ands	r2, r3
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <__NVIC_EnableIRQ+0x30>)
 80011d8:	2101      	movs	r1, #1
 80011da:	4091      	lsls	r1, r2
 80011dc:	000a      	movs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
  }
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	0002      	movs	r2, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001200:	d828      	bhi.n	8001254 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <__NVIC_SetPriority+0xd4>)
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	33c0      	adds	r3, #192	; 0xc0
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	589b      	ldr	r3, [r3, r2]
 8001212:	1dfa      	adds	r2, r7, #7
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	0011      	movs	r1, r2
 8001218:	2203      	movs	r2, #3
 800121a:	400a      	ands	r2, r1
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	21ff      	movs	r1, #255	; 0xff
 8001220:	4091      	lsls	r1, r2
 8001222:	000a      	movs	r2, r1
 8001224:	43d2      	mvns	r2, r2
 8001226:	401a      	ands	r2, r3
 8001228:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	401a      	ands	r2, r3
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	0018      	movs	r0, r3
 8001238:	2303      	movs	r3, #3
 800123a:	4003      	ands	r3, r0
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001240:	481f      	ldr	r0, [pc, #124]	; (80012c0 <__NVIC_SetPriority+0xd4>)
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b25b      	sxtb	r3, r3
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	430a      	orrs	r2, r1
 800124c:	33c0      	adds	r3, #192	; 0xc0
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001252:	e031      	b.n	80012b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001254:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <__NVIC_SetPriority+0xd8>)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0019      	movs	r1, r3
 800125c:	230f      	movs	r3, #15
 800125e:	400b      	ands	r3, r1
 8001260:	3b08      	subs	r3, #8
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3306      	adds	r3, #6
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	18d3      	adds	r3, r2, r3
 800126a:	3304      	adds	r3, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	1dfa      	adds	r2, r7, #7
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	0011      	movs	r1, r2
 8001274:	2203      	movs	r2, #3
 8001276:	400a      	ands	r2, r1
 8001278:	00d2      	lsls	r2, r2, #3
 800127a:	21ff      	movs	r1, #255	; 0xff
 800127c:	4091      	lsls	r1, r2
 800127e:	000a      	movs	r2, r1
 8001280:	43d2      	mvns	r2, r2
 8001282:	401a      	ands	r2, r3
 8001284:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	019b      	lsls	r3, r3, #6
 800128a:	22ff      	movs	r2, #255	; 0xff
 800128c:	401a      	ands	r2, r3
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	0018      	movs	r0, r3
 8001294:	2303      	movs	r3, #3
 8001296:	4003      	ands	r3, r0
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <__NVIC_SetPriority+0xd8>)
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	001c      	movs	r4, r3
 80012a4:	230f      	movs	r3, #15
 80012a6:	4023      	ands	r3, r4
 80012a8:	3b08      	subs	r3, #8
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	430a      	orrs	r2, r1
 80012ae:	3306      	adds	r3, #6
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	18c3      	adds	r3, r0, r3
 80012b4:	3304      	adds	r3, #4
 80012b6:	601a      	str	r2, [r3, #0]
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b003      	add	sp, #12
 80012be:	bd90      	pop	{r4, r7, pc}
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	1e5a      	subs	r2, r3, #1
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	045b      	lsls	r3, r3, #17
 80012d8:	429a      	cmp	r2, r3
 80012da:	d301      	bcc.n	80012e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012dc:	2301      	movs	r3, #1
 80012de:	e010      	b.n	8001302 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <SysTick_Config+0x44>)
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	3a01      	subs	r2, #1
 80012e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e8:	2301      	movs	r3, #1
 80012ea:	425b      	negs	r3, r3
 80012ec:	2103      	movs	r1, #3
 80012ee:	0018      	movs	r0, r3
 80012f0:	f7ff ff7c 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x44>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x44>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b002      	add	sp, #8
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	210f      	movs	r1, #15
 800131c:	187b      	adds	r3, r7, r1
 800131e:	1c02      	adds	r2, r0, #0
 8001320:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	187b      	adds	r3, r7, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b25b      	sxtb	r3, r3
 800132a:	0011      	movs	r1, r2
 800132c:	0018      	movs	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b004      	add	sp, #16
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	0002      	movs	r2, r0
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff ff33 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff ffaf 	bl	80012c8 <SysTick_Config>
 800136a:	0003      	movs	r3, r0
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2221      	movs	r2, #33	; 0x21
 8001380:	5c9b      	ldrb	r3, [r3, r2]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d008      	beq.n	800139a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2204      	movs	r2, #4
 800138c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2220      	movs	r2, #32
 8001392:	2100      	movs	r1, #0
 8001394:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e020      	b.n	80013dc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	210e      	movs	r1, #14
 80013a6:	438a      	bics	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2101      	movs	r1, #1
 80013b6:	438a      	bics	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c2:	2101      	movs	r1, #1
 80013c4:	4091      	lsls	r1, r2
 80013c6:	000a      	movs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2221      	movs	r2, #33	; 0x21
 80013ce:	2101      	movs	r1, #1
 80013d0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2220      	movs	r2, #32
 80013d6:	2100      	movs	r1, #0
 80013d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ec:	210f      	movs	r1, #15
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2221      	movs	r2, #33	; 0x21
 80013f8:	5c9b      	ldrb	r3, [r3, r2]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d006      	beq.n	800140e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2204      	movs	r2, #4
 8001404:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001406:	187b      	adds	r3, r7, r1
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e028      	b.n	8001460 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	210e      	movs	r1, #14
 800141a:	438a      	bics	r2, r1
 800141c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	438a      	bics	r2, r1
 800142c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001436:	2101      	movs	r1, #1
 8001438:	4091      	lsls	r1, r2
 800143a:	000a      	movs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2221      	movs	r2, #33	; 0x21
 8001442:	2101      	movs	r1, #1
 8001444:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2220      	movs	r2, #32
 800144a:	2100      	movs	r1, #0
 800144c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	0010      	movs	r0, r2
 800145e:	4798      	blx	r3
    }
  }
  return status;
 8001460:	230f      	movs	r3, #15
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	781b      	ldrb	r3, [r3, #0]
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b004      	add	sp, #16
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e149      	b.n	8001714 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4091      	lsls	r1, r2
 800148a:	000a      	movs	r2, r1
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d100      	bne.n	8001498 <HAL_GPIO_Init+0x28>
 8001496:	e13a      	b.n	800170e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	4013      	ands	r3, r2
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d005      	beq.n	80014b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2203      	movs	r2, #3
 80014aa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d130      	bne.n	8001512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	409a      	lsls	r2, r3
 80014be:	0013      	movs	r3, r2
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e6:	2201      	movs	r2, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	43da      	mvns	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	2201      	movs	r2, #1
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2203      	movs	r2, #3
 8001518:	4013      	ands	r3, r2
 800151a:	2b03      	cmp	r3, #3
 800151c:	d017      	beq.n	800154e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	43da      	mvns	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2203      	movs	r2, #3
 8001554:	4013      	ands	r3, r2
 8001556:	2b02      	cmp	r3, #2
 8001558:	d123      	bne.n	80015a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	58d3      	ldr	r3, [r2, r3]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2207      	movs	r2, #7
 800156c:	4013      	ands	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2107      	movs	r1, #7
 8001586:	400b      	ands	r3, r1
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	43da      	mvns	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2203      	movs	r2, #3
 80015c0:	401a      	ands	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	0013      	movs	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	23c0      	movs	r3, #192	; 0xc0
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d100      	bne.n	80015e4 <HAL_GPIO_Init+0x174>
 80015e2:	e094      	b.n	800170e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e4:	4b51      	ldr	r3, [pc, #324]	; (800172c <HAL_GPIO_Init+0x2bc>)
 80015e6:	699a      	ldr	r2, [r3, #24]
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_GPIO_Init+0x2bc>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	430a      	orrs	r2, r1
 80015ee:	619a      	str	r2, [r3, #24]
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <HAL_GPIO_Init+0x2bc>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4013      	ands	r3, r2
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015fc:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <HAL_GPIO_Init+0x2c0>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	3302      	adds	r3, #2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	589b      	ldr	r3, [r3, r2]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2203      	movs	r2, #3
 800160e:	4013      	ands	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	220f      	movs	r2, #15
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	43da      	mvns	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	2390      	movs	r3, #144	; 0x90
 8001624:	05db      	lsls	r3, r3, #23
 8001626:	429a      	cmp	r2, r3
 8001628:	d00d      	beq.n	8001646 <HAL_GPIO_Init+0x1d6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a41      	ldr	r2, [pc, #260]	; (8001734 <HAL_GPIO_Init+0x2c4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x1d2>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a40      	ldr	r2, [pc, #256]	; (8001738 <HAL_GPIO_Init+0x2c8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_GPIO_Init+0x1ce>
 800163a:	2302      	movs	r3, #2
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x1d8>
 800163e:	2305      	movs	r3, #5
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x1d8>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x1d8>
 8001646:	2300      	movs	r3, #0
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	2103      	movs	r1, #3
 800164c:	400a      	ands	r2, r1
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001658:	4935      	ldr	r1, [pc, #212]	; (8001730 <HAL_GPIO_Init+0x2c0>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001666:	4b35      	ldr	r3, [pc, #212]	; (800173c <HAL_GPIO_Init+0x2cc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43da      	mvns	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	035b      	lsls	r3, r3, #13
 800167e:	4013      	ands	r3, r2
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800168a:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_GPIO_Init+0x2cc>)
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_GPIO_Init+0x2cc>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43da      	mvns	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	039b      	lsls	r3, r3, #14
 80016a8:	4013      	ands	r3, r2
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_GPIO_Init+0x2cc>)
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_GPIO_Init+0x2cc>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43da      	mvns	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_GPIO_Init+0x2cc>)
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_GPIO_Init+0x2cc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	43da      	mvns	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	4013      	ands	r3, r2
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_GPIO_Init+0x2cc>)
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	40da      	lsrs	r2, r3
 800171c:	1e13      	subs	r3, r2, #0
 800171e:	d000      	beq.n	8001722 <HAL_GPIO_Init+0x2b2>
 8001720:	e6ae      	b.n	8001480 <HAL_GPIO_Init+0x10>
  } 
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b006      	add	sp, #24
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	40010000 	.word	0x40010000
 8001734:	48000400 	.word	0x48000400
 8001738:	48000800 	.word	0x48000800
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	0008      	movs	r0, r1
 800174a:	0011      	movs	r1, r2
 800174c:	1cbb      	adds	r3, r7, #2
 800174e:	1c02      	adds	r2, r0, #0
 8001750:	801a      	strh	r2, [r3, #0]
 8001752:	1c7b      	adds	r3, r7, #1
 8001754:	1c0a      	adds	r2, r1, #0
 8001756:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001758:	1c7b      	adds	r3, r7, #1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001760:	1cbb      	adds	r3, r7, #2
 8001762:	881a      	ldrh	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001768:	e003      	b.n	8001772 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176a:	1cbb      	adds	r3, r7, #2
 800176c:	881a      	ldrh	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e301      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2201      	movs	r2, #1
 8001794:	4013      	ands	r3, r2
 8001796:	d100      	bne.n	800179a <HAL_RCC_OscConfig+0x1e>
 8001798:	e08d      	b.n	80018b6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800179a:	4bc3      	ldr	r3, [pc, #780]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	220c      	movs	r2, #12
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d00e      	beq.n	80017c4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a6:	4bc0      	ldr	r3, [pc, #768]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	220c      	movs	r2, #12
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d116      	bne.n	80017e0 <HAL_RCC_OscConfig+0x64>
 80017b2:	4bbd      	ldr	r3, [pc, #756]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	401a      	ands	r2, r3
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	025b      	lsls	r3, r3, #9
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d10d      	bne.n	80017e0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4bb8      	ldr	r3, [pc, #736]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	029b      	lsls	r3, r3, #10
 80017cc:	4013      	ands	r3, r2
 80017ce:	d100      	bne.n	80017d2 <HAL_RCC_OscConfig+0x56>
 80017d0:	e070      	b.n	80018b4 <HAL_RCC_OscConfig+0x138>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d000      	beq.n	80017dc <HAL_RCC_OscConfig+0x60>
 80017da:	e06b      	b.n	80018b4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e2d8      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_OscConfig+0x7c>
 80017e8:	4baf      	ldr	r3, [pc, #700]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4bae      	ldr	r3, [pc, #696]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	0249      	lsls	r1, r1, #9
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e02f      	b.n	8001858 <HAL_RCC_OscConfig+0xdc>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10c      	bne.n	800181a <HAL_RCC_OscConfig+0x9e>
 8001800:	4ba9      	ldr	r3, [pc, #676]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4ba8      	ldr	r3, [pc, #672]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001806:	49a9      	ldr	r1, [pc, #676]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001808:	400a      	ands	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	4ba6      	ldr	r3, [pc, #664]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4ba5      	ldr	r3, [pc, #660]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001812:	49a7      	ldr	r1, [pc, #668]	; (8001ab0 <HAL_RCC_OscConfig+0x334>)
 8001814:	400a      	ands	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	e01e      	b.n	8001858 <HAL_RCC_OscConfig+0xdc>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b05      	cmp	r3, #5
 8001820:	d10e      	bne.n	8001840 <HAL_RCC_OscConfig+0xc4>
 8001822:	4ba1      	ldr	r3, [pc, #644]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4ba0      	ldr	r3, [pc, #640]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	02c9      	lsls	r1, r1, #11
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	4b9d      	ldr	r3, [pc, #628]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b9c      	ldr	r3, [pc, #624]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	0249      	lsls	r1, r1, #9
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0xdc>
 8001840:	4b99      	ldr	r3, [pc, #612]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b98      	ldr	r3, [pc, #608]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001846:	4999      	ldr	r1, [pc, #612]	; (8001aac <HAL_RCC_OscConfig+0x330>)
 8001848:	400a      	ands	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	4b96      	ldr	r3, [pc, #600]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b95      	ldr	r3, [pc, #596]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001852:	4997      	ldr	r1, [pc, #604]	; (8001ab0 <HAL_RCC_OscConfig+0x334>)
 8001854:	400a      	ands	r2, r1
 8001856:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d014      	beq.n	800188a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fca0 	bl	80011a4 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186a:	f7ff fc9b 	bl	80011a4 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	; 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e28a      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187c:	4b8a      	ldr	r3, [pc, #552]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	029b      	lsls	r3, r3, #10
 8001884:	4013      	ands	r3, r2
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0xee>
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fc8b 	bl	80011a4 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fc86 	bl	80011a4 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e275      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b80      	ldr	r3, [pc, #512]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	029b      	lsls	r3, r3, #10
 80018ae:	4013      	ands	r3, r2
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x118>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d100      	bne.n	80018c2 <HAL_RCC_OscConfig+0x146>
 80018c0:	e069      	b.n	8001996 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018c2:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	220c      	movs	r2, #12
 80018c8:	4013      	ands	r3, r2
 80018ca:	d00b      	beq.n	80018e4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018cc:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	220c      	movs	r2, #12
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d11c      	bne.n	8001912 <HAL_RCC_OscConfig+0x196>
 80018d8:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	4013      	ands	r3, r2
 80018e2:	d116      	bne.n	8001912 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e4:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2202      	movs	r2, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	d005      	beq.n	80018fa <HAL_RCC_OscConfig+0x17e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e24b      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	4b6b      	ldr	r3, [pc, #428]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	22f8      	movs	r2, #248	; 0xf8
 8001900:	4393      	bics	r3, r2
 8001902:	0019      	movs	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	00da      	lsls	r2, r3, #3
 800190a:	4b67      	ldr	r3, [pc, #412]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001910:	e041      	b.n	8001996 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d024      	beq.n	8001964 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b62      	ldr	r3, [pc, #392]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001920:	2101      	movs	r1, #1
 8001922:	430a      	orrs	r2, r1
 8001924:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fc3d 	bl	80011a4 <HAL_GetTick>
 800192a:	0003      	movs	r3, r0
 800192c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fc38 	bl	80011a4 <HAL_GetTick>
 8001934:	0002      	movs	r2, r0
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e227      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b59      	ldr	r3, [pc, #356]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d0f1      	beq.n	8001930 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	22f8      	movs	r2, #248	; 0xf8
 8001952:	4393      	bics	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00da      	lsls	r2, r3, #3
 800195c:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e018      	b.n	8001996 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001964:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b4f      	ldr	r3, [pc, #316]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800196a:	2101      	movs	r1, #1
 800196c:	438a      	bics	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc18 	bl	80011a4 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197a:	f7ff fc13 	bl	80011a4 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e202      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198c:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d1f1      	bne.n	800197a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2208      	movs	r2, #8
 800199c:	4013      	ands	r3, r2
 800199e:	d036      	beq.n	8001a0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d019      	beq.n	80019dc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ac:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b4:	f7ff fbf6 	bl	80011a4 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff fbf1 	bl	80011a4 <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1e0      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d0:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2202      	movs	r2, #2
 80019d6:	4013      	ands	r3, r2
 80019d8:	d0f1      	beq.n	80019be <HAL_RCC_OscConfig+0x242>
 80019da:	e018      	b.n	8001a0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019dc:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80019de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	438a      	bics	r2, r1
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7ff fbdc 	bl	80011a4 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f2:	f7ff fbd7 	bl	80011a4 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e1c6      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	2202      	movs	r2, #2
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d1f1      	bne.n	80019f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2204      	movs	r2, #4
 8001a14:	4013      	ands	r3, r2
 8001a16:	d100      	bne.n	8001a1a <HAL_RCC_OscConfig+0x29e>
 8001a18:	e0b4      	b.n	8001b84 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1a:	201f      	movs	r0, #31
 8001a1c:	183b      	adds	r3, r7, r0
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	055b      	lsls	r3, r3, #21
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d110      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0549      	lsls	r1, r1, #21
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	61da      	str	r2, [r3, #28]
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	69da      	ldr	r2, [r3, #28]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	055b      	lsls	r3, r3, #21
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a4a:	183b      	adds	r3, r7, r0
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCC_OscConfig+0x338>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d11a      	bne.n	8001a92 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_RCC_OscConfig+0x338>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_RCC_OscConfig+0x338>)
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	0049      	lsls	r1, r1, #1
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fb9b 	bl	80011a4 <HAL_GetTick>
 8001a6e:	0003      	movs	r3, r0
 8001a70:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a74:	f7ff fb96 	bl	80011a4 <HAL_GetTick>
 8001a78:	0002      	movs	r2, r0
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	; 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e185      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x338>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10e      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x33c>
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	621a      	str	r2, [r3, #32]
 8001aa6:	e035      	b.n	8001b14 <HAL_RCC_OscConfig+0x398>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	fffeffff 	.word	0xfffeffff
 8001ab0:	fffbffff 	.word	0xfffbffff
 8001ab4:	40007000 	.word	0x40007000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x35e>
 8001ac0:	4bb6      	ldr	r3, [pc, #728]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001ac2:	6a1a      	ldr	r2, [r3, #32]
 8001ac4:	4bb5      	ldr	r3, [pc, #724]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	621a      	str	r2, [r3, #32]
 8001acc:	4bb3      	ldr	r3, [pc, #716]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	4bb2      	ldr	r3, [pc, #712]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	621a      	str	r2, [r3, #32]
 8001ad8:	e01c      	b.n	8001b14 <HAL_RCC_OscConfig+0x398>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x380>
 8001ae2:	4bae      	ldr	r3, [pc, #696]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001ae4:	6a1a      	ldr	r2, [r3, #32]
 8001ae6:	4bad      	ldr	r3, [pc, #692]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001ae8:	2104      	movs	r1, #4
 8001aea:	430a      	orrs	r2, r1
 8001aec:	621a      	str	r2, [r3, #32]
 8001aee:	4bab      	ldr	r3, [pc, #684]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001af0:	6a1a      	ldr	r2, [r3, #32]
 8001af2:	4baa      	ldr	r3, [pc, #680]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001af4:	2101      	movs	r1, #1
 8001af6:	430a      	orrs	r2, r1
 8001af8:	621a      	str	r2, [r3, #32]
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0x398>
 8001afc:	4ba7      	ldr	r3, [pc, #668]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	4ba6      	ldr	r3, [pc, #664]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	438a      	bics	r2, r1
 8001b06:	621a      	str	r2, [r3, #32]
 8001b08:	4ba4      	ldr	r3, [pc, #656]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	4ba3      	ldr	r3, [pc, #652]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001b0e:	2104      	movs	r1, #4
 8001b10:	438a      	bics	r2, r1
 8001b12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d014      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fb42 	bl	80011a4 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff fb3d 	bl	80011a4 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	4a9b      	ldr	r2, [pc, #620]	; (8001da0 <HAL_RCC_OscConfig+0x624>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e12b      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3a:	4b98      	ldr	r3, [pc, #608]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
 8001b44:	e013      	b.n	8001b6e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fb2d 	bl	80011a4 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4e:	e009      	b.n	8001b64 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f7ff fb28 	bl	80011a4 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	4a91      	ldr	r2, [pc, #580]	; (8001da0 <HAL_RCC_OscConfig+0x624>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e116      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	4b8d      	ldr	r3, [pc, #564]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b6e:	231f      	movs	r3, #31
 8001b70:	18fb      	adds	r3, r7, r3
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b78:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001b7a:	69da      	ldr	r2, [r3, #28]
 8001b7c:	4b87      	ldr	r3, [pc, #540]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001b7e:	4989      	ldr	r1, [pc, #548]	; (8001da4 <HAL_RCC_OscConfig+0x628>)
 8001b80:	400a      	ands	r2, r1
 8001b82:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2210      	movs	r2, #16
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d063      	beq.n	8001c56 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d12a      	bne.n	8001bec <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b96:	4b81      	ldr	r3, [pc, #516]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9a:	4b80      	ldr	r3, [pc, #512]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ba2:	4b7e      	ldr	r3, [pc, #504]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba6:	4b7d      	ldr	r3, [pc, #500]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001ba8:	2101      	movs	r1, #1
 8001baa:	430a      	orrs	r2, r1
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff faf9 	bl	80011a4 <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bb8:	f7ff faf4 	bl	80011a4 <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e0e3      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001bca:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0f1      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bd4:	4b71      	ldr	r3, [pc, #452]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	22f8      	movs	r2, #248	; 0xf8
 8001bda:	4393      	bics	r3, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	00da      	lsls	r2, r3, #3
 8001be4:	4b6d      	ldr	r3, [pc, #436]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bea:	e034      	b.n	8001c56 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	3305      	adds	r3, #5
 8001bf2:	d111      	bne.n	8001c18 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bf4:	4b69      	ldr	r3, [pc, #420]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf8:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001bfa:	2104      	movs	r1, #4
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c00:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c04:	22f8      	movs	r2, #248	; 0xf8
 8001c06:	4393      	bics	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	00da      	lsls	r2, r3, #3
 8001c10:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
 8001c16:	e01e      	b.n	8001c56 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c18:	4b60      	ldr	r3, [pc, #384]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1c:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c1e:	2104      	movs	r1, #4
 8001c20:	430a      	orrs	r2, r1
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c24:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c28:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fab8 	bl	80011a4 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c3a:	f7ff fab3 	bl	80011a4 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0a2      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c50:	2202      	movs	r2, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d1f1      	bne.n	8001c3a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d100      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4e4>
 8001c5e:	e097      	b.n	8001d90 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c60:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	220c      	movs	r2, #12
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d100      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4f2>
 8001c6c:	e06b      	b.n	8001d46 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d14c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001c7c:	494a      	ldr	r1, [pc, #296]	; (8001da8 <HAL_RCC_OscConfig+0x62c>)
 8001c7e:	400a      	ands	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fa8f 	bl	80011a4 <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff fa8a 	bl	80011a4 <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e079      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	049b      	lsls	r3, r3, #18
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	220f      	movs	r2, #15
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb8:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a3a      	ldr	r2, [pc, #232]	; (8001dac <HAL_RCC_OscConfig+0x630>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	0449      	lsls	r1, r1, #17
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fa5d 	bl	80011a4 <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff fa58 	bl	80011a4 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e047      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	049b      	lsls	r3, r3, #18
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x574>
 8001d0e:	e03f      	b.n	8001d90 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001d16:	4924      	ldr	r1, [pc, #144]	; (8001da8 <HAL_RCC_OscConfig+0x62c>)
 8001d18:	400a      	ands	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fa42 	bl	80011a4 <HAL_GetTick>
 8001d20:	0003      	movs	r3, r0
 8001d22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d26:	f7ff fa3d 	bl	80011a4 <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e02c      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	049b      	lsls	r3, r3, #18
 8001d40:	4013      	ands	r3, r2
 8001d42:	d1f0      	bne.n	8001d26 <HAL_RCC_OscConfig+0x5aa>
 8001d44:	e024      	b.n	8001d90 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e01f      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_RCC_OscConfig+0x620>)
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	025b      	lsls	r3, r3, #9
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d10e      	bne.n	8001d8c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	220f      	movs	r2, #15
 8001d72:	401a      	ands	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	23f0      	movs	r3, #240	; 0xf0
 8001d80:	039b      	lsls	r3, r3, #14
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b008      	add	sp, #32
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	00001388 	.word	0x00001388
 8001da4:	efffffff 	.word	0xefffffff
 8001da8:	feffffff 	.word	0xfeffffff
 8001dac:	ffc2ffff 	.word	0xffc2ffff

08001db0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b3      	b.n	8001f2c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b5b      	ldr	r3, [pc, #364]	; (8001f34 <HAL_RCC_ClockConfig+0x184>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d911      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <HAL_RCC_ClockConfig+0x184>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4393      	bics	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	4b55      	ldr	r3, [pc, #340]	; (8001f34 <HAL_RCC_ClockConfig+0x184>)
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_ClockConfig+0x184>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	4013      	ands	r3, r2
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e09a      	b.n	8001f2c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d015      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2204      	movs	r2, #4
 8001e06:	4013      	ands	r3, r2
 8001e08:	d006      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e0a:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001e10:	21e0      	movs	r1, #224	; 0xe0
 8001e12:	00c9      	lsls	r1, r1, #3
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	22f0      	movs	r2, #240	; 0xf0
 8001e1e:	4393      	bics	r3, r2
 8001e20:	0019      	movs	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	d040      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	4013      	ands	r3, r2
 8001e48:	d114      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e06e      	b.n	8001f2c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	049b      	lsls	r3, r3, #18
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d108      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e062      	b.n	8001f2c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e66:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e05b      	b.n	8001f2c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4393      	bics	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e88:	f7ff f98c 	bl	80011a4 <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e90:	e009      	b.n	8001ea6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e92:	f7ff f987 	bl	80011a4 <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <HAL_RCC_ClockConfig+0x18c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e042      	b.n	8001f2c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	220c      	movs	r2, #12
 8001eac:	401a      	ands	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1ec      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <HAL_RCC_ClockConfig+0x184>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d211      	bcs.n	8001eea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_ClockConfig+0x184>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4393      	bics	r3, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_RCC_ClockConfig+0x184>)
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_RCC_ClockConfig+0x184>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4013      	ands	r3, r2
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e020      	b.n	8001f2c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <HAL_RCC_ClockConfig+0x190>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f08:	f000 f820 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8001f0c:	0001      	movs	r1, r0
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x188>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	220f      	movs	r2, #15
 8001f16:	4013      	ands	r3, r2
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x194>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	000a      	movs	r2, r1
 8001f1e:	40da      	lsrs	r2, r3
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x198>)
 8001f22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f7ff f8f7 	bl	8001118 <HAL_InitTick>
  
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b004      	add	sp, #16
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	00001388 	.word	0x00001388
 8001f40:	fffff8ff 	.word	0xfffff8ff
 8001f44:	08004e58 	.word	0x08004e58
 8001f48:	20000028 	.word	0x20000028

08001f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	220c      	movs	r2, #12
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x30>
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x36>
 8001f7a:	e02c      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f7e:	613b      	str	r3, [r7, #16]
      break;
 8001f80:	e02c      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0c9b      	lsrs	r3, r3, #18
 8001f86:	220f      	movs	r2, #15
 8001f88:	4013      	ands	r3, r2
 8001f8a:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	220f      	movs	r2, #15
 8001f96:	4013      	ands	r3, r2
 8001f98:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	4810      	ldr	r0, [pc, #64]	; (8001fec <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fac:	f7fe f8b4 	bl	8000118 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4353      	muls	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e009      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	000a      	movs	r2, r1
 8001fc0:	0152      	lsls	r2, r2, #5
 8001fc2:	1a52      	subs	r2, r2, r1
 8001fc4:	0193      	lsls	r3, r2, #6
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	185b      	adds	r3, r3, r1
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	613b      	str	r3, [r7, #16]
      break;
 8001fd4:	e002      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fd8:	613b      	str	r3, [r7, #16]
      break;
 8001fda:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fdc:	693b      	ldr	r3, [r7, #16]
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b006      	add	sp, #24
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	08004e70 	.word	0x08004e70
 8001ff4:	08004e80 	.word	0x08004e80

08001ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ffc:	4b02      	ldr	r3, [pc, #8]	; (8002008 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	20000028 	.word	0x20000028

0800200c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002010:	f7ff fff2 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002014:	0001      	movs	r1, r0
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	2207      	movs	r2, #7
 800201e:	4013      	ands	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002022:	5cd3      	ldrb	r3, [r2, r3]
 8002024:	40d9      	lsrs	r1, r3
 8002026:	000b      	movs	r3, r1
}    
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	40021000 	.word	0x40021000
 8002034:	08004e68 	.word	0x08004e68

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	025b      	lsls	r3, r3, #9
 8002050:	4013      	ands	r3, r2
 8002052:	d100      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002054:	e08e      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2017      	movs	r0, #23
 8002058:	183b      	adds	r3, r7, r0
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205e:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002060:	69da      	ldr	r2, [r3, #28]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	055b      	lsls	r3, r3, #21
 8002066:	4013      	ands	r3, r2
 8002068:	d110      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	4b54      	ldr	r3, [pc, #336]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	0549      	lsls	r1, r1, #21
 8002074:	430a      	orrs	r2, r1
 8002076:	61da      	str	r2, [r3, #28]
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800207a:	69da      	ldr	r2, [r3, #28]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	055b      	lsls	r3, r3, #21
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	183b      	adds	r3, r7, r0
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4013      	ands	r3, r2
 8002096:	d11a      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002098:	4b49      	ldr	r3, [pc, #292]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	0049      	lsls	r1, r1, #1
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7ff f87d 	bl	80011a4 <HAL_GetTick>
 80020aa:	0003      	movs	r3, r0
 80020ac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	e008      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b0:	f7ff f878 	bl	80011a4 <HAL_GetTick>
 80020b4:	0002      	movs	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e077      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	23c0      	movs	r3, #192	; 0xc0
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d034      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	23c0      	movs	r3, #192	; 0xc0
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4013      	ands	r3, r2
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d02c      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f0:	4b32      	ldr	r3, [pc, #200]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a33      	ldr	r2, [pc, #204]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	0249      	lsls	r1, r1, #9
 8002104:	430a      	orrs	r2, r1
 8002106:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002108:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800210e:	492e      	ldr	r1, [pc, #184]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002110:	400a      	ands	r2, r1
 8002112:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff f83f 	bl	80011a4 <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	e009      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff f83a 	bl	80011a4 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	4a25      	ldr	r2, [pc, #148]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e038      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d0f0      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800215a:	430a      	orrs	r2, r1
 800215c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d105      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800216e:	4918      	ldr	r1, [pc, #96]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002170:	400a      	ands	r2, r1
 8002172:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2201      	movs	r2, #1
 800217a:	4013      	ands	r3, r2
 800217c:	d009      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	2203      	movs	r2, #3
 8002184:	4393      	bics	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800218e:	430a      	orrs	r2, r1
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2220      	movs	r2, #32
 8002198:	4013      	ands	r3, r2
 800219a:	d009      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	2210      	movs	r2, #16
 80021a2:	4393      	bics	r3, r2
 80021a4:	0019      	movs	r1, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b006      	add	sp, #24
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
 80021c4:	fffffcff 	.word	0xfffffcff
 80021c8:	fffeffff 	.word	0xfffeffff
 80021cc:	00001388 	.word	0x00001388
 80021d0:	efffffff 	.word	0xefffffff

080021d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021dc:	230f      	movs	r3, #15
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e081      	b.n	80022f2 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7f5b      	ldrb	r3, [r3, #29]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f7fe fa8b 	bl	800071c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2210      	movs	r2, #16
 8002214:	4013      	ands	r3, r2
 8002216:	2b10      	cmp	r3, #16
 8002218:	d05c      	beq.n	80022d4 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	22ca      	movs	r2, #202	; 0xca
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2253      	movs	r2, #83	; 0x53
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800222a:	250f      	movs	r5, #15
 800222c:	197c      	adds	r4, r7, r5
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 f9c5 	bl	80025c0 <RTC_EnterInitMode>
 8002236:	0003      	movs	r3, r0
 8002238:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800223a:	0028      	movs	r0, r5
 800223c:	183b      	adds	r3, r7, r0
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d12c      	bne.n	800229e <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	492b      	ldr	r1, [pc, #172]	; (80022fc <HAL_RTC_Init+0x128>)
 8002250:	400a      	ands	r2, r1
 8002252:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6899      	ldr	r1, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68d2      	ldr	r2, [r2, #12]
 800227a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6919      	ldr	r1, [r3, #16]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	041a      	lsls	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002290:	183c      	adds	r4, r7, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 f9d6 	bl	8002646 <RTC_ExitInitMode>
 800229a:	0003      	movs	r3, r0
 800229c:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800229e:	230f      	movs	r3, #15
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d110      	bne.n	80022ca <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4913      	ldr	r1, [pc, #76]	; (8002300 <HAL_RTC_Init+0x12c>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	22ff      	movs	r2, #255	; 0xff
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
 80022d2:	e003      	b.n	80022dc <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80022d4:	230f      	movs	r3, #15
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80022dc:	230f      	movs	r3, #15
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80022ec:	230f      	movs	r3, #15
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	781b      	ldrb	r3, [r3, #0]
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bdb0      	pop	{r4, r5, r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	ff8fffbf 	.word	0xff8fffbf
 8002300:	fffbffff 	.word	0xfffbffff

08002304 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002304:	b5b0      	push	{r4, r5, r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	7f1b      	ldrb	r3, [r3, #28]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_RTC_SetTime+0x1c>
 800231c:	2302      	movs	r3, #2
 800231e:	e08e      	b.n	800243e <HAL_RTC_SetTime+0x13a>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2202      	movs	r2, #2
 800232a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d125      	bne.n	800237e <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2240      	movs	r2, #64	; 0x40
 800233a:	4013      	ands	r3, r2
 800233c:	d102      	bne.n	8002344 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	0018      	movs	r0, r3
 800234a:	f000 f9a5 	bl	8002698 <RTC_ByteToBcd2>
 800234e:	0003      	movs	r3, r0
 8002350:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	785b      	ldrb	r3, [r3, #1]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 f99e 	bl	8002698 <RTC_ByteToBcd2>
 800235c:	0003      	movs	r3, r0
 800235e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002360:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	789b      	ldrb	r3, [r3, #2]
 8002366:	0018      	movs	r0, r3
 8002368:	f000 f996 	bl	8002698 <RTC_ByteToBcd2>
 800236c:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800236e:	0022      	movs	r2, r4
 8002370:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	78db      	ldrb	r3, [r3, #3]
 8002376:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e017      	b.n	80023ae <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	4013      	ands	r3, r2
 8002388:	d102      	bne.n	8002390 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2200      	movs	r2, #0
 800238e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800239c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80023a2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	78db      	ldrb	r3, [r3, #3]
 80023a8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	22ca      	movs	r2, #202	; 0xca
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2253      	movs	r2, #83	; 0x53
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80023be:	2513      	movs	r5, #19
 80023c0:	197c      	adds	r4, r7, r5
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f8fb 	bl	80025c0 <RTC_EnterInitMode>
 80023ca:	0003      	movs	r3, r0
 80023cc:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80023ce:	0028      	movs	r0, r5
 80023d0:	183b      	adds	r3, r7, r0
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d120      	bne.n	800241a <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	491a      	ldr	r1, [pc, #104]	; (8002448 <HAL_RTC_SetTime+0x144>)
 80023e0:	400a      	ands	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4917      	ldr	r1, [pc, #92]	; (800244c <HAL_RTC_SetTime+0x148>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	431a      	orrs	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800240c:	183c      	adds	r4, r7, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0018      	movs	r0, r3
 8002412:	f000 f918 	bl	8002646 <RTC_ExitInitMode>
 8002416:	0003      	movs	r3, r0
 8002418:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800241a:	2313      	movs	r3, #19
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	22ff      	movs	r2, #255	; 0xff
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	771a      	strb	r2, [r3, #28]

  return status;
 8002438:	2313      	movs	r3, #19
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	781b      	ldrb	r3, [r3, #0]
}
 800243e:	0018      	movs	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	b006      	add	sp, #24
 8002444:	bdb0      	pop	{r4, r5, r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	007f7f7f 	.word	0x007f7f7f
 800244c:	fffbffff 	.word	0xfffbffff

08002450 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	7f1b      	ldrb	r3, [r3, #28]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_RTC_SetDate+0x1c>
 8002468:	2302      	movs	r3, #2
 800246a:	e07a      	b.n	8002562 <HAL_RTC_SetDate+0x112>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2202      	movs	r2, #2
 8002476:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10e      	bne.n	800249c <HAL_RTC_SetDate+0x4c>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	001a      	movs	r2, r3
 8002484:	2310      	movs	r3, #16
 8002486:	4013      	ands	r3, r2
 8002488:	d008      	beq.n	800249c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	785b      	ldrb	r3, [r3, #1]
 800248e:	2210      	movs	r2, #16
 8002490:	4393      	bics	r3, r2
 8002492:	b2db      	uxtb	r3, r3
 8002494:	330a      	adds	r3, #10
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d11c      	bne.n	80024dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	78db      	ldrb	r3, [r3, #3]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 f8f6 	bl	8002698 <RTC_ByteToBcd2>
 80024ac:	0003      	movs	r3, r0
 80024ae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	785b      	ldrb	r3, [r3, #1]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 f8ef 	bl	8002698 <RTC_ByteToBcd2>
 80024ba:	0003      	movs	r3, r0
 80024bc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80024be:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	789b      	ldrb	r3, [r3, #2]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 f8e7 	bl	8002698 <RTC_ByteToBcd2>
 80024ca:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80024cc:	0022      	movs	r2, r4
 80024ce:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e00e      	b.n	80024fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	78db      	ldrb	r3, [r3, #3]
 80024e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80024e8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80024ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	22ca      	movs	r2, #202	; 0xca
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2253      	movs	r2, #83	; 0x53
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800250a:	2513      	movs	r5, #19
 800250c:	197c      	adds	r4, r7, r5
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0018      	movs	r0, r3
 8002512:	f000 f855 	bl	80025c0 <RTC_EnterInitMode>
 8002516:	0003      	movs	r3, r0
 8002518:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800251a:	0028      	movs	r0, r5
 800251c:	183b      	adds	r3, r7, r0
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4910      	ldr	r1, [pc, #64]	; (800256c <HAL_RTC_SetDate+0x11c>)
 800252c:	400a      	ands	r2, r1
 800252e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002530:	183c      	adds	r4, r7, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	0018      	movs	r0, r3
 8002536:	f000 f886 	bl	8002646 <RTC_ExitInitMode>
 800253a:	0003      	movs	r3, r0
 800253c:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800253e:	2313      	movs	r3, #19
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	22ff      	movs	r2, #255	; 0xff
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]

  return status;
 800255c:	2313      	movs	r3, #19
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	781b      	ldrb	r3, [r3, #0]
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b006      	add	sp, #24
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	00ffff3f 	.word	0x00ffff3f

08002570 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_RTC_WaitForSynchro+0x4c>)
 8002582:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002584:	f7fe fe0e 	bl	80011a4 <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800258c:	e00a      	b.n	80025a4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800258e:	f7fe fe09 	bl	80011a4 <HAL_GetTick>
 8002592:	0002      	movs	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad2      	subs	r2, r2, r3
 8002598:	23fa      	movs	r3, #250	; 0xfa
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	429a      	cmp	r2, r3
 800259e:	d901      	bls.n	80025a4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e006      	b.n	80025b2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	4013      	ands	r3, r2
 80025ae:	d0ee      	beq.n	800258e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b004      	add	sp, #16
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	00017959 	.word	0x00017959

080025c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	230f      	movs	r3, #15
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	4013      	ands	r3, r2
 80025de:	d12b      	bne.n	8002638 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	430a      	orrs	r2, r1
 80025ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fe fdd8 	bl	80011a4 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025f8:	e013      	b.n	8002622 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025fa:	f7fe fdd3 	bl	80011a4 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	1ad2      	subs	r2, r2, r3
 8002604:	200f      	movs	r0, #15
 8002606:	183b      	adds	r3, r7, r0
 8002608:	1839      	adds	r1, r7, r0
 800260a:	7809      	ldrb	r1, [r1, #0]
 800260c:	7019      	strb	r1, [r3, #0]
 800260e:	23fa      	movs	r3, #250	; 0xfa
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	429a      	cmp	r2, r3
 8002614:	d905      	bls.n	8002622 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2204      	movs	r2, #4
 800261a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800261c:	183b      	adds	r3, r7, r0
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2240      	movs	r2, #64	; 0x40
 800262a:	4013      	ands	r3, r2
 800262c:	d104      	bne.n	8002638 <RTC_EnterInitMode+0x78>
 800262e:	230f      	movs	r3, #15
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d1e0      	bne.n	80025fa <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002638:	230f      	movs	r3, #15
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b004      	add	sp, #16
 8002644:	bd80      	pop	{r7, pc}

08002646 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002646:	b590      	push	{r4, r7, lr}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264e:	240f      	movs	r4, #15
 8002650:	193b      	adds	r3, r7, r4
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	438a      	bics	r2, r1
 8002664:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2220      	movs	r2, #32
 800266e:	4013      	ands	r3, r2
 8002670:	d10b      	bne.n	800268a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff ff7b 	bl	8002570 <HAL_RTC_WaitForSynchro>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d005      	beq.n	800268a <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2204      	movs	r2, #4
 8002682:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002684:	193b      	adds	r3, r7, r4
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800268a:	230f      	movs	r3, #15
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b005      	add	sp, #20
 8002696:	bd90      	pop	{r4, r7, pc}

08002698 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	0002      	movs	r2, r0
 80026a0:	1dfb      	adds	r3, r7, #7
 80026a2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80026a8:	e007      	b.n	80026ba <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3301      	adds	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80026b0:	1dfb      	adds	r3, r7, #7
 80026b2:	1dfa      	adds	r2, r7, #7
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	3a0a      	subs	r2, #10
 80026b8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80026ba:	1dfb      	adds	r3, r7, #7
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b09      	cmp	r3, #9
 80026c0:	d8f3      	bhi.n	80026aa <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	1dfb      	adds	r3, r7, #7
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b2db      	uxtb	r3, r3
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b004      	add	sp, #16
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0a8      	b.n	8002840 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	2382      	movs	r3, #130	; 0x82
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	429a      	cmp	r2, r3
 8002700:	d009      	beq.n	8002716 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	61da      	str	r2, [r3, #28]
 8002708:	e005      	b.n	8002716 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	225d      	movs	r2, #93	; 0x5d
 8002720:	5c9b      	ldrb	r3, [r3, r2]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	225c      	movs	r2, #92	; 0x5c
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	0018      	movs	r0, r3
 8002734:	f7fe f80a 	bl	800074c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	225d      	movs	r2, #93	; 0x5d
 800273c:	2102      	movs	r1, #2
 800273e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2140      	movs	r1, #64	; 0x40
 800274c:	438a      	bics	r2, r1
 800274e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	23e0      	movs	r3, #224	; 0xe0
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	429a      	cmp	r2, r3
 800275a:	d902      	bls.n	8002762 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	e002      	b.n	8002768 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	015b      	lsls	r3, r3, #5
 8002766:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	23f0      	movs	r3, #240	; 0xf0
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	429a      	cmp	r2, r3
 8002772:	d008      	beq.n	8002786 <HAL_SPI_Init+0xaa>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	23e0      	movs	r3, #224	; 0xe0
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	429a      	cmp	r2, r3
 800277e:	d002      	beq.n	8002786 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	2382      	movs	r3, #130	; 0x82
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	401a      	ands	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	2384      	movs	r3, #132	; 0x84
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	400b      	ands	r3, r1
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2102      	movs	r1, #2
 80027a2:	400b      	ands	r3, r1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2101      	movs	r1, #1
 80027ac:	400b      	ands	r3, r1
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6999      	ldr	r1, [r3, #24]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	400b      	ands	r3, r1
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2138      	movs	r1, #56	; 0x38
 80027c2:	400b      	ands	r3, r1
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	400b      	ands	r3, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	0011      	movs	r1, r2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	401a      	ands	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	2204      	movs	r2, #4
 80027ec:	401a      	ands	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	2110      	movs	r1, #16
 80027f4:	400b      	ands	r3, r1
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	2108      	movs	r1, #8
 80027fe:	400b      	ands	r3, r1
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68d9      	ldr	r1, [r3, #12]
 8002806:	23f0      	movs	r3, #240	; 0xf0
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	400b      	ands	r3, r1
 800280c:	431a      	orrs	r2, r3
 800280e:	0011      	movs	r1, r2
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	401a      	ands	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4907      	ldr	r1, [pc, #28]	; (8002848 <HAL_SPI_Init+0x16c>)
 800282c:	400a      	ands	r2, r1
 800282e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	225d      	movs	r2, #93	; 0x5d
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bd80      	pop	{r7, pc}
 8002848:	fffff7ff 	.word	0xfffff7ff

0800284c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	1dbb      	adds	r3, r7, #6
 800285a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800285c:	231f      	movs	r3, #31
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	225c      	movs	r2, #92	; 0x5c
 8002868:	5c9b      	ldrb	r3, [r3, r2]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_SPI_Transmit+0x26>
 800286e:	2302      	movs	r3, #2
 8002870:	e147      	b.n	8002b02 <HAL_SPI_Transmit+0x2b6>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	225c      	movs	r2, #92	; 0x5c
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800287a:	f7fe fc93 	bl	80011a4 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002882:	2316      	movs	r3, #22
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	1dba      	adds	r2, r7, #6
 8002888:	8812      	ldrh	r2, [r2, #0]
 800288a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	225d      	movs	r2, #93	; 0x5d
 8002890:	5c9b      	ldrb	r3, [r3, r2]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d004      	beq.n	80028a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002898:	231f      	movs	r3, #31
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]
    goto error;
 80028a0:	e128      	b.n	8002af4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_SPI_Transmit+0x64>
 80028a8:	1dbb      	adds	r3, r7, #6
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d104      	bne.n	80028ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80028b0:	231f      	movs	r3, #31
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80028b8:	e11c      	b.n	8002af4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	225d      	movs	r2, #93	; 0x5d
 80028be:	2103      	movs	r1, #3
 80028c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1dba      	adds	r2, r7, #6
 80028d2:	8812      	ldrh	r2, [r2, #0]
 80028d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1dba      	adds	r2, r7, #6
 80028da:	8812      	ldrh	r2, [r2, #0]
 80028dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2244      	movs	r2, #68	; 0x44
 80028e8:	2100      	movs	r1, #0
 80028ea:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2246      	movs	r2, #70	; 0x46
 80028f0:	2100      	movs	r1, #0
 80028f2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	429a      	cmp	r2, r3
 800290a:	d110      	bne.n	800292e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2140      	movs	r1, #64	; 0x40
 8002918:	438a      	bics	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	01c9      	lsls	r1, r1, #7
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2240      	movs	r2, #64	; 0x40
 8002936:	4013      	ands	r3, r2
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d007      	beq.n	800294c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2140      	movs	r1, #64	; 0x40
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	23e0      	movs	r3, #224	; 0xe0
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	429a      	cmp	r2, r3
 8002956:	d952      	bls.n	80029fe <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <HAL_SPI_Transmit+0x11e>
 8002960:	2316      	movs	r3, #22
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d143      	bne.n	80029f2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	881a      	ldrh	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	1c9a      	adds	r2, r3, #2
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800298e:	e030      	b.n	80029f2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d112      	bne.n	80029c4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	1c9a      	adds	r2, r3, #2
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029c2:	e016      	b.n	80029f2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029c4:	f7fe fbee 	bl	80011a4 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d802      	bhi.n	80029da <HAL_SPI_Transmit+0x18e>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	3301      	adds	r3, #1
 80029d8:	d102      	bne.n	80029e0 <HAL_SPI_Transmit+0x194>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d108      	bne.n	80029f2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80029e0:	231f      	movs	r3, #31
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	2203      	movs	r2, #3
 80029e6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	225d      	movs	r2, #93	; 0x5d
 80029ec:	2101      	movs	r1, #1
 80029ee:	5499      	strb	r1, [r3, r2]
          goto error;
 80029f0:	e080      	b.n	8002af4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1c9      	bne.n	8002990 <HAL_SPI_Transmit+0x144>
 80029fc:	e053      	b.n	8002aa6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <HAL_SPI_Transmit+0x1c4>
 8002a06:	2316      	movs	r3, #22
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d145      	bne.n	8002a9c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002a36:	e031      	b.n	8002a9c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d113      	bne.n	8002a6e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	330c      	adds	r3, #12
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a6c:	e016      	b.n	8002a9c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a6e:	f7fe fb99 	bl	80011a4 <HAL_GetTick>
 8002a72:	0002      	movs	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d802      	bhi.n	8002a84 <HAL_SPI_Transmit+0x238>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	d102      	bne.n	8002a8a <HAL_SPI_Transmit+0x23e>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d108      	bne.n	8002a9c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002a8a:	231f      	movs	r3, #31
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2203      	movs	r2, #3
 8002a90:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	225d      	movs	r2, #93	; 0x5d
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a9a:	e02b      	b.n	8002af4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1c8      	bne.n	8002a38 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 fdf7 	bl	80036a0 <SPI_EndRxTxTransaction>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002ae2:	231f      	movs	r3, #31
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e003      	b.n	8002af4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	225d      	movs	r2, #93	; 0x5d
 8002af0:	2101      	movs	r1, #1
 8002af2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	225c      	movs	r2, #92	; 0x5c
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002afc:	231f      	movs	r3, #31
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	781b      	ldrb	r3, [r3, #0]
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b008      	add	sp, #32
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	1dbb      	adds	r3, r7, #6
 8002b1a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b1c:	2117      	movs	r1, #23
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	225d      	movs	r2, #93	; 0x5d
 8002b28:	5c9b      	ldrb	r3, [r3, r2]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d003      	beq.n	8002b38 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	2202      	movs	r2, #2
 8002b34:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b36:	e12b      	b.n	8002d90 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	2382      	movs	r3, #130	; 0x82
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d113      	bne.n	8002b6c <HAL_SPI_Receive+0x60>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10f      	bne.n	8002b6c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	225d      	movs	r2, #93	; 0x5d
 8002b50:	2104      	movs	r1, #4
 8002b52:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b54:	1dbb      	adds	r3, r7, #6
 8002b56:	881c      	ldrh	r4, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	0023      	movs	r3, r4
 8002b64:	f000 f924 	bl	8002db0 <HAL_SPI_TransmitReceive>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	e118      	b.n	8002d9e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	225c      	movs	r2, #92	; 0x5c
 8002b70:	5c9b      	ldrb	r3, [r3, r2]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_SPI_Receive+0x6e>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e111      	b.n	8002d9e <HAL_SPI_Receive+0x292>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	225c      	movs	r2, #92	; 0x5c
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b82:	f7fe fb0f 	bl	80011a4 <HAL_GetTick>
 8002b86:	0003      	movs	r3, r0
 8002b88:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_SPI_Receive+0x8c>
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002b98:	2317      	movs	r3, #23
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ba0:	e0f6      	b.n	8002d90 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	225d      	movs	r2, #93	; 0x5d
 8002ba6:	2104      	movs	r1, #4
 8002ba8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1dba      	adds	r2, r7, #6
 8002bba:	2144      	movs	r1, #68	; 0x44
 8002bbc:	8812      	ldrh	r2, [r2, #0]
 8002bbe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1dba      	adds	r2, r7, #6
 8002bc4:	2146      	movs	r1, #70	; 0x46
 8002bc6:	8812      	ldrh	r2, [r2, #0]
 8002bc8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	23e0      	movs	r3, #224	; 0xe0
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d908      	bls.n	8002c06 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	496a      	ldr	r1, [pc, #424]	; (8002da8 <HAL_SPI_Receive+0x29c>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	e008      	b.n	8002c18 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	0149      	lsls	r1, r1, #5
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d10f      	bne.n	8002c44 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2140      	movs	r1, #64	; 0x40
 8002c30:	438a      	bics	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	495b      	ldr	r1, [pc, #364]	; (8002dac <HAL_SPI_Receive+0x2a0>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b40      	cmp	r3, #64	; 0x40
 8002c50:	d007      	beq.n	8002c62 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	23e0      	movs	r3, #224	; 0xe0
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d900      	bls.n	8002c70 <HAL_SPI_Receive+0x164>
 8002c6e:	e071      	b.n	8002d54 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c70:	e035      	b.n	8002cde <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d117      	bne.n	8002cb0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	001a      	movs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2246      	movs	r2, #70	; 0x46
 8002ca0:	5a9b      	ldrh	r3, [r3, r2]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b299      	uxth	r1, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2246      	movs	r2, #70	; 0x46
 8002cac:	5299      	strh	r1, [r3, r2]
 8002cae:	e016      	b.n	8002cde <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cb0:	f7fe fa78 	bl	80011a4 <HAL_GetTick>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d802      	bhi.n	8002cc6 <HAL_SPI_Receive+0x1ba>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	d102      	bne.n	8002ccc <HAL_SPI_Receive+0x1c0>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d108      	bne.n	8002cde <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002ccc:	2317      	movs	r3, #23
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	225d      	movs	r2, #93	; 0x5d
 8002cd8:	2101      	movs	r1, #1
 8002cda:	5499      	strb	r1, [r3, r2]
          goto error;
 8002cdc:	e058      	b.n	8002d90 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2246      	movs	r2, #70	; 0x46
 8002ce2:	5a9b      	ldrh	r3, [r3, r2]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1c3      	bne.n	8002c72 <HAL_SPI_Receive+0x166>
 8002cea:	e039      	b.n	8002d60 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d115      	bne.n	8002d26 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	b292      	uxth	r2, r2
 8002d06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	1c9a      	adds	r2, r3, #2
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2246      	movs	r2, #70	; 0x46
 8002d16:	5a9b      	ldrh	r3, [r3, r2]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b299      	uxth	r1, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2246      	movs	r2, #70	; 0x46
 8002d22:	5299      	strh	r1, [r3, r2]
 8002d24:	e016      	b.n	8002d54 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d26:	f7fe fa3d 	bl	80011a4 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d802      	bhi.n	8002d3c <HAL_SPI_Receive+0x230>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	d102      	bne.n	8002d42 <HAL_SPI_Receive+0x236>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002d42:	2317      	movs	r3, #23
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2203      	movs	r2, #3
 8002d48:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	225d      	movs	r2, #93	; 0x5d
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]
          goto error;
 8002d52:	e01d      	b.n	8002d90 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2246      	movs	r2, #70	; 0x46
 8002d58:	5a9b      	ldrh	r3, [r3, r2]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1c5      	bne.n	8002cec <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 fc3c 	bl	80035e4 <SPI_EndRxTransaction>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002d7e:	2317      	movs	r3, #23
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e003      	b.n	8002d90 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	225d      	movs	r2, #93	; 0x5d
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	225c      	movs	r2, #92	; 0x5c
 8002d94:	2100      	movs	r1, #0
 8002d96:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d98:	2317      	movs	r3, #23
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	781b      	ldrb	r3, [r3, #0]
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b007      	add	sp, #28
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	ffffefff 	.word	0xffffefff
 8002dac:	ffffbfff 	.word	0xffffbfff

08002db0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	1cbb      	adds	r3, r7, #2
 8002dc0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dc6:	2323      	movs	r3, #35	; 0x23
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	225c      	movs	r2, #92	; 0x5c
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x2c>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e1c4      	b.n	8003166 <HAL_SPI_TransmitReceive+0x3b6>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	225c      	movs	r2, #92	; 0x5c
 8002de0:	2101      	movs	r1, #1
 8002de2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de4:	f7fe f9de 	bl	80011a4 <HAL_GetTick>
 8002de8:	0003      	movs	r3, r0
 8002dea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dec:	201b      	movs	r0, #27
 8002dee:	183b      	adds	r3, r7, r0
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	215d      	movs	r1, #93	; 0x5d
 8002df4:	5c52      	ldrb	r2, [r2, r1]
 8002df6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002dfe:	2312      	movs	r3, #18
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	1cba      	adds	r2, r7, #2
 8002e04:	8812      	ldrh	r2, [r2, #0]
 8002e06:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e08:	183b      	adds	r3, r7, r0
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d011      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0x84>
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	2382      	movs	r3, #130	; 0x82
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d107      	bne.n	8002e2a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <HAL_SPI_TransmitReceive+0x7a>
 8002e22:	183b      	adds	r3, r7, r0
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d004      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002e2a:	2323      	movs	r3, #35	; 0x23
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	2202      	movs	r2, #2
 8002e30:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e32:	e191      	b.n	8003158 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x98>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x98>
 8002e40:	1cbb      	adds	r3, r7, #2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002e48:	2323      	movs	r3, #35	; 0x23
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e50:	e182      	b.n	8003158 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	225d      	movs	r2, #93	; 0x5d
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d003      	beq.n	8002e66 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	225d      	movs	r2, #93	; 0x5d
 8002e62:	2105      	movs	r1, #5
 8002e64:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1cba      	adds	r2, r7, #2
 8002e76:	2146      	movs	r1, #70	; 0x46
 8002e78:	8812      	ldrh	r2, [r2, #0]
 8002e7a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1cba      	adds	r2, r7, #2
 8002e80:	2144      	movs	r1, #68	; 0x44
 8002e82:	8812      	ldrh	r2, [r2, #0]
 8002e84:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1cba      	adds	r2, r7, #2
 8002e90:	8812      	ldrh	r2, [r2, #0]
 8002e92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1cba      	adds	r2, r7, #2
 8002e98:	8812      	ldrh	r2, [r2, #0]
 8002e9a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	23e0      	movs	r3, #224	; 0xe0
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d908      	bls.n	8002ec6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	49ac      	ldr	r1, [pc, #688]	; (8003170 <HAL_SPI_TransmitReceive+0x3c0>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	e008      	b.n	8002ed8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0149      	lsls	r1, r1, #5
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d007      	beq.n	8002ef6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2140      	movs	r1, #64	; 0x40
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	23e0      	movs	r3, #224	; 0xe0
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d800      	bhi.n	8002f04 <HAL_SPI_TransmitReceive+0x154>
 8002f02:	e083      	b.n	800300c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_SPI_TransmitReceive+0x168>
 8002f0c:	2312      	movs	r3, #18
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d000      	beq.n	8002f18 <HAL_SPI_TransmitReceive+0x168>
 8002f16:	e06d      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	881a      	ldrh	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	1c9a      	adds	r2, r3, #2
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f3c:	e05a      	b.n	8002ff4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2202      	movs	r2, #2
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d11b      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x1d4>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x1d4>
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d113      	bne.n	8002f84 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d11c      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x21c>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2246      	movs	r2, #70	; 0x46
 8002f96:	5a9b      	ldrh	r3, [r3, r2]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	b292      	uxth	r2, r2
 8002faa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2246      	movs	r2, #70	; 0x46
 8002fba:	5a9b      	ldrh	r3, [r3, r2]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b299      	uxth	r1, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2246      	movs	r2, #70	; 0x46
 8002fc6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fcc:	f7fe f8ea 	bl	80011a4 <HAL_GetTick>
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d80b      	bhi.n	8002ff4 <HAL_SPI_TransmitReceive+0x244>
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	3301      	adds	r3, #1
 8002fe0:	d008      	beq.n	8002ff4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002fe2:	2323      	movs	r3, #35	; 0x23
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	225d      	movs	r2, #93	; 0x5d
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]
        goto error;
 8002ff2:	e0b1      	b.n	8003158 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d19f      	bne.n	8002f3e <HAL_SPI_TransmitReceive+0x18e>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2246      	movs	r2, #70	; 0x46
 8003002:	5a9b      	ldrh	r3, [r3, r2]
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d199      	bne.n	8002f3e <HAL_SPI_TransmitReceive+0x18e>
 800300a:	e089      	b.n	8003120 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x270>
 8003014:	2312      	movs	r3, #18
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d000      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x270>
 800301e:	e074      	b.n	800310a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	7812      	ldrb	r2, [r2, #0]
 800302c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003046:	e060      	b.n	800310a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2202      	movs	r2, #2
 8003050:	4013      	ands	r3, r2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d11c      	bne.n	8003090 <HAL_SPI_TransmitReceive+0x2e0>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d017      	beq.n	8003090 <HAL_SPI_TransmitReceive+0x2e0>
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	2b01      	cmp	r3, #1
 8003064:	d114      	bne.n	8003090 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2201      	movs	r2, #1
 8003098:	4013      	ands	r3, r2
 800309a:	2b01      	cmp	r3, #1
 800309c:	d11e      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x32c>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2246      	movs	r2, #70	; 0x46
 80030a2:	5a9b      	ldrh	r3, [r3, r2]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d018      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	001a      	movs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	7812      	ldrb	r2, [r2, #0]
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2246      	movs	r2, #70	; 0x46
 80030ca:	5a9b      	ldrh	r3, [r3, r2]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b299      	uxth	r1, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2246      	movs	r2, #70	; 0x46
 80030d6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030d8:	2301      	movs	r3, #1
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030dc:	f7fe f862 	bl	80011a4 <HAL_GetTick>
 80030e0:	0002      	movs	r2, r0
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d802      	bhi.n	80030f2 <HAL_SPI_TransmitReceive+0x342>
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	3301      	adds	r3, #1
 80030f0:	d102      	bne.n	80030f8 <HAL_SPI_TransmitReceive+0x348>
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d108      	bne.n	800310a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80030f8:	2323      	movs	r3, #35	; 0x23
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2203      	movs	r2, #3
 80030fe:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	225d      	movs	r2, #93	; 0x5d
 8003104:	2101      	movs	r1, #1
 8003106:	5499      	strb	r1, [r3, r2]
        goto error;
 8003108:	e026      	b.n	8003158 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d199      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x298>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2246      	movs	r2, #70	; 0x46
 8003118:	5a9b      	ldrh	r3, [r3, r2]
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d193      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	0018      	movs	r0, r3
 8003128:	f000 faba 	bl	80036a0 <SPI_EndRxTxTransaction>
 800312c:	1e03      	subs	r3, r0, #0
 800312e:	d006      	beq.n	800313e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003130:	2323      	movs	r3, #35	; 0x23
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	2b00      	cmp	r3, #0
 8003144:	d004      	beq.n	8003150 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003146:	2323      	movs	r3, #35	; 0x23
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e003      	b.n	8003158 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	225d      	movs	r2, #93	; 0x5d
 8003154:	2101      	movs	r1, #1
 8003156:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	225c      	movs	r2, #92	; 0x5c
 800315c:	2100      	movs	r1, #0
 800315e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003160:	2323      	movs	r3, #35	; 0x23
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	781b      	ldrb	r3, [r3, #0]
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b00a      	add	sp, #40	; 0x28
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	ffffefff 	.word	0xffffefff

08003174 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2240      	movs	r2, #64	; 0x40
 8003190:	4013      	ands	r3, r2
 8003192:	d10d      	bne.n	80031b0 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2201      	movs	r2, #1
 8003198:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800319a:	d009      	beq.n	80031b0 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2240      	movs	r2, #64	; 0x40
 80031a0:	4013      	ands	r3, r2
 80031a2:	d005      	beq.n	80031b0 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	0010      	movs	r0, r2
 80031ac:	4798      	blx	r3
    return;
 80031ae:	e0c5      	b.n	800333c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2202      	movs	r2, #2
 80031b4:	4013      	ands	r3, r2
 80031b6:	d009      	beq.n	80031cc <HAL_SPI_IRQHandler+0x58>
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	4013      	ands	r3, r2
 80031be:	d005      	beq.n	80031cc <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	0010      	movs	r0, r2
 80031c8:	4798      	blx	r3
    return;
 80031ca:	e0b7      	b.n	800333c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2220      	movs	r2, #32
 80031d0:	4013      	ands	r3, r2
 80031d2:	d109      	bne.n	80031e8 <HAL_SPI_IRQHandler+0x74>
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2240      	movs	r2, #64	; 0x40
 80031d8:	4013      	ands	r3, r2
 80031da:	d105      	bne.n	80031e8 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4013      	ands	r3, r2
 80031e4:	d100      	bne.n	80031e8 <HAL_SPI_IRQHandler+0x74>
 80031e6:	e0a9      	b.n	800333c <HAL_SPI_IRQHandler+0x1c8>
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2220      	movs	r2, #32
 80031ec:	4013      	ands	r3, r2
 80031ee:	d100      	bne.n	80031f2 <HAL_SPI_IRQHandler+0x7e>
 80031f0:	e0a4      	b.n	800333c <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2240      	movs	r2, #64	; 0x40
 80031f6:	4013      	ands	r3, r2
 80031f8:	d023      	beq.n	8003242 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	225d      	movs	r2, #93	; 0x5d
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b03      	cmp	r3, #3
 8003204:	d011      	beq.n	800322a <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320a:	2204      	movs	r2, #4
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	e00b      	b.n	8003242 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	693b      	ldr	r3, [r7, #16]
        return;
 8003240:	e07c      	b.n	800333c <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2220      	movs	r2, #32
 8003246:	4013      	ands	r3, r2
 8003248:	d014      	beq.n	8003274 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	2201      	movs	r2, #1
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2140      	movs	r1, #64	; 0x40
 800326e:	438a      	bics	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4013      	ands	r3, r2
 800327c:	d00c      	beq.n	8003298 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003282:	2208      	movs	r2, #8
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	2b00      	cmp	r3, #0
 800329e:	d04c      	beq.n	800333a <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	21e0      	movs	r1, #224	; 0xe0
 80032ac:	438a      	bics	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	225d      	movs	r2, #93	; 0x5d
 80032b4:	2101      	movs	r1, #1
 80032b6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2202      	movs	r2, #2
 80032bc:	4013      	ands	r3, r2
 80032be:	d103      	bne.n	80032c8 <HAL_SPI_IRQHandler+0x154>
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2201      	movs	r2, #1
 80032c4:	4013      	ands	r3, r2
 80032c6:	d032      	beq.n	800332e <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2103      	movs	r1, #3
 80032d4:	438a      	bics	r2, r1
 80032d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d010      	beq.n	8003302 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_SPI_IRQHandler+0x1d0>)
 80032e6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7fe f879 	bl	80013e4 <HAL_DMA_Abort_IT>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d005      	beq.n	8003302 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	2b00      	cmp	r3, #0
 8003308:	d016      	beq.n	8003338 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <HAL_SPI_IRQHandler+0x1d0>)
 8003310:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	0018      	movs	r0, r3
 8003318:	f7fe f864 	bl	80013e4 <HAL_DMA_Abort_IT>
 800331c:	1e03      	subs	r3, r0, #0
 800331e:	d00b      	beq.n	8003338 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800332c:	e004      	b.n	8003338 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 f809 	bl	8003348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003336:	e000      	b.n	800333a <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8003338:	46c0      	nop			; (mov r8, r8)
    return;
 800333a:	46c0      	nop			; (mov r8, r8)
  }
}
 800333c:	46bd      	mov	sp, r7
 800333e:	b008      	add	sp, #32
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	08003359 	.word	0x08003359

08003348 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}

08003358 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2246      	movs	r2, #70	; 0x46
 800336a:	2100      	movs	r1, #0
 800336c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	0018      	movs	r0, r3
 8003378:	f7ff ffe6 	bl	8003348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b004      	add	sp, #16
 8003382:	bd80      	pop	{r7, pc}

08003384 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	1dfb      	adds	r3, r7, #7
 8003392:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003394:	f7fd ff06 	bl	80011a4 <HAL_GetTick>
 8003398:	0002      	movs	r2, r0
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	18d3      	adds	r3, r2, r3
 80033a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033a4:	f7fd fefe 	bl	80011a4 <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	015b      	lsls	r3, r3, #5
 80033b2:	0d1b      	lsrs	r3, r3, #20
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	4353      	muls	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ba:	e058      	b.n	800346e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	d055      	beq.n	800346e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033c2:	f7fd feef 	bl	80011a4 <HAL_GetTick>
 80033c6:	0002      	movs	r2, r0
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d902      	bls.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d142      	bne.n	800345e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	21e0      	movs	r1, #224	; 0xe0
 80033e4:	438a      	bics	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	2382      	movs	r3, #130	; 0x82
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d113      	bne.n	800341c <SPI_WaitFlagStateUntilTimeout+0x98>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d005      	beq.n	800340c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	429a      	cmp	r2, r3
 800340a:	d107      	bne.n	800341c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2140      	movs	r1, #64	; 0x40
 8003418:	438a      	bics	r2, r1
 800341a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	019b      	lsls	r3, r3, #6
 8003424:	429a      	cmp	r2, r3
 8003426:	d110      	bne.n	800344a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	491a      	ldr	r1, [pc, #104]	; (800349c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003434:	400a      	ands	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	0189      	lsls	r1, r1, #6
 8003446:	430a      	orrs	r2, r1
 8003448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	225d      	movs	r2, #93	; 0x5d
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	225c      	movs	r2, #92	; 0x5c
 8003456:	2100      	movs	r1, #0
 8003458:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e017      	b.n	800348e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	3b01      	subs	r3, #1
 800346c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	4013      	ands	r3, r2
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	425a      	negs	r2, r3
 800347e:	4153      	adcs	r3, r2
 8003480:	b2db      	uxtb	r3, r3
 8003482:	001a      	movs	r2, r3
 8003484:	1dfb      	adds	r3, r7, #7
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d197      	bne.n	80033bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b008      	add	sp, #32
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	20000028 	.word	0x20000028
 800349c:	ffffdfff 	.word	0xffffdfff

080034a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034ae:	2317      	movs	r3, #23
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034b6:	f7fd fe75 	bl	80011a4 <HAL_GetTick>
 80034ba:	0002      	movs	r2, r0
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	18d3      	adds	r3, r2, r3
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80034c6:	f7fd fe6d 	bl	80011a4 <HAL_GetTick>
 80034ca:	0003      	movs	r3, r0
 80034cc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034d6:	4b41      	ldr	r3, [pc, #260]	; (80035dc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	0013      	movs	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	00da      	lsls	r2, r3, #3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	0d1b      	lsrs	r3, r3, #20
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	4353      	muls	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034ec:	e068      	b.n	80035c0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	23c0      	movs	r3, #192	; 0xc0
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d10a      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0x6e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d107      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	2117      	movs	r1, #23
 8003506:	187b      	adds	r3, r7, r1
 8003508:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800350a:	187b      	adds	r3, r7, r1
 800350c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	3301      	adds	r3, #1
 8003512:	d055      	beq.n	80035c0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003514:	f7fd fe46 	bl	80011a4 <HAL_GetTick>
 8003518:	0002      	movs	r2, r0
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	429a      	cmp	r2, r3
 8003522:	d902      	bls.n	800352a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d142      	bne.n	80035b0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	21e0      	movs	r1, #224	; 0xe0
 8003536:	438a      	bics	r2, r1
 8003538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	2382      	movs	r3, #130	; 0x82
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	429a      	cmp	r2, r3
 8003544:	d113      	bne.n	800356e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	429a      	cmp	r2, r3
 8003550:	d005      	beq.n	800355e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	429a      	cmp	r2, r3
 800355c:	d107      	bne.n	800356e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	438a      	bics	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	429a      	cmp	r2, r3
 8003578:	d110      	bne.n	800359c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4916      	ldr	r1, [pc, #88]	; (80035e0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003586:	400a      	ands	r2, r1
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2180      	movs	r1, #128	; 0x80
 8003596:	0189      	lsls	r1, r1, #6
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	225d      	movs	r2, #93	; 0x5d
 80035a0:	2101      	movs	r1, #1
 80035a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	225c      	movs	r2, #92	; 0x5c
 80035a8:	2100      	movs	r1, #0
 80035aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e010      	b.n	80035d2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	3b01      	subs	r3, #1
 80035be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d18e      	bne.n	80034ee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	0018      	movs	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b00a      	add	sp, #40	; 0x28
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	20000028 	.word	0x20000028
 80035e0:	ffffdfff 	.word	0xffffdfff

080035e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	2382      	movs	r3, #130	; 0x82
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d113      	bne.n	8003624 <SPI_EndRxTransaction+0x40>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	429a      	cmp	r2, r3
 8003606:	d005      	beq.n	8003614 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	429a      	cmp	r2, r3
 8003612:	d107      	bne.n	8003624 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2140      	movs	r1, #64	; 0x40
 8003620:	438a      	bics	r2, r1
 8003622:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	0013      	movs	r3, r2
 800362e:	2200      	movs	r2, #0
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	f7ff fea7 	bl	8003384 <SPI_WaitFlagStateUntilTimeout>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d007      	beq.n	800364a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363e:	2220      	movs	r2, #32
 8003640:	431a      	orrs	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e026      	b.n	8003698 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	2382      	movs	r3, #130	; 0x82
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	429a      	cmp	r2, r3
 8003654:	d11f      	bne.n	8003696 <SPI_EndRxTransaction+0xb2>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	429a      	cmp	r2, r3
 8003660:	d005      	beq.n	800366e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	429a      	cmp	r2, r3
 800366c:	d113      	bne.n	8003696 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	23c0      	movs	r3, #192	; 0xc0
 8003672:	00d9      	lsls	r1, r3, #3
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	0013      	movs	r3, r2
 800367c:	2200      	movs	r2, #0
 800367e:	f7ff ff0f 	bl	80034a0 <SPI_WaitFifoStateUntilTimeout>
 8003682:	1e03      	subs	r3, r0, #0
 8003684:	d007      	beq.n	8003696 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	2220      	movs	r2, #32
 800368c:	431a      	orrs	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e000      	b.n	8003698 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	b004      	add	sp, #16
 800369e:	bd80      	pop	{r7, pc}

080036a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	23c0      	movs	r3, #192	; 0xc0
 80036b0:	0159      	lsls	r1, r3, #5
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	0013      	movs	r3, r2
 80036ba:	2200      	movs	r2, #0
 80036bc:	f7ff fef0 	bl	80034a0 <SPI_WaitFifoStateUntilTimeout>
 80036c0:	1e03      	subs	r3, r0, #0
 80036c2:	d007      	beq.n	80036d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c8:	2220      	movs	r2, #32
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e027      	b.n	8003724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	0013      	movs	r3, r2
 80036de:	2200      	movs	r2, #0
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	f7ff fe4f 	bl	8003384 <SPI_WaitFlagStateUntilTimeout>
 80036e6:	1e03      	subs	r3, r0, #0
 80036e8:	d007      	beq.n	80036fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	2220      	movs	r2, #32
 80036f0:	431a      	orrs	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e014      	b.n	8003724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	23c0      	movs	r3, #192	; 0xc0
 80036fe:	00d9      	lsls	r1, r3, #3
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	0013      	movs	r3, r2
 8003708:	2200      	movs	r2, #0
 800370a:	f7ff fec9 	bl	80034a0 <SPI_WaitFifoStateUntilTimeout>
 800370e:	1e03      	subs	r3, r0, #0
 8003710:	d007      	beq.n	8003722 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003716:	2220      	movs	r2, #32
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e000      	b.n	8003724 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b004      	add	sp, #16
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e042      	b.n	80037c4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	223d      	movs	r2, #61	; 0x3d
 8003742:	5c9b      	ldrb	r3, [r3, r2]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d107      	bne.n	800375a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	223c      	movs	r2, #60	; 0x3c
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0018      	movs	r0, r3
 8003756:	f7fd f84d 	bl	80007f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	223d      	movs	r2, #61	; 0x3d
 800375e:	2102      	movs	r1, #2
 8003760:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	0019      	movs	r1, r3
 800376c:	0010      	movs	r0, r2
 800376e:	f000 fa37 	bl	8003be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2246      	movs	r2, #70	; 0x46
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	223e      	movs	r2, #62	; 0x3e
 800377e:	2101      	movs	r1, #1
 8003780:	5499      	strb	r1, [r3, r2]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	223f      	movs	r2, #63	; 0x3f
 8003786:	2101      	movs	r1, #1
 8003788:	5499      	strb	r1, [r3, r2]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2240      	movs	r2, #64	; 0x40
 800378e:	2101      	movs	r1, #1
 8003790:	5499      	strb	r1, [r3, r2]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2241      	movs	r2, #65	; 0x41
 8003796:	2101      	movs	r1, #1
 8003798:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2242      	movs	r2, #66	; 0x42
 800379e:	2101      	movs	r1, #1
 80037a0:	5499      	strb	r1, [r3, r2]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2243      	movs	r2, #67	; 0x43
 80037a6:	2101      	movs	r1, #1
 80037a8:	5499      	strb	r1, [r3, r2]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2244      	movs	r2, #68	; 0x44
 80037ae:	2101      	movs	r1, #1
 80037b0:	5499      	strb	r1, [r3, r2]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2245      	movs	r2, #69	; 0x45
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	223d      	movs	r2, #61	; 0x3d
 80037be:	2101      	movs	r1, #1
 80037c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b002      	add	sp, #8
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2202      	movs	r2, #2
 80037dc:	4013      	ands	r3, r2
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d124      	bne.n	800382c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2202      	movs	r2, #2
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d11d      	bne.n	800382c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2203      	movs	r2, #3
 80037f6:	4252      	negs	r2, r2
 80037f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2203      	movs	r2, #3
 8003808:	4013      	ands	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f9ce 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
 8003814:	e007      	b.n	8003826 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f9c1 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	0018      	movs	r0, r3
 8003822:	f000 f9cd 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2204      	movs	r2, #4
 8003834:	4013      	ands	r3, r2
 8003836:	2b04      	cmp	r3, #4
 8003838:	d125      	bne.n	8003886 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2204      	movs	r2, #4
 8003842:	4013      	ands	r3, r2
 8003844:	2b04      	cmp	r3, #4
 8003846:	d11e      	bne.n	8003886 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2205      	movs	r2, #5
 800384e:	4252      	negs	r2, r2
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	23c0      	movs	r3, #192	; 0xc0
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4013      	ands	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0018      	movs	r0, r3
 800386a:	f000 f9a1 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
 800386e:	e007      	b.n	8003880 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	0018      	movs	r0, r3
 8003874:	f000 f994 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	0018      	movs	r0, r3
 800387c:	f000 f9a0 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2208      	movs	r2, #8
 800388e:	4013      	ands	r3, r2
 8003890:	2b08      	cmp	r3, #8
 8003892:	d124      	bne.n	80038de <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2208      	movs	r2, #8
 800389c:	4013      	ands	r3, r2
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d11d      	bne.n	80038de <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2209      	movs	r2, #9
 80038a8:	4252      	negs	r2, r2
 80038aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2204      	movs	r2, #4
 80038b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	2203      	movs	r2, #3
 80038ba:	4013      	ands	r3, r2
 80038bc:	d004      	beq.n	80038c8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f000 f975 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
 80038c6:	e007      	b.n	80038d8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 f968 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f000 f974 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2210      	movs	r2, #16
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d125      	bne.n	8003938 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2210      	movs	r2, #16
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d11e      	bne.n	8003938 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2211      	movs	r2, #17
 8003900:	4252      	negs	r2, r2
 8003902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2208      	movs	r2, #8
 8003908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	23c0      	movs	r3, #192	; 0xc0
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4013      	ands	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0018      	movs	r0, r3
 800391c:	f000 f948 	bl	8003bb0 <HAL_TIM_IC_CaptureCallback>
 8003920:	e007      	b.n	8003932 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0018      	movs	r0, r3
 8003926:	f000 f93b 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f000 f947 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2201      	movs	r2, #1
 8003940:	4013      	ands	r3, r2
 8003942:	2b01      	cmp	r3, #1
 8003944:	d10f      	bne.n	8003966 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	4013      	ands	r3, r2
 8003950:	2b01      	cmp	r3, #1
 8003952:	d108      	bne.n	8003966 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2202      	movs	r2, #2
 800395a:	4252      	negs	r2, r2
 800395c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f7fc fc72 	bl	800024a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2280      	movs	r2, #128	; 0x80
 800396e:	4013      	ands	r3, r2
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d10f      	bne.n	8003994 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2280      	movs	r2, #128	; 0x80
 800397c:	4013      	ands	r3, r2
 800397e:	2b80      	cmp	r3, #128	; 0x80
 8003980:	d108      	bne.n	8003994 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2281      	movs	r2, #129	; 0x81
 8003988:	4252      	negs	r2, r2
 800398a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	0018      	movs	r0, r3
 8003990:	f000 fa96 	bl	8003ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	4013      	ands	r3, r2
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d10f      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2240      	movs	r2, #64	; 0x40
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d108      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2241      	movs	r2, #65	; 0x41
 80039b6:	4252      	negs	r2, r2
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 f907 	bl	8003bd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2220      	movs	r2, #32
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d10f      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	4013      	ands	r3, r2
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d108      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2221      	movs	r2, #33	; 0x21
 80039e4:	4252      	negs	r2, r2
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fa60 	bl	8003eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	230f      	movs	r3, #15
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	223c      	movs	r2, #60	; 0x3c
 8003a0e:	5c9b      	ldrb	r3, [r3, r2]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_ConfigClockSource+0x20>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0bc      	b.n	8003b92 <HAL_TIM_ConfigClockSource+0x19a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	223c      	movs	r2, #60	; 0x3c
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	223d      	movs	r2, #61	; 0x3d
 8003a24:	2102      	movs	r1, #2
 8003a26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2277      	movs	r2, #119	; 0x77
 8003a34:	4393      	bics	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2280      	movs	r2, #128	; 0x80
 8003a4e:	0192      	lsls	r2, r2, #6
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d040      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0xde>
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	0192      	lsls	r2, r2, #6
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d900      	bls.n	8003a5e <HAL_TIM_ConfigClockSource+0x66>
 8003a5c:	e088      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
 8003a5e:	2280      	movs	r2, #128	; 0x80
 8003a60:	0152      	lsls	r2, r2, #5
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d100      	bne.n	8003a68 <HAL_TIM_ConfigClockSource+0x70>
 8003a66:	e088      	b.n	8003b7a <HAL_TIM_ConfigClockSource+0x182>
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	0152      	lsls	r2, r2, #5
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d900      	bls.n	8003a72 <HAL_TIM_ConfigClockSource+0x7a>
 8003a70:	e07e      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
 8003a72:	2b70      	cmp	r3, #112	; 0x70
 8003a74:	d018      	beq.n	8003aa8 <HAL_TIM_ConfigClockSource+0xb0>
 8003a76:	d900      	bls.n	8003a7a <HAL_TIM_ConfigClockSource+0x82>
 8003a78:	e07a      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
 8003a7a:	2b60      	cmp	r3, #96	; 0x60
 8003a7c:	d04f      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x126>
 8003a7e:	d900      	bls.n	8003a82 <HAL_TIM_ConfigClockSource+0x8a>
 8003a80:	e076      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
 8003a82:	2b50      	cmp	r3, #80	; 0x50
 8003a84:	d03b      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x106>
 8003a86:	d900      	bls.n	8003a8a <HAL_TIM_ConfigClockSource+0x92>
 8003a88:	e072      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
 8003a8a:	2b40      	cmp	r3, #64	; 0x40
 8003a8c:	d057      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x146>
 8003a8e:	d900      	bls.n	8003a92 <HAL_TIM_ConfigClockSource+0x9a>
 8003a90:	e06e      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
 8003a92:	2b30      	cmp	r3, #48	; 0x30
 8003a94:	d063      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x166>
 8003a96:	d86b      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d060      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x166>
 8003a9c:	d868      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d05d      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x166>
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d05b      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x166>
 8003aa6:	e063      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ab8:	f000 f982 	bl	8003dc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2277      	movs	r2, #119	; 0x77
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]
      break;
 8003ad4:	e052      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ae6:	f000 f96b 	bl	8003dc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	01c9      	lsls	r1, r1, #7
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
      break;
 8003afc:	e03e      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0a:	001a      	movs	r2, r3
 8003b0c:	f000 f8de 	bl	8003ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2150      	movs	r1, #80	; 0x50
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f938 	bl	8003d8c <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e02e      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b2a:	001a      	movs	r2, r3
 8003b2c:	f000 f8fc 	bl	8003d28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2160      	movs	r1, #96	; 0x60
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f928 	bl	8003d8c <TIM_ITRx_SetConfig>
      break;
 8003b3c:	e01e      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	f000 f8be 	bl	8003ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2140      	movs	r1, #64	; 0x40
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f918 	bl	8003d8c <TIM_ITRx_SetConfig>
      break;
 8003b5c:	e00e      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	0019      	movs	r1, r3
 8003b68:	0010      	movs	r0, r2
 8003b6a:	f000 f90f 	bl	8003d8c <TIM_ITRx_SetConfig>
      break;
 8003b6e:	e005      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b70:	230f      	movs	r3, #15
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
      break;
 8003b78:	e000      	b.n	8003b7c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b7a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	223d      	movs	r2, #61	; 0x3d
 8003b80:	2101      	movs	r1, #1
 8003b82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	223c      	movs	r2, #60	; 0x3c
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]

  return status;
 8003b8c:	230f      	movs	r3, #15
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	781b      	ldrb	r3, [r3, #0]
}
 8003b92:	0018      	movs	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	b004      	add	sp, #16
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	ffff00ff 	.word	0xffff00ff

08003ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a30      	ldr	r2, [pc, #192]	; (8003cb4 <TIM_Base_SetConfig+0xd4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d008      	beq.n	8003c0a <TIM_Base_SetConfig+0x2a>
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	05db      	lsls	r3, r3, #23
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d003      	beq.n	8003c0a <TIM_Base_SetConfig+0x2a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <TIM_Base_SetConfig+0xd8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d108      	bne.n	8003c1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2270      	movs	r2, #112	; 0x70
 8003c0e:	4393      	bics	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a25      	ldr	r2, [pc, #148]	; (8003cb4 <TIM_Base_SetConfig+0xd4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d014      	beq.n	8003c4e <TIM_Base_SetConfig+0x6e>
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	05db      	lsls	r3, r3, #23
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d00f      	beq.n	8003c4e <TIM_Base_SetConfig+0x6e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <TIM_Base_SetConfig+0xd8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <TIM_Base_SetConfig+0x6e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <TIM_Base_SetConfig+0xdc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <TIM_Base_SetConfig+0x6e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <TIM_Base_SetConfig+0xe0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_Base_SetConfig+0x6e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <TIM_Base_SetConfig+0xe4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <TIM_Base_SetConfig+0xe8>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	4393      	bics	r3, r2
 8003c66:	001a      	movs	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <TIM_Base_SetConfig+0xd4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_Base_SetConfig+0xbe>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a0b      	ldr	r2, [pc, #44]	; (8003cc0 <TIM_Base_SetConfig+0xe0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_Base_SetConfig+0xbe>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <TIM_Base_SetConfig+0xe4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d103      	bne.n	8003ca6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	615a      	str	r2, [r3, #20]
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40002000 	.word	0x40002000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800
 8003cc8:	fffffcff 	.word	0xfffffcff

08003ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	001a      	movs	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	22f0      	movs	r2, #240	; 0xf0
 8003cf6:	4393      	bics	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	220a      	movs	r2, #10
 8003d08:	4393      	bics	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	621a      	str	r2, [r3, #32]
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b006      	add	sp, #24
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	4393      	bics	r3, r2
 8003d3c:	001a      	movs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <TIM_TI2_ConfigInputStage+0x60>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	031b      	lsls	r3, r3, #12
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	22a0      	movs	r2, #160	; 0xa0
 8003d64:	4393      	bics	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b006      	add	sp, #24
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	ffff0fff 	.word	0xffff0fff

08003d8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2270      	movs	r2, #112	; 0x70
 8003da0:	4393      	bics	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	2207      	movs	r2, #7
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	609a      	str	r2, [r3, #8]
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b004      	add	sp, #16
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <TIM_ETR_SetConfig+0x3c>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	021a      	lsls	r2, r3, #8
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b006      	add	sp, #24
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	ffff00ff 	.word	0xffff00ff

08003e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	223c      	movs	r2, #60	; 0x3c
 8003e0e:	5c9b      	ldrb	r3, [r3, r2]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e042      	b.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	223c      	movs	r2, #60	; 0x3c
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	223d      	movs	r2, #61	; 0x3d
 8003e24:	2102      	movs	r1, #2
 8003e26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2270      	movs	r2, #112	; 0x70
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00a      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	05db      	lsls	r3, r3, #23
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d004      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0f      	ldr	r2, [pc, #60]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10c      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	4393      	bics	r3, r2
 8003e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	223d      	movs	r2, #61	; 0x3d
 8003e90:	2101      	movs	r1, #1
 8003e92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	223c      	movs	r2, #60	; 0x3c
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b004      	add	sp, #16
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40000400 	.word	0x40000400

08003eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e044      	b.n	8003f6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d107      	bne.n	8003efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2278      	movs	r2, #120	; 0x78
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7fc fcad 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2224      	movs	r2, #36	; 0x24
 8003efe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	438a      	bics	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	0018      	movs	r0, r3
 8003f14:	f000 fbcc 	bl	80046b0 <UART_SetConfig>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e024      	b.n	8003f6c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 fce7 	bl	8004900 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	490d      	ldr	r1, [pc, #52]	; (8003f74 <HAL_UART_Init+0xa4>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	212a      	movs	r1, #42	; 0x2a
 8003f4e:	438a      	bics	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f000 fd7f 	bl	8004a68 <UART_CheckIdleState>
 8003f6a:	0003      	movs	r3, r0
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b002      	add	sp, #8
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	ffffb7ff 	.word	0xffffb7ff

08003f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	1dbb      	adds	r3, r7, #6
 8003f86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d000      	beq.n	8003f92 <HAL_UART_Transmit+0x1a>
 8003f90:	e08d      	b.n	80040ae <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_UART_Transmit+0x28>
 8003f98:	1dbb      	adds	r3, r7, #6
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e085      	b.n	80040b0 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	015b      	lsls	r3, r3, #5
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d109      	bne.n	8003fc4 <HAL_UART_Transmit+0x4c>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d105      	bne.n	8003fc4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d001      	beq.n	8003fc4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e075      	b.n	80040b0 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2284      	movs	r2, #132	; 0x84
 8003fc8:	2100      	movs	r1, #0
 8003fca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2221      	movs	r2, #33	; 0x21
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fd2:	f7fd f8e7 	bl	80011a4 <HAL_GetTick>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1dba      	adds	r2, r7, #6
 8003fde:	2150      	movs	r1, #80	; 0x50
 8003fe0:	8812      	ldrh	r2, [r2, #0]
 8003fe2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1dba      	adds	r2, r7, #6
 8003fe8:	2152      	movs	r1, #82	; 0x52
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	015b      	lsls	r3, r3, #5
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d108      	bne.n	800400c <HAL_UART_Transmit+0x94>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d104      	bne.n	800400c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e003      	b.n	8004014 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004014:	e030      	b.n	8004078 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	0013      	movs	r3, r2
 8004020:	2200      	movs	r2, #0
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	f000 fdc8 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004028:	1e03      	subs	r3, r0, #0
 800402a:	d004      	beq.n	8004036 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e03c      	b.n	80040b0 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	881a      	ldrh	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	05d2      	lsls	r2, r2, #23
 8004046:	0dd2      	lsrs	r2, r2, #23
 8004048:	b292      	uxth	r2, r2
 800404a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	3302      	adds	r3, #2
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e008      	b.n	8004066 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	781a      	ldrb	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b292      	uxth	r2, r2
 800405e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	3301      	adds	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2252      	movs	r2, #82	; 0x52
 800406a:	5a9b      	ldrh	r3, [r3, r2]
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b299      	uxth	r1, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2252      	movs	r2, #82	; 0x52
 8004076:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2252      	movs	r2, #82	; 0x52
 800407c:	5a9b      	ldrh	r3, [r3, r2]
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1c8      	bne.n	8004016 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	0013      	movs	r3, r2
 800408e:	2200      	movs	r2, #0
 8004090:	2140      	movs	r1, #64	; 0x40
 8004092:	f000 fd91 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004096:	1e03      	subs	r3, r0, #0
 8004098:	d004      	beq.n	80040a4 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e005      	b.n	80040b0 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b008      	add	sp, #32
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b0ab      	sub	sp, #172	; 0xac
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	22a4      	movs	r2, #164	; 0xa4
 80040c8:	18b9      	adds	r1, r7, r2
 80040ca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	20a0      	movs	r0, #160	; 0xa0
 80040d4:	1839      	adds	r1, r7, r0
 80040d6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	219c      	movs	r1, #156	; 0x9c
 80040e0:	1879      	adds	r1, r7, r1
 80040e2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040e4:	0011      	movs	r1, r2
 80040e6:	18bb      	adds	r3, r7, r2
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a99      	ldr	r2, [pc, #612]	; (8004350 <HAL_UART_IRQHandler+0x298>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	2298      	movs	r2, #152	; 0x98
 80040f0:	18bc      	adds	r4, r7, r2
 80040f2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80040f4:	18bb      	adds	r3, r7, r2
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d114      	bne.n	8004126 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2220      	movs	r2, #32
 8004102:	4013      	ands	r3, r2
 8004104:	d00f      	beq.n	8004126 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004106:	183b      	adds	r3, r7, r0
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2220      	movs	r2, #32
 800410c:	4013      	ands	r3, r2
 800410e:	d00a      	beq.n	8004126 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004114:	2b00      	cmp	r3, #0
 8004116:	d100      	bne.n	800411a <HAL_UART_IRQHandler+0x62>
 8004118:	e29e      	b.n	8004658 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	0010      	movs	r0, r2
 8004122:	4798      	blx	r3
      }
      return;
 8004124:	e298      	b.n	8004658 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004126:	2398      	movs	r3, #152	; 0x98
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d100      	bne.n	8004132 <HAL_UART_IRQHandler+0x7a>
 8004130:	e114      	b.n	800435c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004132:	239c      	movs	r3, #156	; 0x9c
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2201      	movs	r2, #1
 800413a:	4013      	ands	r3, r2
 800413c:	d106      	bne.n	800414c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800413e:	23a0      	movs	r3, #160	; 0xa0
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a83      	ldr	r2, [pc, #524]	; (8004354 <HAL_UART_IRQHandler+0x29c>)
 8004146:	4013      	ands	r3, r2
 8004148:	d100      	bne.n	800414c <HAL_UART_IRQHandler+0x94>
 800414a:	e107      	b.n	800435c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800414c:	23a4      	movs	r3, #164	; 0xa4
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	4013      	ands	r3, r2
 8004156:	d012      	beq.n	800417e <HAL_UART_IRQHandler+0xc6>
 8004158:	23a0      	movs	r3, #160	; 0xa0
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	2380      	movs	r3, #128	; 0x80
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	4013      	ands	r3, r2
 8004164:	d00b      	beq.n	800417e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2201      	movs	r2, #1
 800416c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2284      	movs	r2, #132	; 0x84
 8004172:	589b      	ldr	r3, [r3, r2]
 8004174:	2201      	movs	r2, #1
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2184      	movs	r1, #132	; 0x84
 800417c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800417e:	23a4      	movs	r3, #164	; 0xa4
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2202      	movs	r2, #2
 8004186:	4013      	ands	r3, r2
 8004188:	d011      	beq.n	80041ae <HAL_UART_IRQHandler+0xf6>
 800418a:	239c      	movs	r3, #156	; 0x9c
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2201      	movs	r2, #1
 8004192:	4013      	ands	r3, r2
 8004194:	d00b      	beq.n	80041ae <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2202      	movs	r2, #2
 800419c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2284      	movs	r2, #132	; 0x84
 80041a2:	589b      	ldr	r3, [r3, r2]
 80041a4:	2204      	movs	r2, #4
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2184      	movs	r1, #132	; 0x84
 80041ac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041ae:	23a4      	movs	r3, #164	; 0xa4
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2204      	movs	r2, #4
 80041b6:	4013      	ands	r3, r2
 80041b8:	d011      	beq.n	80041de <HAL_UART_IRQHandler+0x126>
 80041ba:	239c      	movs	r3, #156	; 0x9c
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2201      	movs	r2, #1
 80041c2:	4013      	ands	r3, r2
 80041c4:	d00b      	beq.n	80041de <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2204      	movs	r2, #4
 80041cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2284      	movs	r2, #132	; 0x84
 80041d2:	589b      	ldr	r3, [r3, r2]
 80041d4:	2202      	movs	r2, #2
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2184      	movs	r1, #132	; 0x84
 80041dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041de:	23a4      	movs	r3, #164	; 0xa4
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2208      	movs	r2, #8
 80041e6:	4013      	ands	r3, r2
 80041e8:	d017      	beq.n	800421a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041ea:	23a0      	movs	r3, #160	; 0xa0
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2220      	movs	r2, #32
 80041f2:	4013      	ands	r3, r2
 80041f4:	d105      	bne.n	8004202 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041f6:	239c      	movs	r3, #156	; 0x9c
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2201      	movs	r2, #1
 80041fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004200:	d00b      	beq.n	800421a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2208      	movs	r2, #8
 8004208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2284      	movs	r2, #132	; 0x84
 800420e:	589b      	ldr	r3, [r3, r2]
 8004210:	2208      	movs	r2, #8
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2184      	movs	r1, #132	; 0x84
 8004218:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800421a:	23a4      	movs	r3, #164	; 0xa4
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	4013      	ands	r3, r2
 8004226:	d013      	beq.n	8004250 <HAL_UART_IRQHandler+0x198>
 8004228:	23a0      	movs	r3, #160	; 0xa0
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	04db      	lsls	r3, r3, #19
 8004232:	4013      	ands	r3, r2
 8004234:	d00c      	beq.n	8004250 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2280      	movs	r2, #128	; 0x80
 800423c:	0112      	lsls	r2, r2, #4
 800423e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2284      	movs	r2, #132	; 0x84
 8004244:	589b      	ldr	r3, [r3, r2]
 8004246:	2220      	movs	r2, #32
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2184      	movs	r1, #132	; 0x84
 800424e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2284      	movs	r2, #132	; 0x84
 8004254:	589b      	ldr	r3, [r3, r2]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d100      	bne.n	800425c <HAL_UART_IRQHandler+0x1a4>
 800425a:	e1ff      	b.n	800465c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800425c:	23a4      	movs	r3, #164	; 0xa4
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2220      	movs	r2, #32
 8004264:	4013      	ands	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004268:	23a0      	movs	r3, #160	; 0xa0
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2220      	movs	r2, #32
 8004270:	4013      	ands	r3, r2
 8004272:	d008      	beq.n	8004286 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	0010      	movs	r0, r2
 8004284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2284      	movs	r2, #132	; 0x84
 800428a:	589b      	ldr	r3, [r3, r2]
 800428c:	2194      	movs	r1, #148	; 0x94
 800428e:	187a      	adds	r2, r7, r1
 8004290:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2240      	movs	r2, #64	; 0x40
 800429a:	4013      	ands	r3, r2
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d004      	beq.n	80042aa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042a0:	187b      	adds	r3, r7, r1
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2228      	movs	r2, #40	; 0x28
 80042a6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042a8:	d047      	beq.n	800433a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 fced 	bl	8004c8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2240      	movs	r2, #64	; 0x40
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d137      	bne.n	8004330 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c0:	f3ef 8310 	mrs	r3, PRIMASK
 80042c4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80042c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c8:	2090      	movs	r0, #144	; 0x90
 80042ca:	183a      	adds	r2, r7, r0
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	2301      	movs	r3, #1
 80042d0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042d4:	f383 8810 	msr	PRIMASK, r3
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2140      	movs	r1, #64	; 0x40
 80042e6:	438a      	bics	r2, r1
 80042e8:	609a      	str	r2, [r3, #8]
 80042ea:	183b      	adds	r3, r7, r0
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042f2:	f383 8810 	msr	PRIMASK, r3
}
 80042f6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d012      	beq.n	8004326 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <HAL_UART_IRQHandler+0x2a0>)
 8004306:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430c:	0018      	movs	r0, r3
 800430e:	f7fd f869 	bl	80013e4 <HAL_DMA_Abort_IT>
 8004312:	1e03      	subs	r3, r0, #0
 8004314:	d01a      	beq.n	800434c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	0018      	movs	r0, r3
 8004322:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004324:	e012      	b.n	800434c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 f9ad 	bl	8004688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432e:	e00d      	b.n	800434c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f000 f9a8 	bl	8004688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e008      	b.n	800434c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	0018      	movs	r0, r3
 800433e:	f000 f9a3 	bl	8004688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2284      	movs	r2, #132	; 0x84
 8004346:	2100      	movs	r1, #0
 8004348:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800434a:	e187      	b.n	800465c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	46c0      	nop			; (mov r8, r8)
    return;
 800434e:	e185      	b.n	800465c <HAL_UART_IRQHandler+0x5a4>
 8004350:	0000080f 	.word	0x0000080f
 8004354:	04000120 	.word	0x04000120
 8004358:	08004d55 	.word	0x08004d55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004360:	2b01      	cmp	r3, #1
 8004362:	d000      	beq.n	8004366 <HAL_UART_IRQHandler+0x2ae>
 8004364:	e139      	b.n	80045da <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004366:	23a4      	movs	r3, #164	; 0xa4
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2210      	movs	r2, #16
 800436e:	4013      	ands	r3, r2
 8004370:	d100      	bne.n	8004374 <HAL_UART_IRQHandler+0x2bc>
 8004372:	e132      	b.n	80045da <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004374:	23a0      	movs	r3, #160	; 0xa0
 8004376:	18fb      	adds	r3, r7, r3
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2210      	movs	r2, #16
 800437c:	4013      	ands	r3, r2
 800437e:	d100      	bne.n	8004382 <HAL_UART_IRQHandler+0x2ca>
 8004380:	e12b      	b.n	80045da <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2210      	movs	r2, #16
 8004388:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2240      	movs	r2, #64	; 0x40
 8004392:	4013      	ands	r3, r2
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d000      	beq.n	800439a <HAL_UART_IRQHandler+0x2e2>
 8004398:	e09f      	b.n	80044da <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	217e      	movs	r1, #126	; 0x7e
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d100      	bne.n	80043b2 <HAL_UART_IRQHandler+0x2fa>
 80043b0:	e156      	b.n	8004660 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2258      	movs	r2, #88	; 0x58
 80043b6:	5a9b      	ldrh	r3, [r3, r2]
 80043b8:	187a      	adds	r2, r7, r1
 80043ba:	8812      	ldrh	r2, [r2, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d300      	bcc.n	80043c2 <HAL_UART_IRQHandler+0x30a>
 80043c0:	e14e      	b.n	8004660 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	187a      	adds	r2, r7, r1
 80043c6:	215a      	movs	r1, #90	; 0x5a
 80043c8:	8812      	ldrh	r2, [r2, #0]
 80043ca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d06f      	beq.n	80044b6 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d6:	f3ef 8310 	mrs	r3, PRIMASK
 80043da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043de:	67bb      	str	r3, [r7, #120]	; 0x78
 80043e0:	2301      	movs	r3, #1
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e6:	f383 8810 	msr	PRIMASK, r3
}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	499e      	ldr	r1, [pc, #632]	; (8004670 <HAL_UART_IRQHandler+0x5b8>)
 80043f8:	400a      	ands	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	f383 8810 	msr	PRIMASK, r3
}
 8004406:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004408:	f3ef 8310 	mrs	r3, PRIMASK
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800440e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	677b      	str	r3, [r7, #116]	; 0x74
 8004412:	2301      	movs	r3, #1
 8004414:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004418:	f383 8810 	msr	PRIMASK, r3
}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2101      	movs	r1, #1
 800442a:	438a      	bics	r2, r1
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004434:	f383 8810 	msr	PRIMASK, r3
}
 8004438:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800443a:	f3ef 8310 	mrs	r3, PRIMASK
 800443e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004440:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004442:	673b      	str	r3, [r7, #112]	; 0x70
 8004444:	2301      	movs	r3, #1
 8004446:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444a:	f383 8810 	msr	PRIMASK, r3
}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2140      	movs	r1, #64	; 0x40
 800445c:	438a      	bics	r2, r1
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004462:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004466:	f383 8810 	msr	PRIMASK, r3
}
 800446a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2280      	movs	r2, #128	; 0x80
 8004470:	2120      	movs	r1, #32
 8004472:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447a:	f3ef 8310 	mrs	r3, PRIMASK
 800447e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004480:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004484:	2301      	movs	r3, #1
 8004486:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800448a:	f383 8810 	msr	PRIMASK, r3
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2110      	movs	r1, #16
 800449c:	438a      	bics	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a6:	f383 8810 	msr	PRIMASK, r3
}
 80044aa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7fc ff5f 	bl	8001374 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2258      	movs	r2, #88	; 0x58
 80044c0:	5a9a      	ldrh	r2, [r3, r2]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	215a      	movs	r1, #90	; 0x5a
 80044c6:	5a5b      	ldrh	r3, [r3, r1]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0011      	movs	r1, r2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 f8e0 	bl	8004698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044d8:	e0c2      	b.n	8004660 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2258      	movs	r2, #88	; 0x58
 80044de:	5a99      	ldrh	r1, [r3, r2]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	225a      	movs	r2, #90	; 0x5a
 80044e4:	5a9b      	ldrh	r3, [r3, r2]
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	208e      	movs	r0, #142	; 0x8e
 80044ea:	183b      	adds	r3, r7, r0
 80044ec:	1a8a      	subs	r2, r1, r2
 80044ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	225a      	movs	r2, #90	; 0x5a
 80044f4:	5a9b      	ldrh	r3, [r3, r2]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d100      	bne.n	80044fe <HAL_UART_IRQHandler+0x446>
 80044fc:	e0b2      	b.n	8004664 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80044fe:	183b      	adds	r3, r7, r0
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d100      	bne.n	8004508 <HAL_UART_IRQHandler+0x450>
 8004506:	e0ad      	b.n	8004664 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004508:	f3ef 8310 	mrs	r3, PRIMASK
 800450c:	60fb      	str	r3, [r7, #12]
  return(result);
 800450e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004510:	2488      	movs	r4, #136	; 0x88
 8004512:	193a      	adds	r2, r7, r4
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	2301      	movs	r3, #1
 8004518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f383 8810 	msr	PRIMASK, r3
}
 8004520:	46c0      	nop			; (mov r8, r8)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4951      	ldr	r1, [pc, #324]	; (8004674 <HAL_UART_IRQHandler+0x5bc>)
 800452e:	400a      	ands	r2, r1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	193b      	adds	r3, r7, r4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f383 8810 	msr	PRIMASK, r3
}
 800453e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004540:	f3ef 8310 	mrs	r3, PRIMASK
 8004544:	61bb      	str	r3, [r7, #24]
  return(result);
 8004546:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	2484      	movs	r4, #132	; 0x84
 800454a:	193a      	adds	r2, r7, r4
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	2301      	movs	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f383 8810 	msr	PRIMASK, r3
}
 8004558:	46c0      	nop			; (mov r8, r8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2101      	movs	r1, #1
 8004566:	438a      	bics	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
 800456a:	193b      	adds	r3, r7, r4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	f383 8810 	msr	PRIMASK, r3
}
 8004576:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	2120      	movs	r1, #32
 800457e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458c:	f3ef 8310 	mrs	r3, PRIMASK
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004594:	2480      	movs	r4, #128	; 0x80
 8004596:	193a      	adds	r2, r7, r4
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	2301      	movs	r3, #1
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	f383 8810 	msr	PRIMASK, r3
}
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2110      	movs	r1, #16
 80045b2:	438a      	bics	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	193b      	adds	r3, r7, r4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	f383 8810 	msr	PRIMASK, r3
}
 80045c2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045ca:	183b      	adds	r3, r7, r0
 80045cc:	881a      	ldrh	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0011      	movs	r1, r2
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 f860 	bl	8004698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045d8:	e044      	b.n	8004664 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045da:	23a4      	movs	r3, #164	; 0xa4
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	035b      	lsls	r3, r3, #13
 80045e4:	4013      	ands	r3, r2
 80045e6:	d010      	beq.n	800460a <HAL_UART_IRQHandler+0x552>
 80045e8:	239c      	movs	r3, #156	; 0x9c
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	03db      	lsls	r3, r3, #15
 80045f2:	4013      	ands	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2280      	movs	r2, #128	; 0x80
 80045fc:	0352      	lsls	r2, r2, #13
 80045fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	0018      	movs	r0, r3
 8004604:	f000 fbe8 	bl	8004dd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004608:	e02f      	b.n	800466a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800460a:	23a4      	movs	r3, #164	; 0xa4
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2280      	movs	r2, #128	; 0x80
 8004612:	4013      	ands	r3, r2
 8004614:	d00f      	beq.n	8004636 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004616:	23a0      	movs	r3, #160	; 0xa0
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	4013      	ands	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01e      	beq.n	8004668 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	0010      	movs	r0, r2
 8004632:	4798      	blx	r3
    }
    return;
 8004634:	e018      	b.n	8004668 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004636:	23a4      	movs	r3, #164	; 0xa4
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2240      	movs	r2, #64	; 0x40
 800463e:	4013      	ands	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_UART_IRQHandler+0x5b2>
 8004642:	23a0      	movs	r3, #160	; 0xa0
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	4013      	ands	r3, r2
 800464c:	d00d      	beq.n	800466a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0018      	movs	r0, r3
 8004652:	f000 fb96 	bl	8004d82 <UART_EndTransmit_IT>
    return;
 8004656:	e008      	b.n	800466a <HAL_UART_IRQHandler+0x5b2>
      return;
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	e006      	b.n	800466a <HAL_UART_IRQHandler+0x5b2>
    return;
 800465c:	46c0      	nop			; (mov r8, r8)
 800465e:	e004      	b.n	800466a <HAL_UART_IRQHandler+0x5b2>
      return;
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	e002      	b.n	800466a <HAL_UART_IRQHandler+0x5b2>
      return;
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	e000      	b.n	800466a <HAL_UART_IRQHandler+0x5b2>
    return;
 8004668:	46c0      	nop			; (mov r8, r8)
  }

}
 800466a:	46bd      	mov	sp, r7
 800466c:	b02b      	add	sp, #172	; 0xac
 800466e:	bd90      	pop	{r4, r7, pc}
 8004670:	fffffeff 	.word	0xfffffeff
 8004674:	fffffedf 	.word	0xfffffedf

08004678 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004680:	46c0      	nop			; (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004690:	46c0      	nop			; (mov r8, r8)
 8004692:	46bd      	mov	sp, r7
 8004694:	b002      	add	sp, #8
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	000a      	movs	r2, r1
 80046a2:	1cbb      	adds	r3, r7, #2
 80046a4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b002      	add	sp, #8
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046b8:	231e      	movs	r3, #30
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a83      	ldr	r2, [pc, #524]	; (80048ec <UART_SetConfig+0x23c>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	0019      	movs	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a7e      	ldr	r2, [pc, #504]	; (80048f0 <UART_SetConfig+0x240>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4a75      	ldr	r2, [pc, #468]	; (80048f4 <UART_SetConfig+0x244>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	430a      	orrs	r2, r1
 800472a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800472c:	4b72      	ldr	r3, [pc, #456]	; (80048f8 <UART_SetConfig+0x248>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	2203      	movs	r2, #3
 8004732:	4013      	ands	r3, r2
 8004734:	2b03      	cmp	r3, #3
 8004736:	d00d      	beq.n	8004754 <UART_SetConfig+0xa4>
 8004738:	d81b      	bhi.n	8004772 <UART_SetConfig+0xc2>
 800473a:	2b02      	cmp	r3, #2
 800473c:	d014      	beq.n	8004768 <UART_SetConfig+0xb8>
 800473e:	d818      	bhi.n	8004772 <UART_SetConfig+0xc2>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <UART_SetConfig+0x9a>
 8004744:	2b01      	cmp	r3, #1
 8004746:	d00a      	beq.n	800475e <UART_SetConfig+0xae>
 8004748:	e013      	b.n	8004772 <UART_SetConfig+0xc2>
 800474a:	231f      	movs	r3, #31
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e012      	b.n	800477a <UART_SetConfig+0xca>
 8004754:	231f      	movs	r3, #31
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	2202      	movs	r2, #2
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	e00d      	b.n	800477a <UART_SetConfig+0xca>
 800475e:	231f      	movs	r3, #31
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2204      	movs	r2, #4
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e008      	b.n	800477a <UART_SetConfig+0xca>
 8004768:	231f      	movs	r3, #31
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2208      	movs	r2, #8
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e003      	b.n	800477a <UART_SetConfig+0xca>
 8004772:	231f      	movs	r3, #31
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	2210      	movs	r2, #16
 8004778:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	429a      	cmp	r2, r3
 8004784:	d15c      	bne.n	8004840 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8004786:	231f      	movs	r3, #31
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d015      	beq.n	80047bc <UART_SetConfig+0x10c>
 8004790:	dc18      	bgt.n	80047c4 <UART_SetConfig+0x114>
 8004792:	2b04      	cmp	r3, #4
 8004794:	d00d      	beq.n	80047b2 <UART_SetConfig+0x102>
 8004796:	dc15      	bgt.n	80047c4 <UART_SetConfig+0x114>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <UART_SetConfig+0xf2>
 800479c:	2b02      	cmp	r3, #2
 800479e:	d005      	beq.n	80047ac <UART_SetConfig+0xfc>
 80047a0:	e010      	b.n	80047c4 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a2:	f7fd fc33 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80047a6:	0003      	movs	r3, r0
 80047a8:	61bb      	str	r3, [r7, #24]
        break;
 80047aa:	e012      	b.n	80047d2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ac:	4b53      	ldr	r3, [pc, #332]	; (80048fc <UART_SetConfig+0x24c>)
 80047ae:	61bb      	str	r3, [r7, #24]
        break;
 80047b0:	e00f      	b.n	80047d2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b2:	f7fd fbcb 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 80047b6:	0003      	movs	r3, r0
 80047b8:	61bb      	str	r3, [r7, #24]
        break;
 80047ba:	e00a      	b.n	80047d2 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	61bb      	str	r3, [r7, #24]
        break;
 80047c2:	e006      	b.n	80047d2 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047c8:	231e      	movs	r3, #30
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
        break;
 80047d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d100      	bne.n	80047da <UART_SetConfig+0x12a>
 80047d8:	e07a      	b.n	80048d0 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	005a      	lsls	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	18d2      	adds	r2, r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	0019      	movs	r1, r3
 80047ec:	0010      	movs	r0, r2
 80047ee:	f7fb fc93 	bl	8000118 <__udivsi3>
 80047f2:	0003      	movs	r3, r0
 80047f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b0f      	cmp	r3, #15
 80047fa:	d91c      	bls.n	8004836 <UART_SetConfig+0x186>
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	025b      	lsls	r3, r3, #9
 8004802:	429a      	cmp	r2, r3
 8004804:	d217      	bcs.n	8004836 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	b29a      	uxth	r2, r3
 800480a:	200e      	movs	r0, #14
 800480c:	183b      	adds	r3, r7, r0
 800480e:	210f      	movs	r1, #15
 8004810:	438a      	bics	r2, r1
 8004812:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	b29b      	uxth	r3, r3
 800481a:	2207      	movs	r2, #7
 800481c:	4013      	ands	r3, r2
 800481e:	b299      	uxth	r1, r3
 8004820:	183b      	adds	r3, r7, r0
 8004822:	183a      	adds	r2, r7, r0
 8004824:	8812      	ldrh	r2, [r2, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	183a      	adds	r2, r7, r0
 8004830:	8812      	ldrh	r2, [r2, #0]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	e04c      	b.n	80048d0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004836:	231e      	movs	r3, #30
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e047      	b.n	80048d0 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004840:	231f      	movs	r3, #31
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b08      	cmp	r3, #8
 8004848:	d015      	beq.n	8004876 <UART_SetConfig+0x1c6>
 800484a:	dc18      	bgt.n	800487e <UART_SetConfig+0x1ce>
 800484c:	2b04      	cmp	r3, #4
 800484e:	d00d      	beq.n	800486c <UART_SetConfig+0x1bc>
 8004850:	dc15      	bgt.n	800487e <UART_SetConfig+0x1ce>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <UART_SetConfig+0x1ac>
 8004856:	2b02      	cmp	r3, #2
 8004858:	d005      	beq.n	8004866 <UART_SetConfig+0x1b6>
 800485a:	e010      	b.n	800487e <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485c:	f7fd fbd6 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8004860:	0003      	movs	r3, r0
 8004862:	61bb      	str	r3, [r7, #24]
        break;
 8004864:	e012      	b.n	800488c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004866:	4b25      	ldr	r3, [pc, #148]	; (80048fc <UART_SetConfig+0x24c>)
 8004868:	61bb      	str	r3, [r7, #24]
        break;
 800486a:	e00f      	b.n	800488c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486c:	f7fd fb6e 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8004870:	0003      	movs	r3, r0
 8004872:	61bb      	str	r3, [r7, #24]
        break;
 8004874:	e00a      	b.n	800488c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	61bb      	str	r3, [r7, #24]
        break;
 800487c:	e006      	b.n	800488c <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004882:	231e      	movs	r3, #30
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	2201      	movs	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]
        break;
 800488a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01e      	beq.n	80048d0 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085a      	lsrs	r2, r3, #1
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	18d2      	adds	r2, r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	0019      	movs	r1, r3
 80048a2:	0010      	movs	r0, r2
 80048a4:	f7fb fc38 	bl	8000118 <__udivsi3>
 80048a8:	0003      	movs	r3, r0
 80048aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b0f      	cmp	r3, #15
 80048b0:	d90a      	bls.n	80048c8 <UART_SetConfig+0x218>
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	025b      	lsls	r3, r3, #9
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d205      	bcs.n	80048c8 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	e003      	b.n	80048d0 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 80048c8:	231e      	movs	r3, #30
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80048dc:	231e      	movs	r3, #30
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	781b      	ldrb	r3, [r3, #0]
}
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b008      	add	sp, #32
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	ffff69f3 	.word	0xffff69f3
 80048f0:	ffffcfff 	.word	0xffffcfff
 80048f4:	fffff4ff 	.word	0xfffff4ff
 80048f8:	40021000 	.word	0x40021000
 80048fc:	007a1200 	.word	0x007a1200

08004900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2201      	movs	r2, #1
 800490e:	4013      	ands	r3, r2
 8004910:	d00b      	beq.n	800492a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a4a      	ldr	r2, [pc, #296]	; (8004a44 <UART_AdvFeatureConfig+0x144>)
 800491a:	4013      	ands	r3, r2
 800491c:	0019      	movs	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2202      	movs	r2, #2
 8004930:	4013      	ands	r3, r2
 8004932:	d00b      	beq.n	800494c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4a43      	ldr	r2, [pc, #268]	; (8004a48 <UART_AdvFeatureConfig+0x148>)
 800493c:	4013      	ands	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	2204      	movs	r2, #4
 8004952:	4013      	ands	r3, r2
 8004954:	d00b      	beq.n	800496e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <UART_AdvFeatureConfig+0x14c>)
 800495e:	4013      	ands	r3, r2
 8004960:	0019      	movs	r1, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2208      	movs	r2, #8
 8004974:	4013      	ands	r3, r2
 8004976:	d00b      	beq.n	8004990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4a34      	ldr	r2, [pc, #208]	; (8004a50 <UART_AdvFeatureConfig+0x150>)
 8004980:	4013      	ands	r3, r2
 8004982:	0019      	movs	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	2210      	movs	r2, #16
 8004996:	4013      	ands	r3, r2
 8004998:	d00b      	beq.n	80049b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4a2c      	ldr	r2, [pc, #176]	; (8004a54 <UART_AdvFeatureConfig+0x154>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	0019      	movs	r1, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2220      	movs	r2, #32
 80049b8:	4013      	ands	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <UART_AdvFeatureConfig+0x158>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	0019      	movs	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	2240      	movs	r2, #64	; 0x40
 80049da:	4013      	ands	r3, r2
 80049dc:	d01d      	beq.n	8004a1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <UART_AdvFeatureConfig+0x15c>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	0019      	movs	r1, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	035b      	lsls	r3, r3, #13
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d10b      	bne.n	8004a1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <UART_AdvFeatureConfig+0x160>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	4013      	ands	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <UART_AdvFeatureConfig+0x164>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b002      	add	sp, #8
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	fffdffff 	.word	0xfffdffff
 8004a48:	fffeffff 	.word	0xfffeffff
 8004a4c:	fffbffff 	.word	0xfffbffff
 8004a50:	ffff7fff 	.word	0xffff7fff
 8004a54:	ffffefff 	.word	0xffffefff
 8004a58:	ffffdfff 	.word	0xffffdfff
 8004a5c:	ffefffff 	.word	0xffefffff
 8004a60:	ff9fffff 	.word	0xff9fffff
 8004a64:	fff7ffff 	.word	0xfff7ffff

08004a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b092      	sub	sp, #72	; 0x48
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2284      	movs	r2, #132	; 0x84
 8004a74:	2100      	movs	r1, #0
 8004a76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a78:	f7fc fb94 	bl	80011a4 <HAL_GetTick>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2208      	movs	r2, #8
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d12c      	bne.n	8004ae8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	0391      	lsls	r1, r2, #14
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4a46      	ldr	r2, [pc, #280]	; (8004bb0 <UART_CheckIdleState+0x148>)
 8004a98:	9200      	str	r2, [sp, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f000 f88c 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d021      	beq.n	8004ae8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004aac:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aae:	2301      	movs	r3, #1
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	f383 8810 	msr	PRIMASK, r3
}
 8004ab8:	46c0      	nop			; (mov r8, r8)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	438a      	bics	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad0:	f383 8810 	msr	PRIMASK, r3
}
 8004ad4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2278      	movs	r2, #120	; 0x78
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e05f      	b.n	8004ba8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2204      	movs	r2, #4
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d146      	bne.n	8004b84 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	03d1      	lsls	r1, r2, #15
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <UART_CheckIdleState+0x148>)
 8004b00:	9200      	str	r2, [sp, #0]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f000 f858 	bl	8004bb8 <UART_WaitOnFlagUntilTimeout>
 8004b08:	1e03      	subs	r3, r0, #0
 8004b0a:	d03b      	beq.n	8004b84 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b10:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b12:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
 8004b16:	2301      	movs	r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f383 8810 	msr	PRIMASK, r3
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4921      	ldr	r1, [pc, #132]	; (8004bb4 <UART_CheckIdleState+0x14c>)
 8004b2e:	400a      	ands	r2, r1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f383 8810 	msr	PRIMASK, r3
}
 8004b3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b42:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b44:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b46:	633b      	str	r3, [r7, #48]	; 0x30
 8004b48:	2301      	movs	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f383 8810 	msr	PRIMASK, r3
}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2101      	movs	r1, #1
 8004b60:	438a      	bics	r2, r1
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f383 8810 	msr	PRIMASK, r3
}
 8004b6e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2280      	movs	r2, #128	; 0x80
 8004b74:	2120      	movs	r1, #32
 8004b76:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2278      	movs	r2, #120	; 0x78
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e011      	b.n	8004ba8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2280      	movs	r2, #128	; 0x80
 8004b8e:	2120      	movs	r1, #32
 8004b90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2278      	movs	r2, #120	; 0x78
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b010      	add	sp, #64	; 0x40
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	01ffffff 	.word	0x01ffffff
 8004bb4:	fffffedf 	.word	0xfffffedf

08004bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	1dfb      	adds	r3, r7, #7
 8004bc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc8:	e04b      	b.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	d048      	beq.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd0:	f7fc fae8 	bl	80011a4 <HAL_GetTick>
 8004bd4:	0002      	movs	r2, r0
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e04b      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d035      	beq.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d111      	bne.n	8004c28 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2208      	movs	r2, #8
 8004c0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f000 f83c 	bl	8004c8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2284      	movs	r2, #132	; 0x84
 8004c18:	2108      	movs	r1, #8
 8004c1a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2278      	movs	r2, #120	; 0x78
 8004c20:	2100      	movs	r1, #0
 8004c22:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e02c      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	401a      	ands	r2, r3
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d112      	bne.n	8004c62 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2280      	movs	r2, #128	; 0x80
 8004c42:	0112      	lsls	r2, r2, #4
 8004c44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f000 f81f 	bl	8004c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2284      	movs	r2, #132	; 0x84
 8004c52:	2120      	movs	r1, #32
 8004c54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2278      	movs	r2, #120	; 0x78
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e00f      	b.n	8004c82 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	425a      	negs	r2, r3
 8004c72:	4153      	adcs	r3, r2
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	001a      	movs	r2, r3
 8004c78:	1dfb      	adds	r3, r7, #7
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d0a4      	beq.n	8004bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	0018      	movs	r0, r3
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b004      	add	sp, #16
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08e      	sub	sp, #56	; 0x38
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c94:	f3ef 8310 	mrs	r3, PRIMASK
 8004c98:	617b      	str	r3, [r7, #20]
  return(result);
 8004c9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f383 8810 	msr	PRIMASK, r3
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4926      	ldr	r1, [pc, #152]	; (8004d50 <UART_EndRxTransfer+0xc4>)
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f383 8810 	msr	PRIMASK, r3
}
 8004cc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cca:	623b      	str	r3, [r7, #32]
  return(result);
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	f383 8810 	msr	PRIMASK, r3
}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	438a      	bics	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f383 8810 	msr	PRIMASK, r3
}
 8004cf6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d118      	bne.n	8004d32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d00:	f3ef 8310 	mrs	r3, PRIMASK
 8004d04:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2110      	movs	r1, #16
 8004d22:	438a      	bics	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f383 8810 	msr	PRIMASK, r3
}
 8004d30:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2280      	movs	r2, #128	; 0x80
 8004d36:	2120      	movs	r1, #32
 8004d38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b00e      	add	sp, #56	; 0x38
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	fffffedf 	.word	0xfffffedf

08004d54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	225a      	movs	r2, #90	; 0x5a
 8004d66:	2100      	movs	r1, #0
 8004d68:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2252      	movs	r2, #82	; 0x52
 8004d6e:	2100      	movs	r1, #0
 8004d70:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	0018      	movs	r0, r3
 8004d76:	f7ff fc87 	bl	8004688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d90:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	2301      	movs	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f383 8810 	msr	PRIMASK, r3
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2140      	movs	r1, #64	; 0x40
 8004dac:	438a      	bics	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f7ff fc54 	bl	8004678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd0:	46c0      	nop			; (mov r8, r8)
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b006      	add	sp, #24
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004de0:	46c0      	nop			; (mov r8, r8)
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b002      	add	sp, #8
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <memset>:
 8004de8:	0003      	movs	r3, r0
 8004dea:	1882      	adds	r2, r0, r2
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	7019      	strb	r1, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <__libc_init_array>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	2600      	movs	r6, #0
 8004dfc:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <__libc_init_array+0x38>)
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	; (8004e34 <__libc_init_array+0x3c>)
 8004e00:	1b64      	subs	r4, r4, r5
 8004e02:	10a4      	asrs	r4, r4, #2
 8004e04:	42a6      	cmp	r6, r4
 8004e06:	d109      	bne.n	8004e1c <__libc_init_array+0x24>
 8004e08:	2600      	movs	r6, #0
 8004e0a:	f000 f819 	bl	8004e40 <_init>
 8004e0e:	4c0a      	ldr	r4, [pc, #40]	; (8004e38 <__libc_init_array+0x40>)
 8004e10:	4d0a      	ldr	r5, [pc, #40]	; (8004e3c <__libc_init_array+0x44>)
 8004e12:	1b64      	subs	r4, r4, r5
 8004e14:	10a4      	asrs	r4, r4, #2
 8004e16:	42a6      	cmp	r6, r4
 8004e18:	d105      	bne.n	8004e26 <__libc_init_array+0x2e>
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	00b3      	lsls	r3, r6, #2
 8004e1e:	58eb      	ldr	r3, [r5, r3]
 8004e20:	4798      	blx	r3
 8004e22:	3601      	adds	r6, #1
 8004e24:	e7ee      	b.n	8004e04 <__libc_init_array+0xc>
 8004e26:	00b3      	lsls	r3, r6, #2
 8004e28:	58eb      	ldr	r3, [r5, r3]
 8004e2a:	4798      	blx	r3
 8004e2c:	3601      	adds	r6, #1
 8004e2e:	e7f2      	b.n	8004e16 <__libc_init_array+0x1e>
 8004e30:	08004e90 	.word	0x08004e90
 8004e34:	08004e90 	.word	0x08004e90
 8004e38:	08004e94 	.word	0x08004e94
 8004e3c:	08004e90 	.word	0x08004e90

08004e40 <_init>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr

08004e4c <_fini>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr
